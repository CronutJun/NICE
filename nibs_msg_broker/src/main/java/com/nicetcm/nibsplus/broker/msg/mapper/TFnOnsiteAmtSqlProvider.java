package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TFnOnsiteAmt;
import com.nicetcm.nibsplus.broker.msg.model.TFnOnsiteAmtSpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TFnOnsiteAmtSpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TFnOnsiteAmtSpec;
import java.util.List;
import java.util.Map;

public class TFnOnsiteAmtSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String countBySpec(TFnOnsiteAmtSpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_FN_ONSITE_AMT");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String deleteBySpec(TFnOnsiteAmtSpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_FN_ONSITE_AMT");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String insertSelective(TFnOnsiteAmt record) {
        BEGIN();
        INSERT_INTO("OP.T_FN_ONSITE_AMT");

        if (record.getSendDate() != null) {
            VALUES("SEND_DATE", "#{sendDate,jdbcType=VARCHAR}");
        }

        if (record.getOrgCd() != null) {
            VALUES("ORG_CD", "#{orgCd,jdbcType=VARCHAR}");
        }

        if (record.getBranchCd() != null) {
            VALUES("BRANCH_CD", "#{branchCd,jdbcType=VARCHAR}");
        }

        if (record.getMacNo() != null) {
            VALUES("MAC_NO", "#{macNo,jdbcType=VARCHAR}");
        }

        if (record.getSendCheckAmt() != null) {
            VALUES("SEND_CHECK_AMT", "#{sendCheckAmt,jdbcType=OTHER}");
        }

        if (record.getSendCashAmt() != null) {
            VALUES("SEND_CASH_AMT", "#{sendCashAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCheckAmt() != null) {
            VALUES("COLLECT_CHECK_AMT", "#{collectCheckAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCashAmt() != null) {
            VALUES("COLLECT_CASH_AMT", "#{collectCashAmt,jdbcType=OTHER}");
        }

        if (record.getUpdateUid() != null) {
            VALUES("UPDATE_UID", "#{updateUid,jdbcType=VARCHAR}");
        }

        if (record.getUpdateDate() != null) {
            VALUES("UPDATE_DATE", "#{updateDate,jdbcType=TIMESTAMP}");
        }

        if (record.getStartTime() != null) {
            VALUES("START_TIME", "#{startTime,jdbcType=VARCHAR}");
        }

        if (record.getArrivalTime() != null) {
            VALUES("ARRIVAL_TIME", "#{arrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getFinishTime() != null) {
            VALUES("FINISH_TIME", "#{finishTime,jdbcType=VARCHAR}");
        }

        if (record.getMemberId() != null) {
            VALUES("MEMBER_ID", "#{memberId,jdbcType=VARCHAR}");
        }

        if (record.getSiteCd() != null) {
            VALUES("SITE_CD", "#{siteCd,jdbcType=VARCHAR}");
        }

        if (record.getReceiveId() != null) {
            VALUES("RECEIVE_ID", "#{receiveId,jdbcType=VARCHAR}");
        }

        if (record.getCollectId() != null) {
            VALUES("COLLECT_ID", "#{collectId,jdbcType=VARCHAR}");
        }

        if (record.getCollectStartTime() != null) {
            VALUES("COLLECT_START_TIME", "#{collectStartTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectArrivalTime() != null) {
            VALUES("COLLECT_ARRIVAL_TIME", "#{collectArrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectFinishTime() != null) {
            VALUES("COLLECT_FINISH_TIME", "#{collectFinishTime,jdbcType=VARCHAR}");
        }

        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String selectBySpec(TFnOnsiteAmtSpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("SEND_DATE");
        } else {
            SELECT("SEND_DATE");
        }
        SELECT("ORG_CD");
        SELECT("BRANCH_CD");
        SELECT("MAC_NO");
        SELECT("SEND_CHECK_AMT");
        SELECT("SEND_CASH_AMT");
        SELECT("COLLECT_CHECK_AMT");
        SELECT("COLLECT_CASH_AMT");
        SELECT("UPDATE_UID");
        SELECT("UPDATE_DATE");
        SELECT("START_TIME");
        SELECT("ARRIVAL_TIME");
        SELECT("FINISH_TIME");
        SELECT("MEMBER_ID");
        SELECT("SITE_CD");
        SELECT("RECEIVE_ID");
        SELECT("COLLECT_ID");
        SELECT("COLLECT_START_TIME");
        SELECT("COLLECT_ARRIVAL_TIME");
        SELECT("COLLECT_FINISH_TIME");
        FROM("OP.T_FN_ONSITE_AMT");
        applyWhere(spec, false);

        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }

        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TFnOnsiteAmt record = (TFnOnsiteAmt) parameter.get("record");
        TFnOnsiteAmtSpec spec = (TFnOnsiteAmtSpec) parameter.get("spec");

        BEGIN();
        UPDATE("OP.T_FN_ONSITE_AMT");

        if (record.getSendDate() != null) {
            SET("SEND_DATE = #{record.sendDate,jdbcType=VARCHAR}");
        }

        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        }

        if (record.getBranchCd() != null) {
            SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        }

        if (record.getMacNo() != null) {
            SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        }

        if (record.getSendCheckAmt() != null) {
            SET("SEND_CHECK_AMT = #{record.sendCheckAmt,jdbcType=OTHER}");
        }

        if (record.getSendCashAmt() != null) {
            SET("SEND_CASH_AMT = #{record.sendCashAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCheckAmt() != null) {
            SET("COLLECT_CHECK_AMT = #{record.collectCheckAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCashAmt() != null) {
            SET("COLLECT_CASH_AMT = #{record.collectCashAmt,jdbcType=OTHER}");
        }

        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        }

        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        }

        if (record.getStartTime() != null) {
            SET("START_TIME = #{record.startTime,jdbcType=VARCHAR}");
        }

        if (record.getArrivalTime() != null) {
            SET("ARRIVAL_TIME = #{record.arrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getFinishTime() != null) {
            SET("FINISH_TIME = #{record.finishTime,jdbcType=VARCHAR}");
        }

        if (record.getMemberId() != null) {
            SET("MEMBER_ID = #{record.memberId,jdbcType=VARCHAR}");
        }

        if (record.getSiteCd() != null) {
            SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        }

        if (record.getReceiveId() != null) {
            SET("RECEIVE_ID = #{record.receiveId,jdbcType=VARCHAR}");
        }

        if (record.getCollectId() != null) {
            SET("COLLECT_ID = #{record.collectId,jdbcType=VARCHAR}");
        }

        if (record.getCollectStartTime() != null) {
            SET("COLLECT_START_TIME = #{record.collectStartTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectArrivalTime() != null) {
            SET("COLLECT_ARRIVAL_TIME = #{record.collectArrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectFinishTime() != null) {
            SET("COLLECT_FINISH_TIME = #{record.collectFinishTime,jdbcType=VARCHAR}");
        }

        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_FN_ONSITE_AMT");

        SET("SEND_DATE = #{record.sendDate,jdbcType=VARCHAR}");
        SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        SET("SEND_CHECK_AMT = #{record.sendCheckAmt,jdbcType=OTHER}");
        SET("SEND_CASH_AMT = #{record.sendCashAmt,jdbcType=OTHER}");
        SET("COLLECT_CHECK_AMT = #{record.collectCheckAmt,jdbcType=OTHER}");
        SET("COLLECT_CASH_AMT = #{record.collectCashAmt,jdbcType=OTHER}");
        SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        SET("START_TIME = #{record.startTime,jdbcType=VARCHAR}");
        SET("ARRIVAL_TIME = #{record.arrivalTime,jdbcType=VARCHAR}");
        SET("FINISH_TIME = #{record.finishTime,jdbcType=VARCHAR}");
        SET("MEMBER_ID = #{record.memberId,jdbcType=VARCHAR}");
        SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        SET("RECEIVE_ID = #{record.receiveId,jdbcType=VARCHAR}");
        SET("COLLECT_ID = #{record.collectId,jdbcType=VARCHAR}");
        SET("COLLECT_START_TIME = #{record.collectStartTime,jdbcType=VARCHAR}");
        SET("COLLECT_ARRIVAL_TIME = #{record.collectArrivalTime,jdbcType=VARCHAR}");
        SET("COLLECT_FINISH_TIME = #{record.collectFinishTime,jdbcType=VARCHAR}");

        TFnOnsiteAmtSpec spec = (TFnOnsiteAmtSpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    public String updateByPrimaryKeySelective(TFnOnsiteAmt record) {
        BEGIN();
        UPDATE("OP.T_FN_ONSITE_AMT");

        if (record.getSendCheckAmt() != null) {
            SET("SEND_CHECK_AMT = #{sendCheckAmt,jdbcType=OTHER}");
        }

        if (record.getSendCashAmt() != null) {
            SET("SEND_CASH_AMT = #{sendCashAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCheckAmt() != null) {
            SET("COLLECT_CHECK_AMT = #{collectCheckAmt,jdbcType=OTHER}");
        }

        if (record.getCollectCashAmt() != null) {
            SET("COLLECT_CASH_AMT = #{collectCashAmt,jdbcType=OTHER}");
        }

        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{updateUid,jdbcType=VARCHAR}");
        }

        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP}");
        }

        if (record.getStartTime() != null) {
            SET("START_TIME = #{startTime,jdbcType=VARCHAR}");
        }

        if (record.getArrivalTime() != null) {
            SET("ARRIVAL_TIME = #{arrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getFinishTime() != null) {
            SET("FINISH_TIME = #{finishTime,jdbcType=VARCHAR}");
        }

        if (record.getMemberId() != null) {
            SET("MEMBER_ID = #{memberId,jdbcType=VARCHAR}");
        }

        if (record.getSiteCd() != null) {
            SET("SITE_CD = #{siteCd,jdbcType=VARCHAR}");
        }

        if (record.getReceiveId() != null) {
            SET("RECEIVE_ID = #{receiveId,jdbcType=VARCHAR}");
        }

        if (record.getCollectId() != null) {
            SET("COLLECT_ID = #{collectId,jdbcType=VARCHAR}");
        }

        if (record.getCollectStartTime() != null) {
            SET("COLLECT_START_TIME = #{collectStartTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectArrivalTime() != null) {
            SET("COLLECT_ARRIVAL_TIME = #{collectArrivalTime,jdbcType=VARCHAR}");
        }

        if (record.getCollectFinishTime() != null) {
            SET("COLLECT_FINISH_TIME = #{collectFinishTime,jdbcType=VARCHAR}");
        }

        WHERE("SEND_DATE = #{sendDate,jdbcType=VARCHAR}");
        WHERE("ORG_CD = #{orgCd,jdbcType=VARCHAR}");
        WHERE("BRANCH_CD = #{branchCd,jdbcType=VARCHAR}");
        WHERE("MAC_NO = #{macNo,jdbcType=VARCHAR}");

        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_ONSITE_AMT
     *
     * @mbggenerated Thu Aug 14 16:45:51 KST 2014
     */
    protected void applyWhere(TFnOnsiteAmtSpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}