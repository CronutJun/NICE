package com.nicetcm.nibsplus.filemng.main;

import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.quartz.DisallowConcurrentExecution;
import org.quartz.JobExecutionContext;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.context.ApplicationContext;

import com.nicetcm.nibsplus.filemng.model.TransferVO;
import com.nicetcm.nibsplus.filemng.service.impl.SFtpTransfer;
import com.nicetcm.nibsplus.scheduler.common.AbstractJob;

@DisallowConcurrentExecution
public class NhFilemngJob extends AbstractJob {

	private Logger logger = Logger.getLogger(this.getClass());
	private Logger errorLogger = Logger.getLogger("FilemngERROR");
	
	@Override
	public void execte(JobExecutionContext context) {
        try {
    		ApplicationContext applicationContext = (ApplicationContext)context.getMergedJobDataMap().get("applicationContext");
    		Properties config = applicationContext.getBean("config", Properties.class);

            TransferVO transferVO = new TransferVO();
            transferVO.setHost(config.getProperty("host.host"));
            transferVO.setAvailableServerPort(Integer.parseInt(config.getProperty("host.availableServerPort")));
            transferVO.setUserId(config.getProperty("host.userid"));
            transferVO.setPassword(config.getProperty("host.password"));
            transferVO.setRemotePath(config.getProperty("nh.remote.path"));
            transferVO.setLocalPath(config.getProperty("nh.local.path"));
System.out.println(String.format("host.host : [%s], host.availableServerPort = [%s], host.userid = [%s], host.password= [%s], nh.remote.path = [%s]", 
config.getProperty("host.host"),
config.getProperty("host.availableServerPort"),
config.getProperty("host.userid"),
config.getProperty("host.password"),
config.getProperty("nh.remote.path"))
        );            

			List<String> files = SFtpTransfer.getFileNames(transferVO, "R" /*+ NibsBatchUtil.SysDate()*/ + "*.txt");
			int count = 0;
			
			JobLauncher jobLauncher = (JobLauncher) applicationContext.getBean("jobLauncher");
			// ex) /Project_NIBS/FTP_RECEIVE/nh/R20140924B11.txt
			// File[] files = new File(config.getProperty("nh.local.path")).listFiles();

			logger.info(this.getClass().getName() + " execute...");
			
			if (files != null) {
				for (String fileName : files) {
					try {
						// JobParameters jobParameters = new JobParametersBuilder().addString("pid", "10").toJobParameters();
						Map<String, JobParameter> parameters = new LinkedHashMap<String, JobParameter>();
						// 의미없는 값이지만 파라미터를 중복해서 여러번 실행이 불가능 하다. 그런 이유로 추가함.
						parameters.put("temp", new JobParameter(Calendar.getInstance().getTimeInMillis()));
						parameters.put("fileName", new JobParameter(fileName));
						parameters.put("nh.file.name", new JobParameter(transferVO.getLocalPath() + "/" + fileName));
		
						JobParameters jobParameters = new JobParameters(parameters);
						JobExecution execution = jobLauncher.run((Job) applicationContext.getBean("nhJob"), jobParameters);

						SFtpTransfer.renameToBak(transferVO, fileName);

						logger.info(String.format("%s Exit Status : %s - %s", this.getClass().getName(), execution.getStatus(), fileName));
					} catch (Exception e) {
			        	errorLogger.error(e.getMessage(), e.getCause());
					}
					
					count++;
				}

				if (count > 0) {
					logger.info(this.getClass().getName() + " Done");
				} else {
					logger.info(this.getClass().getName() + " No data.");
				}
			} else {
				logger.info(this.getClass().getName() + " No data.");
			}
        } catch(Exception e) {
        	errorLogger.error(e.getMessage(), e.getCause());
        }
	}
}