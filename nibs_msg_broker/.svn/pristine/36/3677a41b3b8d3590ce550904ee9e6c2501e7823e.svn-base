package com.nicetcm.nibsplus.broker.msg.mapper;

import com.nicetcm.nibsplus.broker.msg.model.TCtUnfinish;
import com.nicetcm.nibsplus.broker.msg.model.TCtUnfinishKey;
import com.nicetcm.nibsplus.broker.msg.model.TCtUnfinishSpec;
import com.nicetcm.nibsplus.broker.msg.model.TCtErrorBasic;
import com.nicetcm.nibsplus.broker.msg.model.ErrorState;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface TCtUnfinishMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @SelectProvider(type=TCtUnfinishSqlProvider.class, method="countBySpec")
    int countBySpec(TCtUnfinishSpec spec);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @DeleteProvider(type=TCtUnfinishSqlProvider.class, method="deleteBySpec")
    int deleteBySpec(TCtUnfinishSpec spec);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @Delete({
        "delete from OP.T_CT_UNFINISH",
        "where ERROR_NO = #{errorNo,jdbcType=VARCHAR}",
          "and CREATE_DATE = #{createDate,jdbcType=DECIMAL}",
          "and CREATE_TIME = #{createTime,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(TCtUnfinishKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @Insert({
        "insert into OP.T_CT_UNFINISH (ERROR_NO, CREATE_DATE, ",
        "CREATE_TIME, SEND_DATE, ",
        "SEND_TIME, ERROR_CD, ",
        "ORG_CD, BRANCH_CD, ",
        "MAC_NO, SITE_CD, SEND_STATUS, ",
        "SEND_YN, ERROR_STATUS, ",
        "UPDATE_DATE, DELAY_SEND_YN, ",
        "SEND_TOOL, RECV_USER_UID, ",
        "RECV_TELE_NO, TRANS_DATE, ",
        "ORG_MSG_NO, ORG_MSG)",
        "values (#{errorNo,jdbcType=VARCHAR}, #{createDate,jdbcType=DECIMAL}, ",
        "#{createTime,jdbcType=VARCHAR}, #{sendDate,jdbcType=VARCHAR}, ",
        "#{sendTime,jdbcType=VARCHAR}, #{errorCd,jdbcType=VARCHAR}, ",
        "#{orgCd,jdbcType=VARCHAR}, #{branchCd,jdbcType=VARCHAR}, ",
        "#{macNo,jdbcType=VARCHAR}, #{siteCd,jdbcType=VARCHAR}, #{sendStatus,jdbcType=CHAR}, ",
        "#{sendYn,jdbcType=CHAR}, #{errorStatus,jdbcType=VARCHAR}, ",
        "#{updateDate,jdbcType=TIMESTAMP}, #{delaySendYn,jdbcType=VARCHAR}, ",
        "#{sendTool,jdbcType=VARCHAR}, #{recvUserUid,jdbcType=VARCHAR}, ",
        "#{recvTeleNo,jdbcType=VARCHAR}, #{transDate,jdbcType=VARCHAR}, ",
        "#{orgMsgNo,jdbcType=VARCHAR}, #{orgMsg,jdbcType=VARCHAR})"
    })
    int insert(TCtUnfinish record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @InsertProvider(type=TCtUnfinishSqlProvider.class, method="insertSelective")
    int insertSelective(TCtUnfinish record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @SelectProvider(type=TCtUnfinishSqlProvider.class, method="selectBySpec")
    @Results({
        @Result(column="ERROR_NO", property="errorNo", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="CREATE_DATE", property="createDate", jdbcType=JdbcType.DECIMAL, id=true),
        @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="SEND_DATE", property="sendDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_TIME", property="sendTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="ERROR_CD", property="errorCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_CD", property="orgCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="BRANCH_CD", property="branchCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="MAC_NO", property="macNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="SITE_CD", property="siteCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_STATUS", property="sendStatus", jdbcType=JdbcType.CHAR),
        @Result(column="SEND_YN", property="sendYn", jdbcType=JdbcType.CHAR),
        @Result(column="ERROR_STATUS", property="errorStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="UPDATE_DATE", property="updateDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="DELAY_SEND_YN", property="delaySendYn", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_TOOL", property="sendTool", jdbcType=JdbcType.VARCHAR),
        @Result(column="RECV_USER_UID", property="recvUserUid", jdbcType=JdbcType.VARCHAR),
        @Result(column="RECV_TELE_NO", property="recvTeleNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="TRANS_DATE", property="transDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_MSG_NO", property="orgMsgNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_MSG", property="orgMsg", jdbcType=JdbcType.VARCHAR)
    })
    List<TCtUnfinish> selectBySpec(TCtUnfinishSpec spec);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @Select({
        "select",
        "ERROR_NO, CREATE_DATE, CREATE_TIME, SEND_DATE, SEND_TIME, ERROR_CD, ORG_CD, ",
        "BRANCH_CD, MAC_NO, SITE_CD, SEND_STATUS, SEND_YN, ERROR_STATUS, UPDATE_DATE, ",
        "DELAY_SEND_YN, SEND_TOOL, RECV_USER_UID, RECV_TELE_NO, TRANS_DATE, ORG_MSG_NO, ",
        "ORG_MSG",
        "from OP.T_CT_UNFINISH",
        "where ERROR_NO = #{errorNo,jdbcType=VARCHAR}",
          "and CREATE_DATE = #{createDate,jdbcType=DECIMAL}",
          "and CREATE_TIME = #{createTime,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="ERROR_NO", property="errorNo", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="CREATE_DATE", property="createDate", jdbcType=JdbcType.DECIMAL, id=true),
        @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="SEND_DATE", property="sendDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_TIME", property="sendTime", jdbcType=JdbcType.VARCHAR),
        @Result(column="ERROR_CD", property="errorCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_CD", property="orgCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="BRANCH_CD", property="branchCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="MAC_NO", property="macNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="SITE_CD", property="siteCd", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_STATUS", property="sendStatus", jdbcType=JdbcType.CHAR),
        @Result(column="SEND_YN", property="sendYn", jdbcType=JdbcType.CHAR),
        @Result(column="ERROR_STATUS", property="errorStatus", jdbcType=JdbcType.VARCHAR),
        @Result(column="UPDATE_DATE", property="updateDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="DELAY_SEND_YN", property="delaySendYn", jdbcType=JdbcType.VARCHAR),
        @Result(column="SEND_TOOL", property="sendTool", jdbcType=JdbcType.VARCHAR),
        @Result(column="RECV_USER_UID", property="recvUserUid", jdbcType=JdbcType.VARCHAR),
        @Result(column="RECV_TELE_NO", property="recvTeleNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="TRANS_DATE", property="transDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_MSG_NO", property="orgMsgNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="ORG_MSG", property="orgMsg", jdbcType=JdbcType.VARCHAR)
    })
    TCtUnfinish selectByPrimaryKey(TCtUnfinishKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @UpdateProvider(type=TCtUnfinishSqlProvider.class, method="updateBySpecSelective")
    int updateBySpecSelective(@Param("record") TCtUnfinish record, @Param("spec") TCtUnfinishSpec spec);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @UpdateProvider(type=TCtUnfinishSqlProvider.class, method="updateBySpec")
    int updateBySpec(@Param("record") TCtUnfinish record, @Param("spec") TCtUnfinishSpec spec);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @UpdateProvider(type=TCtUnfinishSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TCtUnfinish record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_UNFINISH
     *
     * @mbggenerated Tue Jul 01 09:59:32 KST 2014
     */
    @Update({
        "update OP.T_CT_UNFINISH",
        "set SEND_DATE = #{sendDate,jdbcType=VARCHAR},",
          "SEND_TIME = #{sendTime,jdbcType=VARCHAR},",
          "ERROR_CD = #{errorCd,jdbcType=VARCHAR},",
          "ORG_CD = #{orgCd,jdbcType=VARCHAR},",
          "BRANCH_CD = #{branchCd,jdbcType=VARCHAR},",
          "MAC_NO = #{macNo,jdbcType=VARCHAR},",
          "SITE_CD = #{siteCd,jdbcType=VARCHAR},",
          "SEND_STATUS = #{sendStatus,jdbcType=CHAR},",
          "SEND_YN = #{sendYn,jdbcType=CHAR},",
          "ERROR_STATUS = #{errorStatus,jdbcType=VARCHAR},",
          "UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},",
          "DELAY_SEND_YN = #{delaySendYn,jdbcType=VARCHAR},",
          "SEND_TOOL = #{sendTool,jdbcType=VARCHAR},",
          "RECV_USER_UID = #{recvUserUid,jdbcType=VARCHAR},",
          "RECV_TELE_NO = #{recvTeleNo,jdbcType=VARCHAR},",
          "TRANS_DATE = #{transDate,jdbcType=VARCHAR},",
          "ORG_MSG_NO = #{orgMsgNo,jdbcType=VARCHAR},",
          "ORG_MSG = #{orgMsg,jdbcType=VARCHAR}",
        "where ERROR_NO = #{errorNo,jdbcType=VARCHAR}",
          "and CREATE_DATE = #{createDate,jdbcType=DECIMAL}",
          "and CREATE_TIME = #{createTime,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(TCtUnfinish record);
    
    /**
     * CommonPack GetDupErrorMng 메소드에서 장애출동 취소가 아닐경우 호출 됨
     *
     * @author KDJ on Tue Jul 01 09:59:32 KST 2014
     */
    @Select({
        "SELECT  ERROR_NO, ORG_MSG",
        "FROM    OP.T_CT_UNFINISH",
        "WHERE   ORG_CD      = #{orgCd, jdbcType=VARCHAR}",
        "AND     BRANCH_CD   = OP.F_GET_NICE_BRANCH_CD(#{orgCd, jdbcType=VARCHAR}, #{branchCd, jdbcType=VARCHAR}, '', #{macNo, jdbcType=VARCHAR})",
        "AND     MAC_NO      = #{macNo, jdbcType=VARCHAR}",
        "AND     ERROR_CD    = #{errorCd, jdbcType=VARCHAR}",
        "AND     CREATE_DATE > TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )",
        "AND     TRANS_DATE  = RTRIM(#{transDate, jdbcType=VARCHAR})",
        "AND     RTRIM(ORG_MSG_NO)   = RTRIM(#{orgMsgNo, jdbcType=VARCHAR})"
    })
    @Results({
        @Result(column="ERROR_NO", property="errorNo", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="ORG_MSG", property="orgMsg", jdbcType=JdbcType.VARCHAR)
    })
    TCtUnfinish selectByCond1(TCtErrorBasic record);
    
    
    /**
     * CommonPack GetDupErrorMng 메소드에서 장애출동 취소일 경우 호출 됨
     *            ErrorCd 가 조건에 없다. 
     *
     * @author KDJ on Tue Jul 01 09:59:32 KST 2014
     */
    @Select({
        "SELECT  ERROR_NO, ORG_MSG",
        "FROM    OP.T_CT_UNFINISH",
        "WHERE   ORG_CD      = #{orgCd, jdbcType=VARCHAR}",
        "AND     BRANCH_CD   = OP.F_GET_NICE_BRANCH_CD(#{orgCd, jdbcType=VARCHAR}, #{branchCd, jdbcType=VARCHAR}, '', #{macNo, jdbcType=VARCHAR})",
        "AND     MAC_NO      = #{macNo, jdbcType=VARCHAR}",
        "AND     CREATE_DATE > TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )",
        "AND     TRANS_DATE  = RTRIM(#{transDate, jdbcType=VARCHAR})",
        "AND     RTRIM(ORG_MSG_NO)   = RTRIM(#{orgMsgNo, jdbcType=VARCHAR})"
    })
    @Results({
        @Result(column="ERROR_NO", property="errorNo", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="ORG_MSG", property="orgMsg", jdbcType=JdbcType.VARCHAR)
    })
    TCtUnfinish selectByCond2(TCtErrorBasic record);
    
    
    /**
     * CommonPack InsertCheckErrorMng 메소드에서  호출 됨
     *
     * @author KDJ on Tue Jul 01 09:59:32 KST 2014
     */
    @Select({
        "SELECT  ERROR_NO",
        "FROM    OP.T_CT_UNFINISH",
        "WHERE   ORG_CD      = #{orgCd, jdbcType=VARCHAR}",
        "AND     BRANCH_CD   = OP.F_GET_NICE_BRANCH_CD(#{orgCd, jdbcType=VARCHAR}, #{branchCd, jdbcType=VARCHAR}, '', #{macNo, jdbcType=VARCHAR})",
        "AND     MAC_NO      = #{macNo, jdbcType=VARCHAR}",
        "AND     ERROR_CD    = #{errorCd, jdbcType=VARCHAR}",
        "AND     CREATE_DATE > TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )"
    })
    @Results({
        @Result(column="ERROR_NO", property="errorNo", jdbcType=JdbcType.VARCHAR, id=true)
    })
    TCtUnfinish selectByCond3(TCtErrorBasic record);
    
    /**
     * CommonPack.getCurrentErrorState 메소드에서 호출 됨 (나이스)
     *
     * @author KDJ 
     */
    @Select({
        "SELECT  DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI101', 1, 0)), 0), 0, '0', '1')||               ",     
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI110', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI111', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI112', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI113', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI114', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI120', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI121', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI122', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI123', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI124', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI125', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI126', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI128', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI129', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI131', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI133', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI134', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI135', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI136', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI137', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI138', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI139', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI140', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI141', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI142', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI143', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI144', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI902', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI903', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI904', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI905', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI906', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI907', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI908', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI909', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI911', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI912', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI913', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI914', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI915', 1, 0)), 0), 0, '0', '1')||               ",
        "        DECODE(NVL(SUM(DECODE(ERROR_CD, 'NI102', 1, 0)), 0), 0, '0', '1') AS ERROR_STATES ",
        "FROM    OP.T_CT_UNFINISH                                                                  ",
        "WHERE   CREATE_DATE >= TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )                                ",
        "AND     ORG_CD = #{orgCd, jdbcType=VARCHAR}                                               ",
        "AND     BRANCH_CD = #{branchCd, jdbcType=VARCHAR}                                         ",
        "AND     MAC_NO = #{macNo, jdbcType=VARCHAR}                                               ",
        "AND     ERROR_CD LIKE 'NI%'                                                               "
    })
    @Results({
        @Result(column="ERROR_STATES", property="errorStates", jdbcType=JdbcType.VARCHAR)
    })
    ErrorState selectByCond4(ErrorState cond);
    
    /**
     * CommonPack.getCurrentErrorState 메소드에서 호출 됨 (정산기)
     *
     * @author KDJ 
     */
    @Select({
        "SELECT DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE102', 1, 0)), 0), 0, '0', '1')||  /* 전표 부족 예보           02 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE115', 1, 0)), 0), 0, '0', '1')||  /* 지폐입금부 묶음띠 부족 예보  15 */             ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE124', 1, 0)), 0), 0, '0', '1')||  /* 10만원권 부족 예보       24 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE123', 1, 0)), 0), 0, '0', '1')||  /* 5만원권  부족 예보       23 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE100', 1, 0)), 0), 0, '0', '1')||  /* 1만원권  부족 예보       00 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE117', 1, 0)), 0), 0, '0', '1')||  /* 5천원권  부족 예보       17 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE118', 1, 0)), 0), 0, '0', '1')||  /* 1천원권  부족 예보       18 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE119', 1, 0)), 0), 0, '0', '1')||  /* 500원권  부족 예보       19 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE120', 1, 0)), 0), 0, '0', '1')||  /* 100원권  부족 예보       20 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE121', 1, 0)), 0), 0, '0', '1')||  /* 50원권   부족 예보       21 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE122', 1, 0)), 0), 0, '0', '1')||  /* 10원권   부족 예보       22 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE104', 1, 0)), 0), 0, '0', '1')||  /* 수표 입금함 참 예보      04 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE148', 1, 0)), 0), 0, '0', '1')||  /* 봉투 입금함 참 예보      48 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE126', 1, 0)), 0), 0, '0', '1')||  /* 십만원권 입금함 참 예보  26 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE125', 1, 0)), 0), 0, '0', '1')||  /* 오만원권 입금함 참 예보  25 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE103', 1, 0)), 0), 0, '0', '1')||  /* 1만원 입금함 참 예보     03 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE142', 1, 0)), 0), 0, '0', '1')||  /* 5천원권 입금함 참 예보   42 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE143', 1, 0)), 0), 0, '0', '1')||  /* 1천원권 입금함 참 예보   43 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE144', 1, 0)), 0), 0, '0', '1')||  /* 5백원권 입금함 참 예보   44 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE145', 1, 0)), 0), 0, '0', '1')||  /* 1백원권 입금함 참 예보   45 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE146', 1, 0)), 0), 0, '0', '1')||  /* 5십원권 입금함 참 예보   46 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE147', 1, 0)), 0), 0, '0', '1')||  /* 1십원권 입금함 참 예보   47 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE211', 1, 0)), 0), 0, '0', '1')||  /* 회선 장애                11 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE202', 1, 0)), 0), 0, '0', '1')||  /* 전표 부족                02 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE215', 1, 0)), 0), 0, '0', '1')||  /* 지폐입금부 묶음띠 부족   15 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE224', 1, 0)), 0), 0, '0', '1')||  /* 10만원권 부족            24 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE223', 1, 0)), 0), 0, '0', '1')||  /* 5만원권  부족            23 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE200', 1, 0)), 0), 0, '0', '1')||  /* 1만원권  부족            00 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE217', 1, 0)), 0), 0, '0', '1')||  /* 5천원권  부족            17 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE218', 1, 0)), 0), 0, '0', '1')||  /* 1천원권  부족            18 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE219', 1, 0)), 0), 0, '0', '1')||  /* 500원권  부족            19 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE220', 1, 0)), 0), 0, '0', '1')||  /* 100원권  부족            20 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE221', 1, 0)), 0), 0, '0', '1')||  /* 50원권   부족            21 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE222', 1, 0)), 0), 0, '0', '1')||  /* 10원권   부족            22 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE204', 1, 0)), 0), 0, '0', '1')||  /* 수표 입금함 참           04 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE248', 1, 0)), 0), 0, '0', '1')||  /* 봉투 입금함 참           48 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE226', 1, 0)), 0), 0, '0', '1')||  /* 십만원권 입금함 참       26 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE225', 1, 0)), 0), 0, '0', '1')||  /* 오만원권 입금함 참       25 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE203', 1, 0)), 0), 0, '0', '1')||  /* 1만원 입금함 참          03 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE242', 1, 0)), 0), 0, '0', '1')||  /* 5천원권 입금함 참        42 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE243', 1, 0)), 0), 0, '0', '1')||  /* 1천원권 입금함 참        43 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE244', 1, 0)), 0), 0, '0', '1')||  /* 5백원권 입금함 참        44 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE245', 1, 0)), 0), 0, '0', '1')||  /* 1백원권 입금함 참        45 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE246', 1, 0)), 0), 0, '0', '1')||  /* 5십원권 입금함 참        46 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE247', 1, 0)), 0), 0, '0', '1')||  /* 1십원권 입금함 참        47 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE262', 1, 0)), 0), 0, '0', '1')||  /* 명세표걸림               62 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE263', 1, 0)), 0), 0, '0', '1')||  /* 입금동전잔류             63 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE264', 1, 0)), 0), 0, '0', '1')||  /* 출금지폐잔류             64 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE265', 1, 0)), 0), 0, '0', '1')||  /* 출금동전잔류             65 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE253', 1, 0)), 0), 0, '0', '1')||  /* 수표입금부상태           53 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE252', 1, 0)), 0), 0, '0', '1')||  /* 지폐입금부상태           52 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE232', 1, 0)), 0), 0, '0', '1')||  /* 동전입금부상태           32 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE233', 1, 0)), 0), 0, '0', '1')||  /* 명세표부상태             33 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE234', 1, 0)), 0), 0, '0', '1')||  /* 봉투입금부 상태          34 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE250', 1, 0)), 0), 0, '0', '1')||  /* 현금출금부가동상태       50 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE235', 1, 0)), 0), 0, '0', '1')||  /* 통전출금부 상태          35 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE236', 1, 0)), 0), 0, '0', '1')||  /* 카메라부 상태            36 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE237', 1, 0)), 0), 0, '0', '1')||  /* 핀패드 상태              37 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE238', 1, 0)), 0), 0, '0', '1')||  /* FCD보드 상태             38 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE239', 1, 0)), 0), 0, '0', '1')||  /* 낱장입금부 상태          39 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE270', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부상태A        70 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE271', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부상태B        71 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE272', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부상태C        72 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE273', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부상태D        73 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE275', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부A 부족       75 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE276', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부B 부족       76 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE277', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부C 부족       77 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE278', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부D 부족       78 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE175', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부A 예보       75 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE176', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부B 예보       76 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE177', 1, 0)), 0), 0, '0', '1')||  /* 상품권출금부C 예보       77 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE178', 1, 0)), 0), 0, '0', '1')    /* 상품권출금부D 예보       78 */ AS ERROR_STATES ",
        "FROM   OP.T_CT_UNFINISH                                                                                                       ",
        "WHERE  CREATE_DATE >= TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )                                                                     ",
        "AND    ORG_CD = #{orgCd, jdbcType=VARCHAR}                                                                                    ",
        "AND    BRANCH_CD = #{branchCd, jdbcType=VARCHAR}                                                                              ",
        "AND    MAC_NO = #{macNo, jdbcType=VARCHAR}                                                                                    ",
        "AND    ERROR_CD LIKE 'NE%'                                                                                                    "
   })
    @Results({
        @Result(column="ERROR_STATES", property="errorStates", jdbcType=JdbcType.VARCHAR)
    })
    ErrorState selectByCond5(ErrorState cond);
    
    /**
     * CommonPack.getCurrentErrorState 메소드에서 호출 됨 (삼성생명)
     *
     * @author KDJ 
     */
    @Select({
        "SELECT /*+ index_desc (t_ct_error_mng ix_t_ct_error_mng_04)  */                                                           ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE100', 1, 0)),0), 0, '0', '1')|| /* 만원 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE101', 1, 0)),0), 0, '0', '1')|| /* 수표 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE102', 1, 0)),0), 0, '0', '1')|| /* 전표 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE103', 1, 0)),0), 0, '0', '1')|| /* 현금 입금함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE104', 1, 0)),0), 0, '0', '1')|| /* 수표 입금함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE105', 1, 0)),0), 0, '0', '1')|| /* 지폐 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE106', 1, 0)),0), 0, '0', '1')|| /* 통장 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE107', 1, 0)),0), 0, '0', '1')|| /* 카드 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE108', 1, 0)),0), 0, '0', '1')|| /* 전표 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE109', 1, 0)),0), 0, '0', '1')|| /* 저널 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE110', 1, 0)),0), 0, '0', '1')|| /* 송수신 장애 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE111', 1, 0)),0), 0, '0', '1')|| /* 회선 장애 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE112', 1, 0)),0), 0, '0', '1')|| /* 전원 OFF 장애 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE113', 1, 0)),0), 0, '0', '1')|| /* 저널부족예보              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE115', 1, 0)),0), 0, '0', '1')|| /* 지폐입금부묶음띠부족 예보 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE116', 1, 0)),0), 0, '0', '1')|| /* 동전입금함참 예보         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE117', 1, 0)),0), 0, '0', '1')|| /* 오천원 부족  예보         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE118', 1, 0)),0), 0, '0', '1')|| /* 천원 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE119', 1, 0)),0), 0, '0', '1')|| /* 오백원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE120', 1, 0)),0), 0, '0', '1')|| /* 백원권 부족 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE121', 1, 0)),0), 0, '0', '1')|| /* 오십원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE122', 1, 0)),0), 0, '0', '1')|| /* 십원권 부족 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE123', 1, 0)),0), 0, '0', '1')|| /* 오만원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE124', 1, 0)),0), 0, '0', '1')|| /* 십만원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE125', 1, 0)),0), 0, '0', '1')|| /* 오만원권 입금함참 예보    */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE126', 1, 0)),0), 0, '0', '1')|| /* 십만원권 입금함참 예보    */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE200', 1, 0)),0), 0, '0', '1')|| /* 만원 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE201', 1, 0)),0), 0, '0', '1')|| /* 수표 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE202', 1, 0)),0), 0, '0', '1')|| /* 전표 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE203', 1, 0)),0), 0, '0', '1')|| /* 현금 입금함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE204', 1, 0)),0), 0, '0', '1')|| /* 수표 입금함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE205', 1, 0)),0), 0, '0', '1')|| /* 지폐 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE206', 1, 0)),0), 0, '0', '1')|| /* 통장 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE207', 1, 0)),0), 0, '0', '1')|| /* 카드 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE208', 1, 0)),0), 0, '0', '1')|| /* 전표 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE209', 1, 0)),0), 0, '0', '1')|| /* 저널 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE210', 1, 0)),0), 0, '0', '1')|| /* 송수신 장애               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE211', 1, 0)),0), 0, '0', '1')|| /* 회선 장애                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE212', 1, 0)),0), 0, '0', '1')|| /* 전원 OFF 장애             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE213', 1, 0)),0), 0, '0', '1')|| /* 저널부족                  */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE214', 1, 0)),0), 0, '0', '1')|| /* 입금부미가동              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE215', 1, 0)),0), 0, '0', '1')|| /* 지폐입금부묶음띠부족      */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE216', 1, 0)),0), 0, '0', '1')|| /* 동전입금함참              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE217', 1, 0)),0), 0, '0', '1')|| /* 오천원 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE218', 1, 0)),0), 0, '0', '1')|| /* 천원 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE219', 1, 0)),0), 0, '0', '1')|| /* 오백원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE220', 1, 0)),0), 0, '0', '1')|| /* 백원권 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE221', 1, 0)),0), 0, '0', '1')|| /* 오십원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE222', 1, 0)),0), 0, '0', '1')|| /* 십원권 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE223', 1, 0)),0), 0, '0', '1')|| /* 오만원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE224', 1, 0)),0), 0, '0', '1')|| /* 십만원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE225', 1, 0)),0), 0, '0', '1')|| /* 오만원권 입금함참         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE226', 1, 0)),0), 0, '0', '1')|| /* 십만원권 입금함참         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE250', 1, 0)),0), 0, '0', '1')|| /* 현금출금부가동상태        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE251', 1, 0)),0), 0, '0', '1')|| /* 수표출금부가동            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE252', 1, 0)),0), 0, '0', '1')|| /* 현금입금부 가동상태       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE253', 1, 0)),0), 0, '0', '1')|| /* 수표입금부 가동상태       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE254', 1, 0)),0), 0, '0', '1')|| /* 통장정리부 가동상태       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE255', 1, 0)),0), 0, '0', '1')|| /* 기기다운                  */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE256', 1, 0)),0), 0, '0', '1')|| /* 회수함상태                */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE257', 1, 0)),0), 0, '0', '1')|| /* A4프린터상태              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE258', 1, 0)),0), 0, '0', '1')|| /* 본체문상태                */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE259', 1, 0)),0), 0, '0', '1')|| /* 자동기에이전트상태        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE260', 1, 0)),0), 0, '0', '1')|| /* 호스트세션상태            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE261', 1, 0)),0), 0, '0', '1')|| /* 자동기세션상태            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE230', 1, 0)),0), 0, '0', '1')|| /* 수표입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE231', 1, 0)),0), 0, '0', '1')|| /* 지폐입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE232', 1, 0)),0), 0, '0', '1')|| /* 동전입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE233', 1, 0)),0), 0, '0', '1')|| /* 명세표부장애              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE240', 1, 0)),0), 0, '0', '1')|| /* 정산기 슈퍼바이저장애     */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE241', 1, 0)),0), 0, '0', '1')   /* 정산기 금고침투 장애      */ AS ERROR_STATES ",
        "FROM   OP.T_CT_UNFINISH                                                                                                   ",
        "WHERE  CREATE_DATE >= TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )                                                                 ",
        "AND    ORG_CD = #{orgCd, jdbcType=VARCHAR}                                                                                ",
        "AND    BRANCH_CD = OP.F_GET_NICE_BRANCH_CD( RTRIM(#{orgCd, jdbcType=VARCHAR}), RTRIM(#{branchCd, jdbcType=VARCHAR}), '', RTRIM(#{macNo, jdbcType=VARCHAR}) )",
        "AND    MAC_NO = #{macNo, jdbcType=VARCHAR}                                                                                ",
        "AND    ERROR_CD LIKE 'NE%'                                                                                                "
    })
    @Results({
        @Result(column="ERROR_STATES", property="errorStates", jdbcType=JdbcType.VARCHAR)
    })
    ErrorState selectByCond6(ErrorState cond);
    
    /**
     * CommonPack.getCurrentErrorState 메소드에서 호출 됨
     *
     * @author KDJ 
     */
    @Select({
        "SELECT DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE100', 1, 0)), 0), 0, '0', '1')|| /* 만원 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE101', 1, 0)), 0), 0, '0', '1')|| /* 수표 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE102', 1, 0)), 0), 0, '0', '1')|| /* 전표 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE103', 1, 0)), 0), 0, '0', '1')|| /* 현금 입금함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE104', 1, 0)), 0), 0, '0', '1')|| /* 수표 입금함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE105', 1, 0)), 0), 0, '0', '1')|| /* 지폐 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE106', 1, 0)), 0), 0, '0', '1')|| /* 통장 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE107', 1, 0)), 0), 0, '0', '1')|| /* 카드 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE108', 1, 0)), 0), 0, '0', '1')|| /* 전표 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE109', 1, 0)), 0), 0, '0', '1')|| /* 저널 회수함 참 예보       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE110', 1, 0)), 0), 0, '0', '1')|| /* 송수신 장애 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE111', 1, 0)), 0), 0, '0', '1')|| /* 회선 장애 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE112', 1, 0)), 0), 0, '0', '1')|| /* 전원 OFF 장애 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE113', 1, 0)), 0), 0, '0', '1')|| /* 저널부족예보              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE115', 1, 0)), 0), 0, '0', '1')|| /* 지폐입금부묶음띠부족 예보 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE116', 1, 0)), 0), 0, '0', '1')|| /* 동전입금함참 예보         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE117', 1, 0)), 0), 0, '0', '1')|| /* 오천원 부족  예보         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE118', 1, 0)), 0), 0, '0', '1')|| /* 천원 부족 예보            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE119', 1, 0)), 0), 0, '0', '1')|| /* 오백원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE120', 1, 0)), 0), 0, '0', '1')|| /* 백원권 부족 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE121', 1, 0)), 0), 0, '0', '1')|| /* 오십원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE122', 1, 0)), 0), 0, '0', '1')|| /* 십원권 부족 예보          */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE123', 1, 0)), 0), 0, '0', '1')|| /* 오만원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE124', 1, 0)), 0), 0, '0', '1')|| /* 십만원권 부족 예보        */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE125', 1, 0)), 0), 0, '0', '1')|| /* 오만원권 입금함참 예보    */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE126', 1, 0)), 0), 0, '0', '1')|| /* 십만원권 입금함참 예보    */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE200', 1, 0)), 0), 0, '0', '1')|| /* 만원 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE201', 1, 0)), 0), 0, '0', '1')|| /* 수표 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE202', 1, 0)), 0), 0, '0', '1')|| /* 전표 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE203', 1, 0)), 0), 0, '0', '1')|| /* 현금 입금함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE204', 1, 0)), 0), 0, '0', '1')|| /* 수표 입금함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE205', 1, 0)), 0), 0, '0', '1')|| /* 지폐 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE206', 1, 0)), 0), 0, '0', '1')|| /* 통장 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE207', 1, 0)), 0), 0, '0', '1')|| /* 카드 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE208', 1, 0)), 0), 0, '0', '1')|| /* 전표 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE209', 1, 0)), 0), 0, '0', '1')|| /* 저널 회수함 참            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE210', 1, 0)), 0), 0, '0', '1')|| /* 송수신 장애               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE211', 1, 0)), 0), 0, '0', '1')|| /* 회선 장애                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE212', 1, 0)), 0), 0, '0', '1')|| /* 전원 OFF 장애             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE213', 1, 0)), 0), 0, '0', '1')|| /* 저널부족                  */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE214', 1, 0)), 0), 0, '0', '1')|| /* 입금부미가동              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE215', 1, 0)), 0), 0, '0', '1')|| /* 지폐입금부묶음띠부족      */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE216', 1, 0)), 0), 0, '0', '1')|| /* 동전입금함참              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE217', 1, 0)), 0), 0, '0', '1')|| /* 오천원 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE218', 1, 0)), 0), 0, '0', '1')|| /* 천원 부족                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE219', 1, 0)), 0), 0, '0', '1')|| /* 오백원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE220', 1, 0)), 0), 0, '0', '1')|| /* 백원권 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE221', 1, 0)), 0), 0, '0', '1')|| /* 오십원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE222', 1, 0)), 0), 0, '0', '1')|| /* 십원권 부족               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE223', 1, 0)), 0), 0, '0', '1')|| /* 오만원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE224', 1, 0)), 0), 0, '0', '1')|| /* 십만원권 부족             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE225', 1, 0)), 0), 0, '0', '1')|| /* 오만원권 입금함참         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE226', 1, 0)), 0), 0, '0', '1')|| /* 십만원권 입금함참         */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE250', 1, 0)), 0), 0, '0', '1')|| /*  현금출금부가동상태       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE251', 1, 0)), 0), 0, '0', '1')|| /*  수표출금부가동           */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE252', 1, 0)), 0), 0, '0', '1')|| /*  현금입금부 가동상태      */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE253', 1, 0)), 0), 0, '0', '1')|| /*  수표입금부 가동상태      */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE254', 1, 0)), 0), 0, '0', '1')|| /*  통장정리부 가동상태      */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE255', 1, 0)), 0), 0, '0', '1')|| /*  기기다운                 */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE256', 1, 0)), 0), 0, '0', '1')|| /*  회수함상태               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE257', 1, 0)), 0), 0, '0', '1')|| /*  A4프린터상태             */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE258', 1, 0)), 0), 0, '0', '1')|| /*  본체문상태               */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE259', 1, 0)), 0), 0, '0', '1')|| /*  자동기에이전트상태       */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE260', 1, 0)), 0), 0, '0', '1')|| /*  호스트세션상태           */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE261', 1, 0)), 0), 0, '0', '1')|| /*  자동기세션상태           */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE230', 1, 0)), 0), 0, '0', '1')|| /* 수표입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE231', 1, 0)), 0), 0, '0', '1')|| /* 지폐입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE232', 1, 0)), 0), 0, '0', '1')|| /* 동전입금부장애            */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE233', 1, 0)), 0), 0, '0', '1')|| /* 명세표부장애              */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE240', 1, 0)), 0), 0, '0', '1')|| /* 정산기 슈퍼바이저장애     */                 ",
        "       DECODE(NVL(SUM(DECODE(ERROR_CD, 'NE241', 1, 0)), 0), 0, '0', '1')   /* 정산기 금고침투 장애      */ AS ERROR_STATES ",
        "FROM   OP.T_CT_UNFINISH                                                                                                    ",
        "WHERE  CREATE_DATE >= TO_CHAR( SYSDATE - 10, 'YYYYMMDD' )                                                                  ",
        "AND    ORG_CD = #{orgCd, jdbcType=VARCHAR}                                                                                 ",
        "AND    BRANCH_CD = #{branchCd, jdbcType=VARCHAR}                                                                           ",
        "AND    MAC_NO = #{macNo, jdbcType=VARCHAR}                                                                                 ",
        "AND    ERROR_CD LIKE 'NE%'                                                                                                 "
    })
    @Results({
        @Result(column="ERROR_STATES", property="errorStates", jdbcType=JdbcType.VARCHAR)
    })
    ErrorState selectByCond7(ErrorState cond);
}