package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TCmNiceEnvCheck;
import com.nicetcm.nibsplus.broker.msg.model.TCmNiceEnvCheckSpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TCmNiceEnvCheckSpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TCmNiceEnvCheckSpec;
import java.util.List;
import java.util.Map;

public class TCmNiceEnvCheckSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String countBySpec(TCmNiceEnvCheckSpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_CM_NICE_ENV_CHECK");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String deleteBySpec(TCmNiceEnvCheckSpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_CM_NICE_ENV_CHECK");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String insertSelective(TCmNiceEnvCheck record) {
        BEGIN();
        INSERT_INTO("OP.T_CM_NICE_ENV_CHECK");
        
        if (record.getCheckDate() != null) {
            VALUES("CHECK_DATE", "#{checkDate,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            VALUES("ORG_CD", "#{orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            VALUES("BRANCH_CD", "#{branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNo() != null) {
            VALUES("MAC_NO", "#{macNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCheckTime() != null) {
            VALUES("CHECK_TIME", "#{checkTime,jdbcType=VARCHAR}");
        }
        
        if (record.getBoothTopFront() != null) {
            VALUES("BOOTH_TOP_FRONT", "#{boothTopFront,jdbcType=VARCHAR}");
        }
        
        if (record.getBoothTopBack() != null) {
            VALUES("BOOTH_TOP_BACK", "#{boothTopBack,jdbcType=VARCHAR}");
        }
        
        if (record.getFrontBoard() != null) {
            VALUES("FRONT_BOARD", "#{frontBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getLeftBoard() != null) {
            VALUES("LEFT_BOARD", "#{leftBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getRightBoard() != null) {
            VALUES("RIGHT_BOARD", "#{rightBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getBackBoard() != null) {
            VALUES("BACK_BOARD", "#{backBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getCleanInout() != null) {
            VALUES("CLEAN_INOUT", "#{cleanInout,jdbcType=VARCHAR}");
        }
        
        if (record.getDoorState() != null) {
            VALUES("DOOR_STATE", "#{doorState,jdbcType=VARCHAR}");
        }
        
        if (record.getLightInsideState() != null) {
            VALUES("LIGHT_INSIDE_STATE", "#{lightInsideState,jdbcType=VARCHAR}");
        }
        
        if (record.getAedState() != null) {
            VALUES("AED_STATE", "#{aedState,jdbcType=VARCHAR}");
        }
        
        if (record.getAirconState() != null) {
            VALUES("AIRCON_STATE", "#{airconState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmWaitingState() != null) {
            VALUES("ATM_WAITING_STATE", "#{atmWaitingState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmBroken() != null) {
            VALUES("ATM_BROKEN", "#{atmBroken,jdbcType=VARCHAR}");
        }
        
        if (record.getInterphoneState() != null) {
            VALUES("INTERPHONE_STATE", "#{interphoneState,jdbcType=VARCHAR}");
        }
        
        if (record.getExecComp() != null) {
            VALUES("EXEC_COMP", "#{execComp,jdbcType=VARCHAR}");
        }
        
        if (record.getExecutant() != null) {
            VALUES("EXECUTANT", "#{executant,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgSendYn() != null) {
            VALUES("ORG_SEND_YN", "#{orgSendYn,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            VALUES("UPDATE_DATE", "#{updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            VALUES("UPDATE_UID", "#{updateUid,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String selectBySpec(TCmNiceEnvCheckSpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("CHECK_DATE");
        } else {
            SELECT("CHECK_DATE");
        }
        SELECT("ORG_CD");
        SELECT("BRANCH_CD");
        SELECT("MAC_NO");
        SELECT("CHECK_TIME");
        SELECT("BOOTH_TOP_FRONT");
        SELECT("BOOTH_TOP_BACK");
        SELECT("FRONT_BOARD");
        SELECT("LEFT_BOARD");
        SELECT("RIGHT_BOARD");
        SELECT("BACK_BOARD");
        SELECT("CLEAN_INOUT");
        SELECT("DOOR_STATE");
        SELECT("LIGHT_INSIDE_STATE");
        SELECT("AED_STATE");
        SELECT("AIRCON_STATE");
        SELECT("ATM_WAITING_STATE");
        SELECT("ATM_BROKEN");
        SELECT("INTERPHONE_STATE");
        SELECT("EXEC_COMP");
        SELECT("EXECUTANT");
        SELECT("ORG_SEND_YN");
        SELECT("UPDATE_DATE");
        SELECT("UPDATE_UID");
        FROM("OP.T_CM_NICE_ENV_CHECK");
        applyWhere(spec, false);
        
        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TCmNiceEnvCheck record = (TCmNiceEnvCheck) parameter.get("record");
        TCmNiceEnvCheckSpec spec = (TCmNiceEnvCheckSpec) parameter.get("spec");
        
        BEGIN();
        UPDATE("OP.T_CM_NICE_ENV_CHECK");
        
        if (record.getCheckDate() != null) {
            SET("CHECK_DATE = #{record.checkDate,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNo() != null) {
            SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        }
        
        if (record.getCheckTime() != null) {
            SET("CHECK_TIME = #{record.checkTime,jdbcType=VARCHAR}");
        }
        
        if (record.getBoothTopFront() != null) {
            SET("BOOTH_TOP_FRONT = #{record.boothTopFront,jdbcType=VARCHAR}");
        }
        
        if (record.getBoothTopBack() != null) {
            SET("BOOTH_TOP_BACK = #{record.boothTopBack,jdbcType=VARCHAR}");
        }
        
        if (record.getFrontBoard() != null) {
            SET("FRONT_BOARD = #{record.frontBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getLeftBoard() != null) {
            SET("LEFT_BOARD = #{record.leftBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getRightBoard() != null) {
            SET("RIGHT_BOARD = #{record.rightBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getBackBoard() != null) {
            SET("BACK_BOARD = #{record.backBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getCleanInout() != null) {
            SET("CLEAN_INOUT = #{record.cleanInout,jdbcType=VARCHAR}");
        }
        
        if (record.getDoorState() != null) {
            SET("DOOR_STATE = #{record.doorState,jdbcType=VARCHAR}");
        }
        
        if (record.getLightInsideState() != null) {
            SET("LIGHT_INSIDE_STATE = #{record.lightInsideState,jdbcType=VARCHAR}");
        }
        
        if (record.getAedState() != null) {
            SET("AED_STATE = #{record.aedState,jdbcType=VARCHAR}");
        }
        
        if (record.getAirconState() != null) {
            SET("AIRCON_STATE = #{record.airconState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmWaitingState() != null) {
            SET("ATM_WAITING_STATE = #{record.atmWaitingState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmBroken() != null) {
            SET("ATM_BROKEN = #{record.atmBroken,jdbcType=VARCHAR}");
        }
        
        if (record.getInterphoneState() != null) {
            SET("INTERPHONE_STATE = #{record.interphoneState,jdbcType=VARCHAR}");
        }
        
        if (record.getExecComp() != null) {
            SET("EXEC_COMP = #{record.execComp,jdbcType=VARCHAR}");
        }
        
        if (record.getExecutant() != null) {
            SET("EXECUTANT = #{record.executant,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgSendYn() != null) {
            SET("ORG_SEND_YN = #{record.orgSendYn,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        }
        
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_CM_NICE_ENV_CHECK");
        
        SET("CHECK_DATE = #{record.checkDate,jdbcType=VARCHAR}");
        SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        SET("CHECK_TIME = #{record.checkTime,jdbcType=VARCHAR}");
        SET("BOOTH_TOP_FRONT = #{record.boothTopFront,jdbcType=VARCHAR}");
        SET("BOOTH_TOP_BACK = #{record.boothTopBack,jdbcType=VARCHAR}");
        SET("FRONT_BOARD = #{record.frontBoard,jdbcType=VARCHAR}");
        SET("LEFT_BOARD = #{record.leftBoard,jdbcType=VARCHAR}");
        SET("RIGHT_BOARD = #{record.rightBoard,jdbcType=VARCHAR}");
        SET("BACK_BOARD = #{record.backBoard,jdbcType=VARCHAR}");
        SET("CLEAN_INOUT = #{record.cleanInout,jdbcType=VARCHAR}");
        SET("DOOR_STATE = #{record.doorState,jdbcType=VARCHAR}");
        SET("LIGHT_INSIDE_STATE = #{record.lightInsideState,jdbcType=VARCHAR}");
        SET("AED_STATE = #{record.aedState,jdbcType=VARCHAR}");
        SET("AIRCON_STATE = #{record.airconState,jdbcType=VARCHAR}");
        SET("ATM_WAITING_STATE = #{record.atmWaitingState,jdbcType=VARCHAR}");
        SET("ATM_BROKEN = #{record.atmBroken,jdbcType=VARCHAR}");
        SET("INTERPHONE_STATE = #{record.interphoneState,jdbcType=VARCHAR}");
        SET("EXEC_COMP = #{record.execComp,jdbcType=VARCHAR}");
        SET("EXECUTANT = #{record.executant,jdbcType=VARCHAR}");
        SET("ORG_SEND_YN = #{record.orgSendYn,jdbcType=VARCHAR}");
        SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        
        TCmNiceEnvCheckSpec spec = (TCmNiceEnvCheckSpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    public String updateByPrimaryKeySelective(TCmNiceEnvCheck record) {
        BEGIN();
        UPDATE("OP.T_CM_NICE_ENV_CHECK");
        
        if (record.getBoothTopFront() != null) {
            SET("BOOTH_TOP_FRONT = #{boothTopFront,jdbcType=VARCHAR}");
        }
        
        if (record.getBoothTopBack() != null) {
            SET("BOOTH_TOP_BACK = #{boothTopBack,jdbcType=VARCHAR}");
        }
        
        if (record.getFrontBoard() != null) {
            SET("FRONT_BOARD = #{frontBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getLeftBoard() != null) {
            SET("LEFT_BOARD = #{leftBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getRightBoard() != null) {
            SET("RIGHT_BOARD = #{rightBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getBackBoard() != null) {
            SET("BACK_BOARD = #{backBoard,jdbcType=VARCHAR}");
        }
        
        if (record.getCleanInout() != null) {
            SET("CLEAN_INOUT = #{cleanInout,jdbcType=VARCHAR}");
        }
        
        if (record.getDoorState() != null) {
            SET("DOOR_STATE = #{doorState,jdbcType=VARCHAR}");
        }
        
        if (record.getLightInsideState() != null) {
            SET("LIGHT_INSIDE_STATE = #{lightInsideState,jdbcType=VARCHAR}");
        }
        
        if (record.getAedState() != null) {
            SET("AED_STATE = #{aedState,jdbcType=VARCHAR}");
        }
        
        if (record.getAirconState() != null) {
            SET("AIRCON_STATE = #{airconState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmWaitingState() != null) {
            SET("ATM_WAITING_STATE = #{atmWaitingState,jdbcType=VARCHAR}");
        }
        
        if (record.getAtmBroken() != null) {
            SET("ATM_BROKEN = #{atmBroken,jdbcType=VARCHAR}");
        }
        
        if (record.getInterphoneState() != null) {
            SET("INTERPHONE_STATE = #{interphoneState,jdbcType=VARCHAR}");
        }
        
        if (record.getExecComp() != null) {
            SET("EXEC_COMP = #{execComp,jdbcType=VARCHAR}");
        }
        
        if (record.getExecutant() != null) {
            SET("EXECUTANT = #{executant,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgSendYn() != null) {
            SET("ORG_SEND_YN = #{orgSendYn,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{updateUid,jdbcType=VARCHAR}");
        }
        
        WHERE("CHECK_DATE = #{checkDate,jdbcType=VARCHAR}");
        WHERE("ORG_CD = #{orgCd,jdbcType=VARCHAR}");
        WHERE("BRANCH_CD = #{branchCd,jdbcType=VARCHAR}");
        WHERE("MAC_NO = #{macNo,jdbcType=VARCHAR}");
        WHERE("CHECK_TIME = #{checkTime,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CM_NICE_ENV_CHECK
     *
     * @mbggenerated Thu Jul 31 14:31:01 KST 2014
     */
    protected void applyWhere(TCmNiceEnvCheckSpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}