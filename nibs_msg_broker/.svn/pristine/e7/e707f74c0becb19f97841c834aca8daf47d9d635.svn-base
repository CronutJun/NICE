package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TFnCarry;
import com.nicetcm.nibsplus.broker.msg.model.TFnCarrySpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TFnCarrySpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TFnCarrySpec;
import java.util.List;
import java.util.Map;

public class TFnCarrySqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String countBySpec(TFnCarrySpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_FN_CARRY");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String deleteBySpec(TFnCarrySpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_FN_CARRY");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String insertSelective(TFnCarry record) {
        BEGIN();
        INSERT_INTO("OP.T_FN_CARRY");
        
        if (record.getCarryDate() != null) {
            VALUES("CARRY_DATE", "#{carryDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCarryGroupCd() != null) {
            VALUES("CARRY_GROUP_CD", "#{carryGroupCd,jdbcType=VARCHAR}");
        }
        
        if (record.getCarryOrgCd() != null) {
            VALUES("CARRY_ORG_CD", "#{carryOrgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getCashAmt() != null) {
            VALUES("CASH_AMT", "#{cashAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheckAmt() != null) {
            VALUES("CHECK_AMT", "#{checkAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getInsertUid() != null) {
            VALUES("INSERT_UID", "#{insertUid,jdbcType=VARCHAR}");
        }
        
        if (record.getInsertDate() != null) {
            VALUES("INSERT_DATE", "#{insertDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            VALUES("UPDATE_UID", "#{updateUid,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            VALUES("UPDATE_DATE", "#{updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getInsAmt() != null) {
            VALUES("INS_AMT", "#{insAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getOutsAmt() != null) {
            VALUES("OUTS_AMT", "#{outsAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash13Amt() != null) {
            VALUES("CASH_13_AMT", "#{cash13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck13Amt() != null) {
            VALUES("CHECK_13_AMT", "#{check13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1Amt() != null) {
            VALUES("CASH1_AMT", "#{cash1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck1Amt() != null) {
            VALUES("CHECK1_AMT", "#{check1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash2Amt() != null) {
            VALUES("CASH2_AMT", "#{cash2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck2Amt() != null) {
            VALUES("CHECK2_AMT", "#{check2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash3Amt() != null) {
            VALUES("CASH3_AMT", "#{cash3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck3Amt() != null) {
            VALUES("CHECK3_AMT", "#{check3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash4Amt() != null) {
            VALUES("CASH4_AMT", "#{cash4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck4Amt() != null) {
            VALUES("CHECK4_AMT", "#{check4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5Amt() != null) {
            VALUES("CASH5_AMT", "#{cash5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck5Amt() != null) {
            VALUES("CHECK5_AMT", "#{check5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash50000Amt() != null) {
            VALUES("CASH_50000_AMT", "#{cash50000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash10000Amt() != null) {
            VALUES("CASH_10000_AMT", "#{cash10000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5000Amt() != null) {
            VALUES("CASH_5000_AMT", "#{cash5000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1000Amt() != null) {
            VALUES("CASH_1000_AMT", "#{cash1000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getOperConfirm() != null) {
            VALUES("OPER_CONFIRM", "#{operConfirm,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String selectBySpec(TFnCarrySpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("CARRY_DATE");
        } else {
            SELECT("CARRY_DATE");
        }
        SELECT("CARRY_GROUP_CD");
        SELECT("CARRY_ORG_CD");
        SELECT("CASH_AMT");
        SELECT("CHECK_AMT");
        SELECT("INSERT_UID");
        SELECT("INSERT_DATE");
        SELECT("UPDATE_UID");
        SELECT("UPDATE_DATE");
        SELECT("INS_AMT");
        SELECT("OUTS_AMT");
        SELECT("CASH_13_AMT");
        SELECT("CHECK_13_AMT");
        SELECT("CASH1_AMT");
        SELECT("CHECK1_AMT");
        SELECT("CASH2_AMT");
        SELECT("CHECK2_AMT");
        SELECT("CASH3_AMT");
        SELECT("CHECK3_AMT");
        SELECT("CASH4_AMT");
        SELECT("CHECK4_AMT");
        SELECT("CASH5_AMT");
        SELECT("CHECK5_AMT");
        SELECT("CASH_50000_AMT");
        SELECT("CASH_10000_AMT");
        SELECT("CASH_5000_AMT");
        SELECT("CASH_1000_AMT");
        SELECT("OPER_CONFIRM");
        FROM("OP.T_FN_CARRY");
        applyWhere(spec, false);
        
        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TFnCarry record = (TFnCarry) parameter.get("record");
        TFnCarrySpec spec = (TFnCarrySpec) parameter.get("spec");
        
        BEGIN();
        UPDATE("OP.T_FN_CARRY");
        
        if (record.getCarryDate() != null) {
            SET("CARRY_DATE = #{record.carryDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCarryGroupCd() != null) {
            SET("CARRY_GROUP_CD = #{record.carryGroupCd,jdbcType=VARCHAR}");
        }
        
        if (record.getCarryOrgCd() != null) {
            SET("CARRY_ORG_CD = #{record.carryOrgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getCashAmt() != null) {
            SET("CASH_AMT = #{record.cashAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheckAmt() != null) {
            SET("CHECK_AMT = #{record.checkAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getInsertUid() != null) {
            SET("INSERT_UID = #{record.insertUid,jdbcType=VARCHAR}");
        }
        
        if (record.getInsertDate() != null) {
            SET("INSERT_DATE = #{record.insertDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getInsAmt() != null) {
            SET("INS_AMT = #{record.insAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getOutsAmt() != null) {
            SET("OUTS_AMT = #{record.outsAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash13Amt() != null) {
            SET("CASH_13_AMT = #{record.cash13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck13Amt() != null) {
            SET("CHECK_13_AMT = #{record.check13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1Amt() != null) {
            SET("CASH1_AMT = #{record.cash1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck1Amt() != null) {
            SET("CHECK1_AMT = #{record.check1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash2Amt() != null) {
            SET("CASH2_AMT = #{record.cash2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck2Amt() != null) {
            SET("CHECK2_AMT = #{record.check2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash3Amt() != null) {
            SET("CASH3_AMT = #{record.cash3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck3Amt() != null) {
            SET("CHECK3_AMT = #{record.check3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash4Amt() != null) {
            SET("CASH4_AMT = #{record.cash4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck4Amt() != null) {
            SET("CHECK4_AMT = #{record.check4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5Amt() != null) {
            SET("CASH5_AMT = #{record.cash5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck5Amt() != null) {
            SET("CHECK5_AMT = #{record.check5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash50000Amt() != null) {
            SET("CASH_50000_AMT = #{record.cash50000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash10000Amt() != null) {
            SET("CASH_10000_AMT = #{record.cash10000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5000Amt() != null) {
            SET("CASH_5000_AMT = #{record.cash5000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1000Amt() != null) {
            SET("CASH_1000_AMT = #{record.cash1000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getOperConfirm() != null) {
            SET("OPER_CONFIRM = #{record.operConfirm,jdbcType=VARCHAR}");
        }
        
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_FN_CARRY");
        
        SET("CARRY_DATE = #{record.carryDate,jdbcType=VARCHAR}");
        SET("CARRY_GROUP_CD = #{record.carryGroupCd,jdbcType=VARCHAR}");
        SET("CARRY_ORG_CD = #{record.carryOrgCd,jdbcType=VARCHAR}");
        SET("CASH_AMT = #{record.cashAmt,jdbcType=DECIMAL}");
        SET("CHECK_AMT = #{record.checkAmt,jdbcType=DECIMAL}");
        SET("INSERT_UID = #{record.insertUid,jdbcType=VARCHAR}");
        SET("INSERT_DATE = #{record.insertDate,jdbcType=TIMESTAMP}");
        SET("UPDATE_UID = #{record.updateUid,jdbcType=VARCHAR}");
        SET("UPDATE_DATE = #{record.updateDate,jdbcType=TIMESTAMP}");
        SET("INS_AMT = #{record.insAmt,jdbcType=DECIMAL}");
        SET("OUTS_AMT = #{record.outsAmt,jdbcType=DECIMAL}");
        SET("CASH_13_AMT = #{record.cash13Amt,jdbcType=DECIMAL}");
        SET("CHECK_13_AMT = #{record.check13Amt,jdbcType=DECIMAL}");
        SET("CASH1_AMT = #{record.cash1Amt,jdbcType=DECIMAL}");
        SET("CHECK1_AMT = #{record.check1Amt,jdbcType=DECIMAL}");
        SET("CASH2_AMT = #{record.cash2Amt,jdbcType=DECIMAL}");
        SET("CHECK2_AMT = #{record.check2Amt,jdbcType=DECIMAL}");
        SET("CASH3_AMT = #{record.cash3Amt,jdbcType=DECIMAL}");
        SET("CHECK3_AMT = #{record.check3Amt,jdbcType=DECIMAL}");
        SET("CASH4_AMT = #{record.cash4Amt,jdbcType=DECIMAL}");
        SET("CHECK4_AMT = #{record.check4Amt,jdbcType=DECIMAL}");
        SET("CASH5_AMT = #{record.cash5Amt,jdbcType=DECIMAL}");
        SET("CHECK5_AMT = #{record.check5Amt,jdbcType=DECIMAL}");
        SET("CASH_50000_AMT = #{record.cash50000Amt,jdbcType=DECIMAL}");
        SET("CASH_10000_AMT = #{record.cash10000Amt,jdbcType=DECIMAL}");
        SET("CASH_5000_AMT = #{record.cash5000Amt,jdbcType=DECIMAL}");
        SET("CASH_1000_AMT = #{record.cash1000Amt,jdbcType=DECIMAL}");
        SET("OPER_CONFIRM = #{record.operConfirm,jdbcType=VARCHAR}");
        
        TFnCarrySpec spec = (TFnCarrySpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    public String updateByPrimaryKeySelective(TFnCarry record) {
        BEGIN();
        UPDATE("OP.T_FN_CARRY");
        
        if (record.getCashAmt() != null) {
            SET("CASH_AMT = #{cashAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheckAmt() != null) {
            SET("CHECK_AMT = #{checkAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getInsertUid() != null) {
            SET("INSERT_UID = #{insertUid,jdbcType=VARCHAR}");
        }
        
        if (record.getInsertDate() != null) {
            SET("INSERT_DATE = #{insertDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateUid() != null) {
            SET("UPDATE_UID = #{updateUid,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateDate() != null) {
            SET("UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getInsAmt() != null) {
            SET("INS_AMT = #{insAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getOutsAmt() != null) {
            SET("OUTS_AMT = #{outsAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash13Amt() != null) {
            SET("CASH_13_AMT = #{cash13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck13Amt() != null) {
            SET("CHECK_13_AMT = #{check13Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1Amt() != null) {
            SET("CASH1_AMT = #{cash1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck1Amt() != null) {
            SET("CHECK1_AMT = #{check1Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash2Amt() != null) {
            SET("CASH2_AMT = #{cash2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck2Amt() != null) {
            SET("CHECK2_AMT = #{check2Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash3Amt() != null) {
            SET("CASH3_AMT = #{cash3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck3Amt() != null) {
            SET("CHECK3_AMT = #{check3Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash4Amt() != null) {
            SET("CASH4_AMT = #{cash4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck4Amt() != null) {
            SET("CHECK4_AMT = #{check4Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5Amt() != null) {
            SET("CASH5_AMT = #{cash5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCheck5Amt() != null) {
            SET("CHECK5_AMT = #{check5Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash50000Amt() != null) {
            SET("CASH_50000_AMT = #{cash50000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash10000Amt() != null) {
            SET("CASH_10000_AMT = #{cash10000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash5000Amt() != null) {
            SET("CASH_5000_AMT = #{cash5000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getCash1000Amt() != null) {
            SET("CASH_1000_AMT = #{cash1000Amt,jdbcType=DECIMAL}");
        }
        
        if (record.getOperConfirm() != null) {
            SET("OPER_CONFIRM = #{operConfirm,jdbcType=VARCHAR}");
        }
        
        WHERE("CARRY_DATE = #{carryDate,jdbcType=VARCHAR}");
        WHERE("CARRY_GROUP_CD = #{carryGroupCd,jdbcType=VARCHAR}");
        WHERE("CARRY_ORG_CD = #{carryOrgCd,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_CARRY
     *
     * @mbggenerated Tue Jul 22 11:13:55 KST 2014
     */
    protected void applyWhere(TFnCarrySpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}