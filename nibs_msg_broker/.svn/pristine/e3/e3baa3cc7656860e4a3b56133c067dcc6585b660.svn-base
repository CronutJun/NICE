package com.nicetcm.nibsplus.broker.msg;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.TransactionStatus;

import com.nicetcm.nibsplus.broker.common.MsgCommon;
import com.nicetcm.nibsplus.broker.common.MsgParser;
import com.nicetcm.nibsplus.broker.msg.mapper.StoredProcMapper;
import com.nicetcm.nibsplus.broker.msg.model.TMisc;
import com.nicetcm.nibsplus.broker.msg.rmi.MsgBrokerRMI;
import com.nicetcm.nibsplus.broker.msg.rmi.MsgBrokerTimeoutException;
import com.nicetcm.nibsplus.broker.msg.services.OutMsgHandler;

public class MsgBrokerRMIImpl implements MsgBrokerRMI {

    public static final ConcurrentMap<String, BlockingQueue<byte[]>> rmiSyncAns = new ConcurrentHashMap<String, BlockingQueue<byte[]>>();
    public static final ConcurrentMap<String, byte[]> rmiOrigMsg = new ConcurrentHashMap<String, byte[]>();

    private static final Logger logger = LoggerFactory.getLogger(MsgBrokerRMIImpl.class);

    public MsgBrokerRMIImpl() {
    }

    public byte[] callBrokerSync(byte[] msg, int timeout) throws Exception {

        Thread.currentThread().setName("main-" + Thread.currentThread().getId());

        byte[] respMsg = null;
        int defTimeout = Integer.parseInt(MsgCommon.msgProps.getProperty("rmi.response.timeout"));
        DataSourceTransactionManager msgTX;
        StoredProcMapper splMap;

        BlockingQueue<byte[]> waitQ = new LinkedBlockingQueue<byte[]>();
        MsgBrokerData msgThrdSafeData = new MsgBrokerData();
        logger.warn("RMI-IS-MSG [{}]", new String(msg) );

        msgThrdSafeData.setNoOutData( false );

        MsgBrokerLib.BufferAndQName ret = MsgBrokerLib.allocAndFindSchemaName(msg, "O", true);
        logger.warn("QNm = {}", ret.QNm);

        msgTX = (DataSourceTransactionManager)MsgBrokerSpringMain.sprCtx.getBean(DataSourceTransactionManager.class);
        splMap = (StoredProcMapper)MsgBrokerSpringMain.sprCtx.getBean(StoredProcMapper.class);

        MsgParser msgPsr = MsgParser.getInstance(ret.QNm).parseMessage(ret.buf);
        try {
            try {
                /**
                 * You have to set 'Q' to third of msg_type when you need to Inbound RMI call
                 */
                byte[] bMsgType = msgPsr.getBytes("CM.msg_type");
                if( bMsgType[2] == 'Q' ) {
                    bMsgType[2] = '0';
                    msgPsr.setBytes( "CM.msg_type", bMsgType );
                    MsgBrokerConsumer.putDataToCon( msgPsr, null );
                    respMsg = null;
                    return respMsg;
                }
                logger.warn("Getting trans_seq_no..");

                TransactionStatus txs = msgTX.getTransaction( MsgBrokerTransaction.defMSGTX );
                try {
                    TMisc misc = new TMisc();
                    misc.setOrgCd     ( msgPsr.getString("CM.org_cd")     );
                    misc.setCreateDate( msgPsr.getString("CM.trans_date") );
                    splMap.spCmTransSeqNo( misc );
                    msgTX.commit(txs);
                    msgPsr.setString("CM.trans_seq_no", misc.getTransSeqNo());
                }
                catch( Exception e ) {
                    msgTX.commit(txs);
                }
                logger.warn("trans_seq_no = {}", msgPsr.getString("CM.trans_seq_no"));

                if( msgPsr.getString("CM.trans_seq_no").length() == 0 )
                    throw new Exception("trans_seq_no is empty!!");

                try {
                    OutMsgHandler outLogging = (OutMsgHandler)MsgBrokerSpringMain.sprCtx.getBean("outIfLoging");
                    outLogging.outMsgHandle( msgThrdSafeData, msgPsr );
                }
                catch( Exception e ) {
                    logger.warn( "outbound message logging has error: {}", e.getMessage() );
                }

                /*
                 *  Find and invoke method of instance of biz
                 */
                try {
                    OutMsgHandler bizBranch = (OutMsgHandler)MsgBrokerSpringMain
                            .sprCtx.getBean("out" + msgPsr.getString("CM.msg_type") + msgPsr.getString("CM.work_type"));
                    bizBranch.outMsgHandle( msgThrdSafeData, msgPsr );
                }
                catch( Exception e ) {
                    if( e.getMessage().substring(0, 7).equals("No bean") )
                        logger.debug("There's no spring bean : {}", "out" + msgPsr.getString("CM.msg_type") + msgPsr.getString("CM.work_type"));
                    else
                        throw e;
                }

                if( !msgThrdSafeData.isNoOutData() ) {
                    rmiSyncAns.putIfAbsent(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")), waitQ);
                    rmiOrigMsg.putIfAbsent(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")), msg);
                    MsgBrokerManageRMIImpl.putRMIOrigMsgAvailability(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")), msg);
                    try {
                        MsgBrokerProducer.putDataToPrd(msgPsr);

                        /**
                         * TImeout 무시한다.
                        if( timeout > 0)
                            defTimeout = timeout;
                         */

                        respMsg = waitQ.poll(defTimeout, TimeUnit.SECONDS);
                        if( respMsg == null )
                            throw new MsgBrokerTimeoutException(String.format("Timeout [%d]", timeout));
                        logger.warn("Got Answer.[{}] [{}]", String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")), new String(respMsg));
                     }
                     catch (InterruptedException ie ) {
                         logger.debug("Interrupted..");
                     }
                     catch ( MsgBrokerTimeoutException re ) {
                         logger.debug("callBrokerSync Timeout error raised.. {}", re.getMessage());
                         throw re;
                     }
                }
                else {
                    if( msgThrdSafeData.getRespMsg() != null )
                        return msgThrdSafeData.getRespMsg();
                }
            }
            catch( Exception e ) {
                logger.error("Error raised. Message = {}", e.getMessage() );
                for( StackTraceElement se: e.getStackTrace() )
                    logger.error(se.toString());
                throw e;
            }
        }
        finally {
            MsgBrokerManageRMIImpl.removeRMIOrigMsgAvailability(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")));
            rmiOrigMsg.remove(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")));
            rmiSyncAns.remove(String.format("%s:%s", msgPsr.getString("CM.org_cd"), msgPsr.getString("CM.trans_seq_no")));
            msgPsr.clearMessage();
            logger.debug("remove element of rmiSyncAns");
        }
        return respMsg;
    }

    public void callBrokerAsync(byte[] msg) throws Exception {

        Thread.currentThread().setName("main-" + Thread.currentThread().getId());

        MsgBrokerData msgThrdSafeData = new MsgBrokerData();
        DataSourceTransactionManager msgTX;
        StoredProcMapper splMap;

        logger.warn("RMI-IA-MSG [{}]", new String(msg) );

        msgThrdSafeData.setNoOutData( false );

        MsgBrokerLib.BufferAndQName ret = MsgBrokerLib.allocAndFindSchemaName(msg, "O", true);
        logger.warn("QNm = {}", ret.QNm);

        msgTX = (DataSourceTransactionManager)MsgBrokerSpringMain.sprCtx.getBean(DataSourceTransactionManager.class);
        splMap = (StoredProcMapper)MsgBrokerSpringMain.sprCtx.getBean(StoredProcMapper.class);

        MsgParser msgPsr = MsgParser.getInstance(ret.QNm).parseMessage(ret.buf);
        try {
            try {
                /**
                 * You have to set 'Q' to third of msg_type when you need to Inbound RMI call
                 */
                byte[] bMsgType = msgPsr.getBytes("CM.msg_type");
                if( bMsgType[2] == 'Q' ) {
                    bMsgType[2] = '0';
                    msgPsr.setBytes( "CM.msg_type", bMsgType );
                    MsgBrokerConsumer.putDataToCon( msgPsr, null );
                    return;
                }
                TransactionStatus txs = msgTX.getTransaction( MsgBrokerTransaction.defMSGTX );
                try {
                    TMisc misc = new TMisc();
                    misc.setOrgCd     ( msgPsr.getString("CM.org_cd")     );
                    misc.setCreateDate( msgPsr.getString("CM.trans_date") );
                    splMap.spCmTransSeqNo( misc );
                    msgTX.commit(txs);
                    msgPsr.setString("CM.trans_seq_no", misc.getTransSeqNo());
                }
                catch( Exception e ) {
                    msgTX.commit(txs);
                }
                logger.debug("trans_seq_no = {}", msgPsr.getString("CM.trans_seq_no"));

                if( msgPsr.getString("CM.trans_seq_no").length() == 0 )
                    throw new Exception("trans_seq_no is empty!!");

                try {
                    OutMsgHandler outLogging = (OutMsgHandler)MsgBrokerSpringMain.sprCtx.getBean("outIfLoging");
                    outLogging.outMsgHandle( msgThrdSafeData, msgPsr );
                }
                catch( Exception e ) {
                    logger.warn( "outbound message logging has error: {}", e.getMessage() );
                }
                try {
                    /*
                     *  Find and invoke method of instance of biz
                     */
                    OutMsgHandler bizBranch = (OutMsgHandler)MsgBrokerSpringMain
                            .sprCtx.getBean("out" + msgPsr.getString("CM.msg_type") + msgPsr.getString("CM.work_type"));
                    bizBranch.outMsgHandle( msgThrdSafeData, msgPsr );
                }
                catch( Exception e ) {
                    logger.debug("There's no spring bean : {}", "out" + msgPsr.getString("CM.msg_type") + msgPsr.getString("CM.work_type"));
                }

                if( !msgThrdSafeData.isNoOutData() ) {
                    /**
                     * Important!!!! Stratus와 기관의 통신시 통신 버퍼의 크기 제한으로
                     * ActiveMQ put에 delay를 주는 꼼수를 추가한다. (NICE요청) 0.2초
                     */
                    Thread.sleep(200);
                    MsgBrokerProducer.putDataToPrd(msgPsr);
                }
            }
            catch( Exception e ) {
                logger.error("Error raised. Message = {}", e.getMessage() );
                for( StackTraceElement se: e.getStackTrace() )
                    logger.error(se.toString());
                throw e;
            }
        }
        finally {
            msgPsr.clearMessage();
        }
    }
}
