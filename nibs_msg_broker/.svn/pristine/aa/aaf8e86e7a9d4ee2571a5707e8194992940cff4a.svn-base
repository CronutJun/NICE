package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TCtError;
import com.nicetcm.nibsplus.broker.msg.model.TCtErrorSpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TCtErrorSpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TCtErrorSpec;
import java.util.List;
import java.util.Map;

public class TCtErrorSqlProvider {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String countBySpec(TCtErrorSpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_CT_ERROR");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String deleteBySpec(TCtErrorSpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_CT_ERROR");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String insertSelective(TCtError record) {
        BEGIN();
        INSERT_INTO("OP.T_CT_ERROR");
        if (record.getErrorCd() != null) {
            VALUES("ERROR_CD", "#{errorCd,jdbcType=VARCHAR}");
        }
        if (record.getOrgCd() != null) {
            VALUES("ORG_CD", "#{orgCd,jdbcType=VARCHAR}");
        }
        if (record.getErrorMsg() != null) {
            VALUES("ERROR_MSG", "#{errorMsg,jdbcType=VARCHAR}");
        }
        if (record.getErrorGrade() != null) {
            VALUES("ERROR_GRADE", "#{errorGrade,jdbcType=VARCHAR}");
        }
        if (record.getGroupErrorCd() != null) {
            VALUES("GROUP_ERROR_CD", "#{groupErrorCd,jdbcType=VARCHAR}");
        }
        if (record.getAutoSendYn() != null) {
            VALUES("AUTO_SEND_YN", "#{autoSendYn,jdbcType=CHAR}");
        }
        if (record.getWaitTime1() != null) {
            VALUES("WAIT_TIME1", "#{waitTime1,jdbcType=DECIMAL}");
        }
        if (record.getAddJob1Desc() != null) {
            VALUES("ADD_JOB1_DESC", "#{addJob1Desc,jdbcType=VARCHAR}");
        }
        if (record.getWaitTime2() != null) {
            VALUES("WAIT_TIME2", "#{waitTime2,jdbcType=DECIMAL}");
        }
        if (record.getErrorMotYn() != null) {
            VALUES("ERROR_MOT_YN", "#{errorMotYn,jdbcType=CHAR}");
        }
        if (record.getGuardYn() != null) {
            VALUES("GUARD_YN", "#{guardYn,jdbcType=CHAR}");
        }
        if (record.getAlarmMonYn() != null) {
            VALUES("ALARM_MON_YN", "#{alarmMonYn,jdbcType=VARCHAR}");
        }
        if (record.getRemoteYn() != null) {
            VALUES("REMOTE_YN", "#{remoteYn,jdbcType=VARCHAR}");
        }
        if (record.getRegDt() != null) {
            VALUES("REG_DT", "#{regDt,jdbcType=TIMESTAMP}");
        }
        if (record.getRegUid() != null) {
            VALUES("REG_UID", "#{regUid,jdbcType=VARCHAR}");
        }
        if (record.getEditDate() != null) {
            VALUES("EDIT_DATE", "#{editDate,jdbcType=TIMESTAMP}");
        }
        if (record.getEditUid() != null) {
            VALUES("EDIT_UID", "#{editUid,jdbcType=VARCHAR}");
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String selectBySpec(TCtErrorSpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("ERROR_CD");
        } else {
            SELECT("ERROR_CD");
        }
        SELECT("ORG_CD");
        SELECT("ERROR_MSG");
        SELECT("ERROR_GRADE");
        SELECT("GROUP_ERROR_CD");
        SELECT("AUTO_SEND_YN");
        SELECT("WAIT_TIME1");
        SELECT("ADD_JOB1_DESC");
        SELECT("WAIT_TIME2");
        SELECT("ERROR_MOT_YN");
        SELECT("GUARD_YN");
        SELECT("ALARM_MON_YN");
        SELECT("REMOTE_YN");
        SELECT("REG_DT");
        SELECT("REG_UID");
        SELECT("EDIT_DATE");
        SELECT("EDIT_UID");
        FROM("OP.T_CT_ERROR");
        applyWhere(spec, false);
        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TCtError record = (TCtError) parameter.get("record");
        TCtErrorSpec spec = (TCtErrorSpec) parameter.get("spec");
        BEGIN();
        UPDATE("OP.T_CT_ERROR");
        if (record.getErrorCd() != null) {
            SET("ERROR_CD = #{record.errorCd,jdbcType=VARCHAR}");
        }
        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        }
        if (record.getErrorMsg() != null) {
            SET("ERROR_MSG = #{record.errorMsg,jdbcType=VARCHAR}");
        }
        if (record.getErrorGrade() != null) {
            SET("ERROR_GRADE = #{record.errorGrade,jdbcType=VARCHAR}");
        }
        if (record.getGroupErrorCd() != null) {
            SET("GROUP_ERROR_CD = #{record.groupErrorCd,jdbcType=VARCHAR}");
        }
        if (record.getAutoSendYn() != null) {
            SET("AUTO_SEND_YN = #{record.autoSendYn,jdbcType=CHAR}");
        }
        if (record.getWaitTime1() != null) {
            SET("WAIT_TIME1 = #{record.waitTime1,jdbcType=DECIMAL}");
        }
        if (record.getAddJob1Desc() != null) {
            SET("ADD_JOB1_DESC = #{record.addJob1Desc,jdbcType=VARCHAR}");
        }
        if (record.getWaitTime2() != null) {
            SET("WAIT_TIME2 = #{record.waitTime2,jdbcType=DECIMAL}");
        }
        if (record.getErrorMotYn() != null) {
            SET("ERROR_MOT_YN = #{record.errorMotYn,jdbcType=CHAR}");
        }
        if (record.getGuardYn() != null) {
            SET("GUARD_YN = #{record.guardYn,jdbcType=CHAR}");
        }
        if (record.getAlarmMonYn() != null) {
            SET("ALARM_MON_YN = #{record.alarmMonYn,jdbcType=VARCHAR}");
        }
        if (record.getRemoteYn() != null) {
            SET("REMOTE_YN = #{record.remoteYn,jdbcType=VARCHAR}");
        }
        if (record.getRegDt() != null) {
            SET("REG_DT = #{record.regDt,jdbcType=TIMESTAMP}");
        }
        if (record.getRegUid() != null) {
            SET("REG_UID = #{record.regUid,jdbcType=VARCHAR}");
        }
        if (record.getEditDate() != null) {
            SET("EDIT_DATE = #{record.editDate,jdbcType=TIMESTAMP}");
        }
        if (record.getEditUid() != null) {
            SET("EDIT_UID = #{record.editUid,jdbcType=VARCHAR}");
        }
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_CT_ERROR");
        SET("ERROR_CD = #{record.errorCd,jdbcType=VARCHAR}");
        SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        SET("ERROR_MSG = #{record.errorMsg,jdbcType=VARCHAR}");
        SET("ERROR_GRADE = #{record.errorGrade,jdbcType=VARCHAR}");
        SET("GROUP_ERROR_CD = #{record.groupErrorCd,jdbcType=VARCHAR}");
        SET("AUTO_SEND_YN = #{record.autoSendYn,jdbcType=CHAR}");
        SET("WAIT_TIME1 = #{record.waitTime1,jdbcType=DECIMAL}");
        SET("ADD_JOB1_DESC = #{record.addJob1Desc,jdbcType=VARCHAR}");
        SET("WAIT_TIME2 = #{record.waitTime2,jdbcType=DECIMAL}");
        SET("ERROR_MOT_YN = #{record.errorMotYn,jdbcType=CHAR}");
        SET("GUARD_YN = #{record.guardYn,jdbcType=CHAR}");
        SET("ALARM_MON_YN = #{record.alarmMonYn,jdbcType=VARCHAR}");
        SET("REMOTE_YN = #{record.remoteYn,jdbcType=VARCHAR}");
        SET("REG_DT = #{record.regDt,jdbcType=TIMESTAMP}");
        SET("REG_UID = #{record.regUid,jdbcType=VARCHAR}");
        SET("EDIT_DATE = #{record.editDate,jdbcType=TIMESTAMP}");
        SET("EDIT_UID = #{record.editUid,jdbcType=VARCHAR}");
        TCtErrorSpec spec = (TCtErrorSpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    public String updateByPrimaryKeySelective(TCtError record) {
        BEGIN();
        UPDATE("OP.T_CT_ERROR");
        if (record.getErrorMsg() != null) {
            SET("ERROR_MSG = #{errorMsg,jdbcType=VARCHAR}");
        }
        if (record.getErrorGrade() != null) {
            SET("ERROR_GRADE = #{errorGrade,jdbcType=VARCHAR}");
        }
        if (record.getGroupErrorCd() != null) {
            SET("GROUP_ERROR_CD = #{groupErrorCd,jdbcType=VARCHAR}");
        }
        if (record.getAutoSendYn() != null) {
            SET("AUTO_SEND_YN = #{autoSendYn,jdbcType=CHAR}");
        }
        if (record.getWaitTime1() != null) {
            SET("WAIT_TIME1 = #{waitTime1,jdbcType=DECIMAL}");
        }
        if (record.getAddJob1Desc() != null) {
            SET("ADD_JOB1_DESC = #{addJob1Desc,jdbcType=VARCHAR}");
        }
        if (record.getWaitTime2() != null) {
            SET("WAIT_TIME2 = #{waitTime2,jdbcType=DECIMAL}");
        }
        if (record.getErrorMotYn() != null) {
            SET("ERROR_MOT_YN = #{errorMotYn,jdbcType=CHAR}");
        }
        if (record.getGuardYn() != null) {
            SET("GUARD_YN = #{guardYn,jdbcType=CHAR}");
        }
        if (record.getAlarmMonYn() != null) {
            SET("ALARM_MON_YN = #{alarmMonYn,jdbcType=VARCHAR}");
        }
        if (record.getRemoteYn() != null) {
            SET("REMOTE_YN = #{remoteYn,jdbcType=VARCHAR}");
        }
        if (record.getRegDt() != null) {
            SET("REG_DT = #{regDt,jdbcType=TIMESTAMP}");
        }
        if (record.getRegUid() != null) {
            SET("REG_UID = #{regUid,jdbcType=VARCHAR}");
        }
        if (record.getEditDate() != null) {
            SET("EDIT_DATE = #{editDate,jdbcType=TIMESTAMP}");
        }
        if (record.getEditUid() != null) {
            SET("EDIT_UID = #{editUid,jdbcType=VARCHAR}");
        }
        WHERE("ERROR_CD = #{errorCd,jdbcType=VARCHAR}");
        WHERE("ORG_CD = #{orgCd,jdbcType=VARCHAR}");
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table OP.T_CT_ERROR
     * @mbggenerated  Tue Jul 01 09:57:16 KST 2014
     */
    protected void applyWhere(TCtErrorSpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1,
                                    criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th,
                                    criterion.getCondition(), i, j,
                                    criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2,
                                    criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th,
                                    criterion.getCondition(), i, j,
                                    criterion.getTypeHandler(), i, j,
                                    criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j,
                                        k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}