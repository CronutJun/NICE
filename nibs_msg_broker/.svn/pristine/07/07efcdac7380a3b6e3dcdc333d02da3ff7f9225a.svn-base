/****************************************************************************/
/* 01. 프로그램명 		: {VPNFilemng.pc}		                           	*/
/* 02. 작  성  자       	: {방혜진}                                          	*/
/* 03. 작 성 일 자      	: {2006/08/14}                                      */
/* 04. 프로그램기능     	: {}												*/
/* 05. 입력FILE         	: 													*/
/* 06. 출력FILE         	:													*/ 
/* 07. 입력DATA HEADER  	: {}                                                */
/* 08. 출력DATA HEADER  	: {}                                                */
/* 09. 프로그램TYPE     	: {LIBRARY}                                         */
/* 10. LINK LIBRARY     : {}                                                */
/* 11. 작업주기         	: {0건/0일}                                         	*/
/* 12. TR-CODE          : {}                                                */
/* 13. 사용부서         	: {전산부}                                          	*/
/* 14. POWER SERVICE    : {0}                                               */
/* 15. REMARKS 사항     	: {}                                                */
/****************************************************************************/

/****************************************************************************/
/* SYSTEM HEADER 정의                                                       	*/
/****************************************************************************/
#include	<stdio.h>
#include	<string.h>
#include	<stdlib.h>
#include	<errno.h>
#include	<signal.h>
#include	<fcntl.h>
#include	<netdb.h>
#include	<math.h>
#include	<ftw.h>
#include	<sys/ioctl.h>
#include	<sys/types.h>
#include	<netinet/in.h>
#include	<arpa/inet.h>

/****************************************************************************/
/* 사용자 HEADER 정의                                                       */
/****************************************************************************/
#include    "../include/dberrno.h"
#include    "../include/commdef.h"

#define APP_NAME	"VPNFilemng"
#define	LOG_NAME	"vpnfilemng"

EXEC SQL INCLUDE SQLCA;

/****************************************************************************/
/* FUNCTION PROTO TYPE 정의                                                 */
/****************************************************************************/
int 	list( char * pName, struct stat * psuStatus, int nType );
void 	ReadFileProc( char * pFile );
int		UpdateVPNData( char *pMacNo, char *pIPAddr );
void    CleanUp(int Sig);

/****************************************************************************/
/* 사용자 외부변수 및 공용변수 정의                                         */
/****************************************************************************/
varchar huid[20];
varchar hpid[20];

short   logflg;							/* log function(logger) on/off flag */
int     logdev;							/* log function(logger) file desc.  */

pid_t	process_id = 0;

void main(int argc, char *argv[])
{
	long	lPrevDate;
	char	szPath[1024];
	
	if ( fnCheckApplState( APP_NAME ) < 0 )
	{
		printf( "[%s]Appl is already started ... Exit\n\n", APP_NAME );
		exit(0);
	}
	
	lPrevDate = GetCurDate();
	/* log 파일 형식 지정 LOG - text type HEX - hexa type */
	logflg = LOG;
	if ( fnCheckLogFile( LOG_NAME ) < 0 )
	{
		printf( ">>> [main] log file create fail\n");
		/* LogFile Error 이라도 작업 진행 */
	}
	/*- LOG FILE 처리 ------------------------------------------------------*/
	
	char	szDBUser[50];
	char	szDBPwd[50];
	char	szDBSID[50];
	char 	hDBConn[100];

	memset((char *)szDBUser	, 	(int)0x00, sizeof(szDBUser	));
	memset((char *)szDBPwd	, 	(int)0x00, sizeof(szDBPwd	));
	memset((char *)szDBSID	, 	(int)0x00, sizeof(szDBSID	));

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_USER=", szDBUser ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB USER Get Error \n" );
   		exit(0);
	}

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_PWD=", szDBPwd ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB PWD Get Error \n" );
   		exit(0);
	}

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_SID=", szDBSID ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB SID Get Error \n" );
   		exit(0);
	}
	
	memset( hDBConn, 0x00, sizeof( hDBConn ) );

	sprintf( hDBConn, "%s/%s@%s", szDBUser, szDBPwd, szDBSID );

	EXEC SQL CONNECT :hDBConn;
	
	if ( sqlca.sqlcode != DB_SUCCESS )
	{
		logger( "Connect Err: %.100s\n", SqlErrMsg );
		CleanUp(0);
	}	
   	
	
	memset((char *)szPath, 	(int)0x00, sizeof(szPath));
	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)VPN_FILE_PATH, szPath ) < 0 )
	{
		logger( "main : rd_cnfg_pram VPN_FILE_PATH Get Error = [%s]\n", szPath );
   		CleanUp(0);
	}
	
	
	ftw(szPath, list, 1);
	
	
	exit(0);
}

int list( char * pName, struct stat * psuStatus, int nType )
{
	/* if the stat call failed, just return */
	if( nType == FTW_NS )
	{
		return (0);		
	}
	
	/*
	 *	otherwise print object name,
	 *	permissions and "*" postfix
	 *	if object is a directory
	 */
	if( nType == FTW_F )
	{		
		/* printf( "%-30s\t0%3o\n", pName, psuStatus->st_mode&0777);*/
		if( !memcmp(&pName[strlen(pName) - 3], ".tb", 3 ) )		
		{
			ReadFileProc( pName );
		}
		
	}
	/*
	else
	{
		printf( "%-30s*\t0%3o\n", pName, psuStatus->st_mode&0777);		
	}
	*/
	
	return (0);
}

void ReadFileProc( char * pFile )
{
	FILE 	*fp;
	
	char 	szRead[1024];
	int		i;
	int		nCnt;
	int		nIndex;
	int		nColStart;	
	char 	szMacNo[12+1];
	char 	szIP[15+1];	
	
		
	memset( szRead, 0x00, sizeof(szRead) );

	if( (fp = fopen(pFile, "r")) == NULL ) return;
	
	char szTemp[512];

	while( fgets(szRead, sizeof(szRead), fp) != NULL )
	{
		nCnt = 0;
		nIndex = 0;
		nColStart = 1;

		for( i = 0; i < strlen(szRead); i++ )
		{
			if( nColStart == 1 )
			{
				nIndex = i;
				nColStart = 0;
			}
			
			if(szRead[i] == '\t')
			{	
				if( nCnt == 1 )
				{
					memset( szMacNo, 0x00, sizeof(szMacNo) );
					memcpy( szMacNo, &szRead[i - 4], 4 );
				}
				else if( nCnt == 7 )
				{
					memset( szIP, 0x00, sizeof(szIP) );
					memcpy( szIP, &szRead[nIndex], (i - nIndex) );					
					break;
				}
				
				nCnt ++;
				nColStart = 1;
			}
		}
		
		/*printf("MacNo = <%s>	,IPAddr = <%s> \n", szMacNo, szIP);*/
		UpdateVPNData( szMacNo, szIP );

		memset(szRead, 0x00, sizeof(szRead));
	}
	
	fclose(fp);
}


int	UpdateVPNData( char *pMacNo, char *pIPAddr )
{
EXEC SQL BEGIN DECLARE SECTION;
	char	hMAC_NO[12+1];
	char	hIP_ADDR[15+1];
	char 	hCompIP[15+1];	
EXEC SQL END DECLARE SECTION;

	int		nCnt = 0;
	int		i, j;

	memset( hMAC_NO,	0x00,	sizeof(hMAC_NO) );
	memset( hIP_ADDR,	0x00,	sizeof(hIP_ADDR) );
	
	strcpy( hMAC_NO, pMacNo );
	strcpy( hIP_ADDR, pIPAddr );

	EXEC SQL	UPDATE T_CT_NICE_MAC
				SET	   VPN_IP = :hIP_ADDR
				WHERE  ORG_CD = '096'
				AND	   JIJUM_CD = '9600'
				AND    MAC_NO = :hMAC_NO ;

	if ( sqlca.sqlcode )
	{
		logger( "[T_CT_NICE_MAC] Update Err!! MacNo[%s] VPN_IP[%s] [%.200s]\n", pMacNo, pIPAddr, SqlErrMsg );
		EXEC SQL ROLLBACK;
		return -1;
	}
	EXEC SQL COMMIT WORK;
	logger( "[T_CT_NICE_MAC] VPN Ip Update OK!! MacNo[%s] VPN_IP[%s] \n", pMacNo, pIPAddr );
	
	/* 20090904 금진선대리 요청 네트워크대역대별 VPN G/W IP 저장 추가 */
	memset( hCompIP,	0x00,	sizeof(hCompIP) );
	
	i = 0;
	nCnt = 0;
	for( i = 0; i < strlen(hIP_ADDR); i++ )
	{
		if( hIP_ADDR[i] == '.' && nCnt == 1 )
		{
			
			/*20111025 박태희대리 요청 10.29.1~3번은 89, 10.29.4~6은 84 로 세부 분기 하게 수정 */
			if( memcmp( hCompIP, "10.29", 5 ) == 0 )
			{
				hCompIP[i] = hIP_ADDR[i];
				for( j = i+1; j < strlen(hIP_ADDR); j++ )
				{
					if( hIP_ADDR[j] == '.' )
					{
						break;
					}
					else
					{
						hCompIP[j] = hIP_ADDR[j];
					}
				}
				break;
			}
			else
			{
				break;
			}
		}
		else
		{
			hCompIP[i] = hIP_ADDR[i];
			if( hIP_ADDR[i] == '.' )
			{
				nCnt++;
			}
		}
	}
	
	EXEC SQL UPDATE T_CM_ADSL_INFO SET VPN_GW = (SELECT CD_NM2 FROM T_CM_COMMON WHERE LARGE_CD = '4600' AND CD_NM1 = :hCompIP)
			 WHERE ORG_CD = '096' AND JIJUM_CD = '9600' AND MAC_NO = :hMAC_NO;
	

		if(sqlca.sqlcode == DB_NO_DATA)
		{
			logger("[UpdateVPNData] 해당데이터가 없습니다(정상처리). MAC_NO[%s], IP_ADDR[%s]\n",
							hMAC_NO, hIP_ADDR);
			return 0;
		}
		else if(sqlca.sqlcode)
		{
			logger(">>> [UpdateVPNData]Update Error(정상처리). MAC_NO[%s], IP_ADDR[%s]\n", hMAC_NO, hIP_ADDR);
			return 0;
		}
		EXEC SQL COMMIT WORK;
		logger( "[T_CM_ADSL_INFO] VPN G/W Update OK!! MacNo[%s] VPN_IP[%s] \n", pMacNo, pIPAddr );

	return 0;
}

/****************************************************************************/
/* 01. FUNCTION	ID      : {CleanUp}                                       */
/* 02. 작  성  자       	: {방혜진}                                          	*/
/* 03. 작 성 일 자      	: {2006/07/13}                                      */
/* 04. 프로그램기능     	: {해당 Sock Close, Log File Close, Program End}		*/
/* 05. 입력FILE         	: 													*/
/* 06. 출력FILE         	:													*/
/* 07. Return	값      	: {}												*/
/* 08. REMARKS 사항     	: {}                                               	*/
/****************************************************************************/
void    CleanUp(int Sig)
{
    logger("Clena Up Sig = %d\n\n", Sig);
    LogClose();
	sleep(1);
    exit(0);
}