--<ScriptOptions statementTerminator=";"/>

CREATE OR REPLACE PACKAGE OP.PKG_CM_FAXDETAIL AS

    --미완료 오류명세서 거래  FeedetailSForSh
	PROCEDURE sp_FeedetailSForSh (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--미완료 오류명세서 거래  FeedetailSForSh1
	PROCEDURE sp_FeedetailSForSh1 (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--운영자금 소요명세서  NiceOpAmtReqForHNB  -- 하나은행 브랜드
	PROCEDURE sp_NiceOpAmtReqForHNB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--미완료 오류명세서 거래  NotendForGH
	PROCEDURE sp_NotendForGH (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--미완료 오류명세서 거래  NotendForKB
	PROCEDURE sp_NotendForKB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --추가현송내역  PlusSendForKB
	PROCEDURE sp_PlusSendForKB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReq
	PROCEDURE sp_NiceOpAmtReq (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReqHana
	PROCEDURE sp_NiceOpAmtReqHana (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

--운영자금 소요명세서  NiceOpAmtReqForCN
	PROCEDURE sp_NiceOpAmtReqForCN (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);


    --운영자금 소요명세서  NiceOpAmtReqJJ
	PROCEDURE sp_NiceOpAmtReqJJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

--운영자금 소요명세서  NiceOpAmtReqLG
	PROCEDURE sp_NiceOpAmtReqLG (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

--운영자금 소요명세서  NiceOpAmtReqKJ
	PROCEDURE sp_NiceOpAmtReqKJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReqForSW
	PROCEDURE sp_NiceOpAmtReqForSW (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReqPost
	PROCEDURE sp_NiceOpAmtReqPost (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
    --운영자금 소요명세서  NiceOpAmtReqForSH
	PROCEDURE sp_NiceOpAmtReqForSH (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReqWoori
	PROCEDURE sp_NiceOpAmtReqWoori (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금 소요명세서  NiceOpAmtReqForNh
	PROCEDURE sp_NiceOpAmtReqForNh (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--운영자금 소요명세서  NiceOpAmtReqForBJ
	PROCEDURE sp_NiceOpAmtReqForBJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리현송계획표  PackCashTranPlanTable
	PROCEDURE sp_PackCashTranPlanTable (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금마감포  sp_PackOpAmtclosingTable
	PROCEDURE sp_PackOpAmtclosingTable (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForHana
	PROCEDURE sp_PackOpAmtNeedForHana (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForDJ
	PROCEDURE sp_PackOpAmtNeedForDJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForKEB
	PROCEDURE sp_PackOpAmtNeedForKEB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForHusun
	PROCEDURE sp_PackOpAmtNeedForHusun (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);


    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForPost
	PROCEDURE sp_PackOpAmtNeedForPost (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForKangju
	PROCEDURE sp_PackOpAmtNeedForKangju (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForKB
	PROCEDURE sp_PackOpAmtNeedForKB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForSG
	PROCEDURE sp_PackOpAmtNeedForSG (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);


    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForJJ
	PROCEDURE sp_PackOpAmtNeedForJJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForGG
	PROCEDURE sp_PackOpAmtNeedForGG (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForKn
	PROCEDURE sp_PackOpAmtNeedForKn (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리운영자금 소요명세서  sp_PackOpAmtNeedForSinHan
	PROCEDURE sp_PackOpAmtNeedForSinHan (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --현송계획산정근거  sp_PackOpAmtSendPlanForKB
	PROCEDURE sp_PackOpAmtSendPlanForKB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForHanmi
	PROCEDURE sp_PackOpAmtNeedForHanmi (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리 운영자금소요명세서  sp_PackOpAmtNeed
	PROCEDURE sp_PackOpAmtNeed (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
    --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableKn
	PROCEDURE sp_PackOpAmtclosingTableKn (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableForCHB
	PROCEDURE sp_PackOpAmtclosingTableForCHB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리 운영자금현송계획표  sp_PackCashTranPlanTableForCHB
	PROCEDURE sp_PackCashTranPlanTableForCHB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --나이스 실적통보서  sp_NiceActualResultReport
	PROCEDURE sp_NiceActualResultReport (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
    --일괄관리지사별시재내역  sp_AppOpInOutOfficeCenterForKn
	PROCEDURE sp_AppOpInOutOfficeCenterForKn (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
    /*
    --운영자금소요명세서  sp_NiceOpAmtReqForKB
	PROCEDURE sp_NiceOpAmtReqForKB (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
	*/
	    --운영자금소요명세서  sp_NiceOpAmtReqForKB1
	PROCEDURE sp_NiceOpAmtReqForKB1 (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄관리지사별시재내역  sp_PackAmtInSafeByOffice
	PROCEDURE sp_PackAmtInSafeByOffice (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --일괄현송계획표  sp_PackCashTransPlanTableForKn
	PROCEDURE sp_PackCashTransPlanTableForKn (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

    --운영자금소요명세서  sp_NiceOpAmtReqForHd
	PROCEDURE sp_NiceOpAmtReqForHd (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);


 --나이스 실적통보서  sp_NiceActualResultReportForHd
	PROCEDURE sp_NiceActualResultReportForHd (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --운영자금소요명세서  sp_NiceOpAmtReqForFI
	PROCEDURE sp_NiceOpAmtReqForFI (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);


 --나이스 실적통보서  sp_NiceActualResultReportForFI
	PROCEDURE sp_NiceActualResultReportForFI (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --나이스 운영자금 센터별 수령금액통보  sp_OrgOpAmtReportForSh
	PROCEDURE sp_OrgOpAmtReportForSh (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --나이스 실적통보서  NiceActualResultReportSC
	PROCEDURE sp_NiceActualResultReportSC (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

--나이스 실적통보서  NiceActualResultReportForFe
	PROCEDURE sp_NiceActualResultReportForFe (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --나이스 실적통보서  NiceActualResultReportForKE
	PROCEDURE sp_NiceActualResultReportForKE (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

--나이스 수수료통보서  NiceActualResultReportFeeNh
	PROCEDURE sp_NiceActualResultReportFeeNh (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --나이스 실적통보서  NiceActualResultReportDJ
	PROCEDURE sp_NiceActualResultReportDJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
     );
-- 삼성생명추가 20080612 정희성
	 --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForSL
	PROCEDURE sp_PackOpAmtNeedForSL (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
	--일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForKI
	PROCEDURE sp_PackOpAmtNeedForKI (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
     --일괄관리 운영자금현송계획표  sp_PackCashTranPlanTableForSL
	PROCEDURE sp_PackCashTranPlanTableForSL (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );
    --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableForSL
	PROCEDURE sp_PackOpAmtclosingTableForSL (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );
--삼성생명종료 20080612 정희성

-- 요넷추가 20090617 정희성
	 --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForYN
	PROCEDURE sp_PackOpAmtNeedForYN (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
     --일괄관리 운영자금현송계획표  sp_PackCashTranPlanTableForYN
	PROCEDURE sp_PackCashTranPlanTableForYN (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );
        --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableForYN
	PROCEDURE sp_PackOpAmtclosingTableForYN (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );
--요넷종료 20080612 정희성


--일괄관리 운영자금현송계획표  sp_PackCashTranPlanTableForGH
	PROCEDURE sp_PackCashTranPlanTableForGH (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );


-- 부산은행추가 20080728 정희성
	 --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForBS
	PROCEDURE sp_PackOpAmtNeedForBS (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
  --일괄관리지사별시재내역  sp_AppOpInOutOfficeCenterForBS
	PROCEDURE sp_AppOpInOutOfficeCenterForBS (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

	--일괄관리지사별시재내역  sp_AppOpInOutOfficeCenterForCT
	PROCEDURE sp_AppOpInOutOfficeCenterForCT (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL   ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

 --일괄관리현송계획표  PackCashTranPlanTableForBS
	PROCEDURE sp_PackCashTranPlanTableForBS (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);
   --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableBS
	PROCEDURE sp_PackOpAmtclosingTableBS (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );

    --일괄관리 운영자금마감표  sp_PackOpAmtclosingTableKJ
	PROCEDURE sp_PackOpAmtclosingTableKJ (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE  DEFAULT NULL ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );

    --일괄관리 24시재고현황  sp_MacStock24P
	PROCEDURE sp_MacStock24P (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );

    --일괄관리 17시재고현황  sp_MacStock17P(우체국)
	PROCEDURE sp_MacStock17P (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
    );

-- 우리신규양식 20110325 정희성
	 --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForWR
	PROCEDURE sp_PackOpAmtNeedForWR (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

-- 우체국토탈신규양식 20121207 정희성
	 --일괄관리 운영자금소요명세서  sp_PackOpAmtNeedForPostTo
	PROCEDURE sp_PackOpAmtNeedForPostTo (
	    pDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL  ,
	    pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
	    pbranchCd IN  OP.T_FN_SEND.branch_cd%TYPE,
      pFaxCd   IN      VARCHAR2,
      pPageNo  IN      NUMBER,
      pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
	);

END pkg_cm_faxDetail;

CREATE OR REPLACE PACKAGE OP.pkg_fn_BsAtms_DemandManager AS

    PROCEDURE sp_BsAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_BsAtms_DemandManager;

CREATE OR REPLACE PACKAGE OP.pkg_fn_Common AS

	/* Batch JOB 처리결과 생성 */
	PROCEDURE sp_createBatchResult (
		pPgmId			IN		OP.t_cm_batch_result.pgm_id%TYPE,
		pPgmResult		IN		OP.t_cm_batch_result.pgm_result%TYPE,
		pJobDate		IN		OP.t_cm_batch_result.job_date%TYPE	DEFAULT null,
		pUserId			IN		OP.t_cm_batch_result.insert_uid%TYPE default 'SYSTEM'
	);

	/* 시퀀스 조회 */  
 	FUNCTION sf_getSeq (next in number) RETURN number;
  
	/* 요일 조회 */
	FUNCTION sf_getWeekday (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0
	) RETURN VARCHAR;
	
	/* 요일문자 조회 */
	FUNCTION sf_getWeekdayString (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0
	) RETURN VARCHAR;

  
 	/* 전주금요일 조회 */
	FUNCTION sf_getPreFriDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0
	) RETURN VARCHAR;
    
  
 	/* 다음주금요일 조회 */
	FUNCTION sf_getPostFriDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0
	) RETURN VARCHAR;

 	/* 다음주금요일 조회 */
	FUNCTION sf_holiday_yn (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0
	) RETURN VARCHAR;
 
  
	/* 전일 조회 */
	FUNCTION sf_getBeforeDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 1
	) RETURN VARCHAR;

	/* 익일 조회 */
	FUNCTION sf_getAfterDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 1
	) RETURN VARCHAR;

	/* 전영업일 조회 */
	FUNCTION sf_getPreActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1					
	) RETURN VARCHAR;

	/* 익영업일 조회 */
	FUNCTION sf_getPostActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1						
	) RETURN VARCHAR;

	/* 전영업일 익일 조회 */
	FUNCTION sf_getAfterPreActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1						
	) RETURN VARCHAR;

	/* 익영업일 익일 조회 */
	FUNCTION sf_getAfterPostActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1						
	) RETURN VARCHAR;

    /* 전영업일 전일 조회 */
	FUNCTION sf_getBeforePreActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1						
	) RETURN VARCHAR;

    /* 익영업일 전일 조회 */
	FUNCTION sf_getBeforePostActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER	DEFAULT 1					
	) RETURN VARCHAR;

END pkg_fn_Common;

CREATE OR REPLACE PACKAGE OP.pkg_fn_CtAtms_Demand AS

  
	/* 외환 현송계획서 데이터 생성 */
	PROCEDURE sp_ct_createAtmsCashPlan (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_CtAtms_Demand;

CREATE OR REPLACE PACKAGE OP.pkg_fn_CtAtms_DemandManager AS

    PROCEDURE sp_CtAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_CtAtms_DemandManager;

CREATE OR REPLACE PACKAGE OP.pkg_fn_DGBAtms_DemandManager AS

    PROCEDURE sp_DGBAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_DGBAtms_DemandManager;

CREATE OR REPLACE PACKAGE OP.pkg_fn_MoneyReceipt AS
    
    /* 파출수납업체 자금 집계 */
    PROCEDURE sp_summaryCarry (
        pDemandDate     IN      op.t_fn_oper_give.oper_date%TYPE
    );

    /* 사무소별 현금수령 자료 생성 */
    PROCEDURE sp_createOfficeReceipt (
        pDemandDate     IN      op.t_fn_oper_give.oper_date%TYPE
    );

END pkg_fn_MoneyReceipt;

CREATE OR REPLACE PACKAGE OP.pkg_fn_NiceDemand AS

    /* 청구액 계산 */
    PROCEDURE sp_createDemandInfo (
        pDemandDate     IN      VARCHAR DEFAULT null
    );

    /* 기기대수 계산 */
    FUNCTION sf_getMacCount (
        pOrgCode            op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate         op.t_fn_nice_demand.demand_date%TYPE
    ) RETURN NUMBER;
    
    /* 전영업일 기기대수 계산 */
    FUNCTION sf_getPreMacCount (
        pOrgCode            op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate         op.t_fn_nice_demand.demand_date%TYPE
    ) RETURN NUMBER;

    /* 일자금 계산 */
    FUNCTION sf_getOperAmt (
        pOrgCode        op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate     op.t_fn_nice_demand.demand_date%TYPE,
        pDemandDay      op.t_fn_demand_calendar.demand_day%TYPE,
        pMacCount       op.t_fn_nice_demand.mac_cnt%TYPE
    ) RETURN NUMBER; 

    /* 전영업일초 구하기 */
        -- 전청구일의 재고 ^^*
    FUNCTION sf_getPreStartAmt (
        pOrgCode        op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate     op.t_fn_nice_demand.demand_date%TYPE
    ) RETURN NUMBER; 


    /* 당일 계산 (직접입력 금액이 없으면 당일 일자금) */
    FUNCTION sf_getCurAmt (
        pOrgCode        op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate     op.t_fn_nice_demand.demand_date%TYPE,
        pMacCount       op.t_fn_nice_demand.mac_cnt%TYPE
    ) RETURN NUMBER; 


    /* 기관별 전일실적 구하기 */
        -- 대상일 : 전청구일 ~ 전일
        -- 전일지급금액, 전일거래건수
    PROCEDURE sp_setOrgPreResult (
        pOrgCode        IN  op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand.demand_date%TYPE,
        vPreResultAmt   OUT op.t_fn_nice_demand.yst_result_amt%TYPE,
        vDealCount      OUT op.t_fn_nice_demand.deal_cnt%TYPE,
    vPreInResultAmt OUT op.t_fn_nice_demand.yst_result_amt%TYPE,
        vDealInCount        OUT op.t_fn_nice_demand.deal_cnt%TYPE
    );

    /* 전잔, 말잔 계산 (운영자금 현황용) */
        -- 대상일 : 전청구일 ~ 전일
    PROCEDURE sp_setEndAmt (
        pOrgCode        IN  op.t_fn_nice_demand.org_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand.demand_date%TYPE,
        pPreResultAmt   IN  op.t_fn_nice_demand.yst_result_amt%TYPE,
        vPreEndAmt     OUT  op.t_fn_nice_demand.pre_amt%TYPE,
        vEndAmt        OUT  op.t_fn_nice_demand.end_amt%TYPE
    );
    
    /* 미완료금액 계산 */
       -- 전영업일 ~ 전일
    FUNCTION sf_getUncompleteAmt (
        pOrgCode        IN  op.t_fn_nice_demand.org_cd%TYPE,
        pStartDate      IN  op.t_fn_nice_demand.start_date%TYPE,
        pEndDate        IN  op.t_fn_nice_demand.end_date%TYPE
    ) RETURN NUMBER;
    

    /* 기관 반환금 대상여부(청구자금이 마이너스일 때) */
    FUNCTION sf_getOrgReturnYn(
        pOrgCode        IN  op.t_cm_org.org_cd%TYPE
    ) RETURN VARCHAR;
    
    /* 익영업일 청구예상액 계산 */
    PROCEDURE sp_createPostDemandInfo (
        pDemandDate     IN      VARCHAR DEFAULT null
    ); 

/*===>---------------------------------------------------------------------*/
/* 당일 청구액 계산-BC 글로벌 */
    PROCEDURE sp_createDemandInfo_bc (
        pDemandDate     IN      VARCHAR DEFAULT null
    ) ;
    
    /* 기관 전영업일초 계산 (전청구일의 재고) */
    FUNCTION sf_getPreStartAmt_bc (
        pOrgCode        op.t_fn_nice_demand_bc.org_cd%TYPE,
        pDemandDate     op.t_fn_nice_demand_bc.demand_date%TYPE
    ) RETURN NUMBER ;
    
        /* 기관별 전일실적, 거래건수 계산 -- hossong 현재 전일 거래에 대한 실적을 구할때 deal_type =0 출금거래만 실적을 집계하고 있음. 입금거래도 필요함.*/
        -- 대상일 : 전청구일 ~ 전일
        -- 전일지급금액, 전일거래건수
    PROCEDURE sp_setOrgPreResult_bc (
        pOrgCode        IN  op.t_fn_nice_demand_bc.org_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand_bc.demand_date%TYPE,
        vPreResultAmt   OUT op.t_fn_nice_demand_bc.yst_result_amt%TYPE,
        vDealCount      OUT op.t_fn_nice_demand_bc.deal_cnt%TYPE,
        vPreInResultAmt OUT op.t_fn_nice_demand_bc.yst_result_amt%TYPE,
        vDealInCount    OUT op.t_fn_nice_demand_bc.deal_cnt%TYPE
    );
    
    /* 전잔, 말잔 계산 (운영자금 현황용) */
        -- 대상일 : 전청구일 ~ 전일
    PROCEDURE sp_setEndAmt_bc (
        pOrgCode        IN  op.t_fn_nice_demand_bc.org_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand_bc.demand_date%TYPE,
        pPreResultAmt   IN  op.t_fn_nice_demand_bc.yst_result_amt%TYPE,
        vPreEndAmt     OUT  op.t_fn_nice_demand_bc.pre_amt%TYPE,
        vEndAmt        OUT  op.t_fn_nice_demand_bc.end_amt%TYPE
    );

/*===>---------------------------------------------------------------------*/

    /* 사무소별 운영자금 분배 */
    PROCEDURE sp_shareOperAmt (
        pDemandDate     IN      VARCHAR DEFAULT null
    );

    /* 사무소 전영업일초 계산 (전청구일의 재고) */
    FUNCTION sf_getOfficePreStartAmt (
        pDeptCode       op.t_fn_nice_office_oper.dept_cd%TYPE,
        pOfficeCode     op.t_fn_nice_office_oper.dept_cd%TYPE,
        pDemandDate     op.t_fn_nice_office_oper.demand_date%TYPE
    ) RETURN NUMBER; 

    /* 사무소별 전일실적 구하기 */
        -- 대상일 : 전청구일 ~ 전일
        -- 전일지급금액, 전일거래건수
    FUNCTION sf_getOfficePreResult (
        pDeptCode       IN  op.t_fn_nice_office_oper.dept_cd%TYPE,
        pOfficeCode     IN  op.t_fn_nice_office_oper.office_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand.demand_date%TYPE
    ) RETURN NUMBER;

  
 /* 사무소별 전일실적 구하기 --입금실적*/
        -- 대상일 : 전청구일 ~ 전일
        -- 전일지급금액, 전일거래건수
    FUNCTION sf_getOfficePreInResult (
        pDeptCode       IN  op.t_fn_nice_office_oper.dept_cd%TYPE,
        pOfficeCode     IN  op.t_fn_nice_office_oper.office_cd%TYPE,
        pDemandDate     IN  op.t_fn_nice_demand.demand_date%TYPE
    ) RETURN NUMBER;

 
  
    /* 일별 기기대수 생성 */
    PROCEDURE sp_createDailyMacCount (
        pDate       IN      VARCHAR DEFAULT null
    );
    
    /* Nice 일자금 기초데이타 및 사무소 분담률 생성 */
    PROCEDURE sp_createMonthlyData (
        pStdDate        IN      op.t_fn_nice_share_rate.start_date%TYPE,
        pStartDate      IN      op.t_fn_nice_share_rate.start_date%TYPE,
        pEndDate        IN      op.t_fn_nice_share_rate.end_date%TYPE,
        pUserId         IN      op.t_fn_nice_share_rate.insert_uid%TYPE,
        vResult         OUT     VARCHAR
    );
    
    cNiceOrgCode       CONSTANT op.t_cm_org.org_cd%TYPE            := '096';     -- 나이스 기관코드
    cHanbitDeptCode    CONSTANT OP.t_cm_office.dept_cd%TYPE           := '20';     -- 한빛 부서코드
    cHanbitOfficeCode  CONSTANT OP.t_cm_office.office_cd%TYPE         := '20';     -- 한빛 사무소코드                                     
    cHanbitStdInvent   CONSTANT op.t_fn_nice_demand.invent_amt%TYPE    :=         0; -- 한빛 재고 기준금액
    cHanbitOrdInvent   CONSTANT op.t_fn_nice_demand.invent_amt%TYPE    :=  30000000; -- 한빛 재고 평일금액
    cHanbitWkdInvent   CONSTANT op.t_fn_nice_demand.invent_amt%TYPE    :=  20000000; -- 한빛 재고 주말금액
    cWebcashDeptCode    CONSTANT OP.t_cm_office.dept_cd%TYPE          := '20';     -- 웹캐시 부서코드
    cWebcashOfficeCode  CONSTANT OP.t_cm_office.office_cd%TYPE        := '21';     -- 웹캐시 사무소코드
    cSamsungLife        CONSTANT op.t_fn_nice_demand.org_cd%TYPE      := '00L';     -- 삼성생명 기관코드
    cSLStdInventAmt     CONSTANT op.t_fn_nice_demand.invent_amt%TYPE  := 25000000; -- 삼성생명 청구기준 재고금액
    cSLMaxInventAmt     CONSTANT op.t_fn_nice_demand.invent_amt%TYPE  := 50000000; -- 삼성생명 최대청구 재고금액
    cPostOfficeOrgCode  CONSTANT op.t_fn_nice_demand.org_cd%TYPE      := '071';     -- 우체국 기관코드
    cPostOfficeAmtUnit  CONSTANT NUMBER(1)                         := 7;        -- 우체국 일자금 단위 자릿수(버림)
    cKBOfficeOrgCode  CONSTANT op.t_fn_nice_demand.org_cd%TYPE    := '004';     -- 국민은행 기관코드
  	cKBWkdAmt         op.t_fn_nice_demand.demand_amt%TYPE           := 2500000000;        -- 국민은행 주중실적
  	cKBWedAmt         op.t_fn_nice_demand.demand_amt%TYPE           := 3500000000;        -- 국민은행 주말실적
  	cKBOffRate        number                                     := -100;        -- 공휴일 여유율   
  	cRatmAmt          number                                     := 100000000;        --입금기기 선자금   
    
  	cEmart1DayAmt      number                                     := 20000000;  -- 충구일수가 1일이면 2천만원
  	cEmart2DayAmt      number                                     := 10000000;  -- 충구일수가 2일이면 1천만원    
    
    cGeneralAmtUnit     CONSTANT NUMBER(1)                         := 1;        -- 일반기관 일자금 단위 자릿수 (반올림)
    cOffGeneralAmtUnit  CONSTANT NUMBER(1)                         := 4;        -- 사무소 일자금 단위 자릿수 (반올림)
    cMaxDate            CONSTANT VARCHAR(8)                       := '29991231'; -- 일자의 최고값
    
END pkg_fn_NiceDemand;

CREATE OR REPLACE PACKAGE op.pkg_fn_PackDemand AS
    /* 온누리 */
	PROCEDURE sp_onnuri_dsum_demand (
	    pDemandDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 

    /* 일괄관리 사무소, 기관, 운영형태별 마감일 기준 재고데이타 생성 */
	PROCEDURE sp_kib_dsum_demand (
	    pDemandDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 


    /* 일괄관리 사무소, 기관, 운영형태별 마감일 기준 재고데이타 생성 */
	PROCEDURE sp_createPackInvent (
	    pDemandDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 

    /* 일괄관리 기관, 지점별 마감일 기준 재고데이타 생성 */
	PROCEDURE sp_createPackInventbranch (
	    pDemandDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
	
    /* 일괄관리 사무소, 기관, 지점별 마감일 기준 재고데이타 생성 */
	PROCEDURE sp_createPackInventOfcJjm (
	    pDemandDate  IN OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
	
	/* 일괄관리 사무소, 기관,운영형태별 청구자료 생성 */
	PROCEDURE sp_createPackDemand (
		pDemandDate   IN  OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);
	
	/* 일괄관리 지점,운영형태별 청구자료 생성 */
	PROCEDURE sp_createPackbranch (
		pDemandDate   IN  op.t_fn_pack_branch.demand_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);

	/* 일괄관리 사무소, 지점별 청구자료 생성 */
	PROCEDURE sp_createPackOfcJjm (
		pDemandDate   IN  OP.t_fn_pack_ofcjjm.demand_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);

	/* 일괄관리 기기별 청구자료 생성 */
	PROCEDURE sp_createPackReport (
		pDemandDate		OP.t_fn_pack_demand.demand_date%TYPE ,
		pIsDeleting IN	VARCHAR 						  DEFAULT '1'			 	-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
	);

	/* 일괄관리 기관별 청구액 금전단위 적용 */
	PROCEDURE sp_updatePackDemand (
		pDemandDate   IN  OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   
	);

	/* 일괄관리 기기별 청구자료 회수예상치 반영 */
	PROCEDURE sp_updatePackReport (
		pDemandDate   IN  OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   
	);

	/* 하나은행 전송용 자료 생성 */
	PROCEDURE sp_createHanaBank (
		pDemandDate   IN  OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);

	/* 마사회 데이타 청구테이블 반영 */
	PROCEDURE sp_reflectPackSpecial (
		pDemandDate   IN  OP.t_fn_pack_demand.demand_date%TYPE DEFAULT null   
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	cHanaBankCode CONSTANT OP.t_cm_org.org_cd%TYPE			   		:= '081';	    -- 하나은행 기관코드
	cNongHyupCode CONSTANT OP.t_cm_org.org_cd%TYPE					:= '546';		-- 농협 기관코드  -- 마사회일괄 청구루틴
	/* 20091209 청구기준으로 단위기기를 중앙회소속으로 옮기면서 기존 마사회 루틴 제거를 위해 바꿈*/

	cOfficeDefaultUnit	CONSTANT NUMBER(5)                      := 10000;	    -- 사무소 기본 청구단위 만원)
	cDemandUnit			CONSTANT NUMBER(7)						:= 1000000;		-- 자금청구단위 (백만원)
	cNhDemandUnit		CONSTANT NUMBER(5)						:= 10000;		-- 자금청구단위 (백만원) 농협	
    c1000DemandUnit		CONSTANT NUMBER(4)						:= 1000;		-- 자금청구단위 (천원)
 	cWrDemandUnit		CONSTANT NUMBER(9)						:= 10000000;	-- 자금청구단위 (천만원) 우리은행  20130216 카리스마 정
 	cDgDemandUnit		CONSTANT NUMBER(9)						:= 100000000;	-- 자금청구단위 (억원)  대구은행  20090731 카리스마 정
 	c1DemandUnit		CONSTANT NUMBER(9)						:= 1;	        -- 자금청구단위 (일원)  임아르    20100222 카리스마 정
 	cGangNamDeptCode	CONSTANT OP.t_cm_office.dept_cd%TYPE		:= '05';		-- 강남사무소 부서코드
	cGangNamOfficeCode	CONSTANT OP.t_cm_office.dept_cd%TYPE		:= '10';		-- 강남사무소 사무소코드
	
  cDaguDeptCode	CONSTANT OP.t_cm_office.dept_cd%TYPE		:= '08';		-- 대구사무소 부서코드
	cDaguOfficeCode	CONSTANT OP.t_cm_office.dept_cd%TYPE		:= '20';		-- 대구사무소 사무소코드
  
	cCVSOperType		CONSTANT OP.t_cm_site.oper_type%TYPE		:= '1400';		-- 편의점 운영형태 코드
END pkg_fn_PackDemand;

create or replace package OP.PKG_FN_FORECAST as
   PROCEDURE sp_GetLastSendDate(
			pDeptCd 		op.T_FN_SENDplan.dept_cd%TYPE, 
			pOfficeCd  		op.T_FN_SENDplan.office_cd%TYPE,
			vResult    OUT  op.T_FN_SENDplan.send_date%TYPE );
   
   PROCEDURE sp_GetLastSendDate(
			pDeptCd 		op.T_FN_SENDplan.dept_cd%TYPE, 
			pOfficeCd  		op.T_FN_SENDplan.office_cd%TYPE,
			pOrgCd  		op.T_FN_SENDplan.org_cd%TYPE,
			vResult    OUT  op.T_FN_SENDplan.send_date%TYPE );

   -- 일괄관리기의 최종 현송일자 구하기 (사무소별로 )
   FUNCTION fc_GetLastSendDate ( 
			pDeptCd 		op.T_FN_SENDplan.dept_cd%TYPE, 
			pOfficeCd  		op.T_FN_SENDplan.office_cd%TYPE	)
			Return VARCHAR;
			
			
   -- 나이스의 최종 현송일자 구하기 (사무소별로 )
   FUNCTION fc_GetLastSendDate ( 
			pDeptCd 		op.T_FN_SENDplan.dept_cd%TYPE, 
			pOfficeCd  		op.T_FN_SENDplan.office_cd%TYPE,	
			pOrgCd  		op.T_FN_SENDplan.org_cd%TYPE       )
			Return VARCHAR;			
			
			
   -- 현송계획 실행 문제발생시 SENDPLAN만 생성 
   PROCEDURE sp_DealForecastEmc(
   			pWorkDate	IN	VARCHAR DEFAULT null );	   -- 작업일자

			
   -- 현송계획 실행 문제발생시 SENDPLAN만 생성(NICE)		
   PROCEDURE sp_NiceForecastEmc(
    		pWorkDate 	IN  OP.t_cm_batch_result.job_date%TYPE,        	   		   -- 작업일자	
  			pstatus     OUT OP.t_cm_batch_result.pgm_result%TYPE   	  		);	   -- 결과   
 
 
   -- 현송계획 실행 문제발생시 SENDPLAN만 생성(일괄관리)		
   PROCEDURE sp_MngrForecastEmc(
    		pSendDate 	IN  OP.t_cm_batch_result.job_date%TYPE,        	   		   -- 현송일자	
  			pstatus     OUT OP.t_cm_batch_result.pgm_result%TYPE   	  		);	   -- 결과   

/******************************************************************************
   NAME:       PKG_FN_FORECAST
   PURPOSE:    현송계획과 관련된 함수 및 프로시져 

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2003-07-03             1. Created this package.

 
   EXAMPLE USE:     NUMBER := PKG_FN_FORECAST.MyFuncName(Number);
                    PKG_FN_FORECAST.MyProcName(Number, VARCHAR);


   Here is the complete list of automatically available Auto Replace Keywords:
      Object Name:     PKG_FN_FORECAST or PKG_FN_FORECAST
      Sysdate:         2003-07-03
      Date/Time:       2003-07-03 오후 2:29:00
      Date:            2003-07-03
      Time:            오후 2:29:00
      Username:         (set in TOAD Options, Procedure Editor)

******************************************************************************/
END PKG_FN_FORECAST;

create or replace package OP.pkg_cm_faxMaster as

    PROCEDURE sp_batchProcess (
        pDate     IN      op.t_fn_pack_demand.demand_date%TYPE DEFAULT NULL	,
		    pRecvCd	  IN		  VARCHAR DEFAULT ''
    );

END pkg_cm_faxMaster;

create or replace package OP.pkg_fn_BsAtms_Demand as




    /* 부산은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_bs_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT NULL  ,
		pIsDeleting  IN VARCHAR DEFAULT '1'  
	); 
	
	/* 부산은행 현송계획서 데이터 생성 */

	PROCEDURE sp_bs_createAtmsCashPlan  (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE DEFAULT NULL  ,
		pIsDeleting IN	VARCHAR DEFAULT '1'
	);

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_bscreateAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE DEFAULT NULL  ,
		pIsDeleting IN	VARCHAR DEFAULT '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_BsAtms_Demand;

create or replace package OP.pkg_fn_Calendar as
	/* 카렌다 생성 */
	PROCEDURE sp_createCalendar (
		pYear		IN		VARCHAR default null,	-- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR default '1',						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	); 

	/* 청구일수 카렌다 생성 (전기관 )*/
	PROCEDURE sp_createDemandCalendar (
		pYear		IN		VARCHAR,									-- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR default '1',						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	); 

	/* 청구일수 카렌다 생성 (기관별) */
	PROCEDURE sp_createDemandCalendar (
	    pOrgCode    IN      op.t_cm_org.org_cd%TYPE,						-- 기관코드
		pYear		IN		VARCHAR,									-- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR default 1,						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	); 

	/* 음력일자를 양력일자로 반환 */
	FUNCTION sf_getSolarDate ( 
		pLunarDate VARCHAR
	) RETURN VARCHAR;
	
	eAlreadyExistsException EXCEPTION;
	
END pkg_fn_Calendar;

create or replace package OP.pkg_fn_CenterUI as

	/* 기관별 여유율 등록 */
	PROCEDURE sp_createSpareRate (
		pOrgCode		IN		op.t_fn_org_spare_rate.org_cd%TYPE,
		pStartDate		IN		op.t_fn_org_spare_rate.start_date%TYPE,
		pOrdCntRate		IN		op.t_fn_org_spare_rate.ord_cnt_rate%TYPE,
		pOrdAmtRate		IN		op.t_fn_org_spare_rate.ord_amt_rate%TYPE,
		pWkdCntRate		IN		op.t_fn_org_spare_rate.wkd_cnt_rate%TYPE,
		pWkdAmtRate		IN		op.t_fn_org_spare_rate.wkd_amt_rate%TYPE,
		pUserId			IN		op.t_fn_org_spare_rate.insert_uid%TYPE,
		vResult		   OUT		VARCHAR
	);
END pkg_fn_CenterUI;

create or replace package OP.pkg_fn_DGBAtms_Demand as

    /* 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_DGB_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 
	
	/* 현송계획서 데이터 생성 */
	PROCEDURE sp_DGB_createAtmsCashPlan (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_DGcreateAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_DGBAtms_Demand;

create or replace package OP.pkg_fn_DemandManager as

    PROCEDURE sp_batchProcess (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE  default null  ,
        pFromJobNo        IN        NUMBER                              default 0,
        pToJobNo        IN        NUMBER                                default 9999999
    );

    PROCEDURE sp_summaryDemand (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE  default null
    );
    
    PROCEDURE sp_fn_emart_update (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE  default null
    );    

END pkg_fn_DemandManager;

create or replace package OP.pkg_fn_JjAtms_Demand as

    /* 제주은행 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_jj_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 

    /* 제주은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_jj_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 
	
    /* 제주은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_jj_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 
	
	/* 제주은행 현송계획서 데이터 생성 */
  
	PROCEDURE sp_jj_createAtmsCashPlan  (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting IN	VARCHAR 						default '1'
	);

	/* 제주자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_jjcreateAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE default null  ,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_JjAtms_Demand;

create or replace package OP.pkg_fn_JjAtms_DemandManager as

    PROCEDURE sp_JjAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_JjAtms_DemandManager;

create or replace package OP.pkg_fn_KNAtms_Demand as

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_KNcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						 
	);
	
  /* 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_kn_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 
  
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_KNAtms_Demand;

create or replace package OP.pkg_fn_KNAtms_DemandManager as

    PROCEDURE sp_KNAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_KNAtms_DemandManager;

create or replace package OP.pkg_fn_KTISAtms_Demand as

    /* 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_KTIS_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_KTcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						 
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_KTISAtms_Demand;

create or replace package OP.pkg_fn_KTISAtms_DemandManager as

    PROCEDURE sp_KTISAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_KTISAtms_DemandManager;

create or replace package OP.pkg_fn_KebAtms_Demand as

    /* 외환 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_keb_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 

    /* 회환 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_keb_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 
	
    /* 외환 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_keb_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
		pIsDeleting  IN VARCHAR                         default '1'
	); 
	
	/* 외환 현송계획서 데이터 생성 */
	PROCEDURE sp_keb_createAtmsCashPlan (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_kebcreAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_KebAtms_Demand;

create or replace package OP.pkg_fn_KebAtms_DemandManager as

    PROCEDURE sp_KebAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_KebAtms_DemandManager;

create or replace package OP.pkg_fn_NhAtms_Demand as

    /* 농협은행 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_nh_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                        
	); 

    /* 농협은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_nh_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            
	); 
	
    /* 농협은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_nh_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            
	); 
	
	/* 농협은행 현송계획서 데이터 생성 */
  --20080908 아침에 풀고 20080910 아침에 막기~

	PROCEDURE sp_nh_createAtmsCashPlan  (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR 						  	
	);

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_nhcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						  	
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_NhAtms_Demand;

create or replace package OP.pkg_fn_NhAtms_DemandManager as

    PROCEDURE sp_NhAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_NhAtms_DemandManager;

create or replace package OP.pkg_fn_NiceMonthly as
	
	/* Nice 일자금 기초데이타 및 사무소 분담률 생성 */
	PROCEDURE sp_createMonthlyData (
		pStdDate		IN		op.t_fn_nice_share_rate.start_date%TYPE,
		pStartDate		IN		op.t_fn_nice_share_rate.start_date%TYPE,
		pEndDate		IN		op.t_fn_nice_share_rate.end_date%TYPE,
		pUserId			IN		op.t_fn_nice_share_rate.insert_uid%TYPE,
		vResult			OUT		VARCHAR
	);

END pkg_fn_NiceMonthly;

create or replace package OP.pkg_fn_SMAtms_Demand as

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_SMcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 	DEFAULT '1'					 
	);
	
  /* 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_sm_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR  DEFAULT '1'                       
	); 
  
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_SMAtms_Demand;

create or replace package OP.pkg_fn_SMAtms_DemandManager as

    PROCEDURE sp_SMAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_SMAtms_DemandManager;

create or replace package OP.pkg_fn_ShAtms_OpDemand as

	
    /* 신한은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_sh_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR   DEFAULT '1'                      
	); 
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_shcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR DEFAULT '1'						
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_ShAtms_OpDemand;

create or replace package OP.pkg_fn_ShAtms_OpDemandManager as

    PROCEDURE sp_ShAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_ShAtms_OpDemandManager;

create or replace package OP.pkg_fn_WCAtms_Demand as

    /* 우체국 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_WC_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR DEFAULT '1'                        
	); 
	
	/* 우체국 현송계획서 데이터 생성 */

	PROCEDURE sp_WC_createAtmsCashPlan  (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR DEFAULT '1'						
	);

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_WCcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR DEFAULT '1'						
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_WCAtms_Demand;

create or replace package OP.pkg_fn_WCAtms_DemandManager as

    PROCEDURE sp_WCAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_WCAtms_DemandManager;

create or replace package OP.pkg_fn_WRAtms_Demand as

	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_WRcreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);
	
  /* 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_WR_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
  
  /* 회수자금결과통보 */
	PROCEDURE sp_WR_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
	
	/* 현송계획서통보 */
	PROCEDURE sp_WR_createAtmsCashPlan (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
	
	/* 추가현송보고서 */
	PROCEDURE sp_WR_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                            DEFAULT '1'
	); 
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_WRAtms_Demand;

create or replace package OP.pkg_fn_WRAtms_DemandManager as

    PROCEDURE sp_WRAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_WRAtms_DemandManager;

create or replace package op.pkg_fn_HnAtms_Demand as

    /* 하나은행 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_hn_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE default null ,
		pIsDeleting  IN VARCHAR                            default '1'
	); 

    /* 하나은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_hn_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting  IN VARCHAR                            default '1'
	); 
	
    /* 하나은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_hn_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting  IN VARCHAR                            default '1'
	); 
	
	/* 하나은행 현송계획서 데이터 생성 */

	PROCEDURE sp_hn_createAtmsCashPlan  (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting IN	VARCHAR 						  	default '1'
	);
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_hncreateAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE    default null,
		pIsDeleting IN	VARCHAR 						  	default '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END op.pkg_fn_HnAtms_Demand;

create or replace package op.pkg_fn_HnAtms_DemandManager as

    PROCEDURE sp_HnAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_HnAtms_DemandManager;

create or replace package op.pkg_fn_KbAtms_Demand as

    /* 국민은행 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting  IN VARCHAR                            default '1'
	); 

    /* 국민은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting  IN VARCHAR                            default '1'
	); 
	
    /* 국민은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting  IN VARCHAR                            default '1'
	); 
	
	/* 국민은행 현송계획서 데이터 생성 */
	PROCEDURE sp_createAtmsCashPlan (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE   default null,
		pIsDeleting IN	VARCHAR 						  	default '1'
	);
	
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_createAtmsOperFundsDemand (
		pDemandDate	IN	op.t_fn_close.close_date%TYPE    default null,
		pIsDeleting IN	VARCHAR 						default '1'
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END op.pkg_fn_KbAtms_Demand;

create or replace package op.pkg_fn_KbAtms_DemandManager as

    PROCEDURE sp_KbAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    );

END pkg_fn_KbAtms_DemandManager;

create or replace package op.pkg_fn_KuAtms_Demand as

    /* 기업은행 회수자금결과 통보 데이터 생성 */
	PROCEDURE sp_ku_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 

    /* 기업은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_ku_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 
	
    /* 기업은행 추가현송 보고서 데이터 생성 */
	PROCEDURE sp_ku_createAtmsAddCashReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 
	
	/* 기업은행 현송계획서 데이터 생성 */
  --20080908 아침에 풀고 20080910 아침에 막기~
/*
	PROCEDURE sp_ku_createAtmsCashPlan  (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting IN	VARCHAR 						  	DEFAULT '1'
	);
*/
	/* 운영자금 청구서 통보 데이터 생성 */
	PROCEDURE sp_kucreateAtmsOperFundsDemand (
		pDemandDate   IN  op.t_fn_close.close_date%TYPE DEFAULT null    ,
		pIsDeleting IN	VARCHAR 						 
	);
	
	eAlreadyExistsException  EXCEPTION;
	
	
END op.pkg_fn_KuAtms_Demand;

create or replace package op.pkg_fn_KuAtms_DemandManager as

    PROCEDURE sp_KuAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END pkg_fn_KuAtms_DemandManager;

create or replace package op.pkg_fn_ShAtms_Demand as

    /* 신한은행 회수자금결과 통보 데이터 생성 */
    
	PROCEDURE sp_sh_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR     DEFAULT '1'                       
	); 

    /* 신한은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_sh_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR     DEFAULT '1'                       
	); 
	
 
	
	eAlreadyExistsException  EXCEPTION;
	
	
END op.pkg_fn_ShAtms_Demand;

create or replace package op.pkg_fn_ShAtms_DemandManager as

    PROCEDURE sp_ShAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
		pFromJobNo        IN      NUMBER DEFAULT 0,
		pToJobNo      IN      NUMBER DEFAULT 9999999
    );

END op.pkg_fn_ShAtms_DemandManager;

create or replace package op.pkg_fn_ShAtms_Demand_0330 as

    /* 신한은행 회수자금결과 통보 데이터 생성 */
    
	PROCEDURE sp_sh_createAtmsCollect (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 

    /* 신한은행 미처리금액 보고서 데이터 생성 */
	PROCEDURE sp_sh_createAtmsReport (
	    pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
		pIsDeleting  IN VARCHAR                         
	); 
	
 
	
	eAlreadyExistsException  EXCEPTION;
	
	
END pkg_fn_ShAtms_Demand_0330;

CREATE OR REPLACE PACKAGE BODY      op.pkg_fn_KuAtms_Demand AS


    /* 기업은행 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_Ku_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR2   DEFAULT '1'               
    ) 
    IS
        --pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        --pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    
        vBeforeDate op.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE close_date >= vPreActDate
                 and close_date <= vBeforeDate
         and org_cd ='003';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
            /*
            INSERT INTO OP.t_fn_atms_collect (
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   close_date,
                   before_cash_amt,
                   add_cash_amt,
                   add_cash_date,
                   collect_amt,
                   unattended_amt,
                   unattended_cnt,
                   report_yn,
                   office_nm,
                   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
                   update_date,
                   update_uid)
            select main.org_cd orgCd,--'97' orgCd, 
                   main.branch_cd branchCd,
                   main.site_cd siteCd,
                   main.mac_no macNo,
                   main.close_date closeDate,
                   main.pre_amt preAmt,
                   nvl(main.send_amt,0) plusSendAmt,
                   main.send_date plusSendDate,
                   main.close_amt collect_Amt,       
                   nvl(notEnd.notEndAmt,0) notEndAmt,
                   nvl(notEnd.notEndCnt,0) notEndCnt,
                   decode(notEnd.notEndCnt,null,'0','1') notEndYn,
                   substr2(off.office_nm,0,2) officeNm,
                   '0' orgSendYn,
             main.out_amt,
             main.in_amt,
             main.close_amt closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
                   SYSDATE,
                   'SYSTEM'
            from
                   (select cls.org_cd
                          ,cls.branch_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='003') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.branch_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,OP.t_fn_send b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='003'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.branch_cd = b.branch_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.branch_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.branch_cd = send.branch_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
                          -- MAIN: 추가현송이면서 현송완료인것
                    (select notend.org_cd
                           ,notend.branch_cd
                           ,notend.site_cd
                           ,notend.mac_no
                           ,notend.notEndCnt
                           ,notend.notEndAmt
                     from op.t_fn_close cls,
                         (select org_cd
                               ,branch_cd
                               ,mac_no
                               ,site_cd
                               ,count(deal_amt) notEndCnt
                               ,sum(deal_amt) notEndAmt
                         from OP.t_fn_notend
                         where notend_date >= vPreActDate
                         and notend_date <= vBeforeDate
                         and org_cd = '003'
                         and owner_org_cd <> '096'
                         group by org_cd,branch_cd,mac_no,site_cd) notend
                     where cls.close_date = vPreActDate
                     and cls.org_cd = '003'
                     and cls.differ_amt > 0
                     and cls.org_cd = notend.org_cd
                     and cls.branch_cd = notend.branch_cd
                     and cls.mac_no = notend.mac_no
                     and cls.site_cd = notend.site_cd) notEnd,
                     -- NOTEND: 과여금이 발생한 것
                    OP.t_cm_office off
                
                where main.org_cd = notEnd.org_cd(+)
                and main.branch_cd = notEnd.branch_cd(+)
                and main.site_cd = notEnd.site_cd(+)
                and main.mac_no = notEnd.mac_no(+)
                and main.dept_cd = off.dept_cd(+)
                and main.office_cd = off.office_cd(+);
            */
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_Demand.sp_createAtmsCollect', 
                                           vResult, 
                                           pDemandDate);

    END sp_ku_createAtmsCollect;
    
    /* 기업은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_ku_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR2  DEFAULT '1'                       
    ) 
    IS
        
        -- pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        -- pIsDeleting  IN VARCHAR2                            DEFAULT '1'
        
        
        vBeforeDate op.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='003';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_report (
           notend_date,  
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
                  ,main.branch_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,branch_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from OP.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '003'
                and owner_org_cd <> '096') main,
                OP.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.branch_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_Demand.sp_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_ku_createAtmsReport;
    
    /* 기업은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_ku_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR2   DEFAULT '1'                  
    ) 
    IS
        --pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        --pIsDeleting  IN VARCHAR2                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE add_date >= vPreActDate
                 AND add_date <= vBeforeDate
         and org_cd ='003';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
/*
            INSERT INTO t_fn_atms_add_cash_report (
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           add_time)
            select send.org_cd org_cd --'97' org_cd --
                  ,send.branch_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                  ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                  ,send.send_amt
                  ,substr(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.send_time
            from t_fn_send send
                ,OP.t_cm_office off
            where send.send_date >= vPreActDate
            and send.send_date <= vBeforeDate
            and send.org_cd = '03'
            and send.send_type = '2'
            and send.send_status = '2'
            and send.dept_cd = off.dept_cd(+)
            and send.office_cd = off.office_cd(+);
    */
  INSERT INTO OP.t_fn_atms_add_cash_report (
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           add_time,
           close_yn,
           send_date
           )

--select * from t_fn_atms_add_cash_report           
      
      select send.org_cd org_cd --'97' org_cd --
                  ,send.branch_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                  ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                  ,send.send_amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.branch_cd = close.branch_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
            from OP.t_fn_send send
                ,op.t_cm_office off

          ,(
           select org_cd,
                  branch_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='003'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  branch_cd,
                  site_cd,
                  mac_no    
          
          ) close

            where send.send_date >= vPreActDate
            and send.send_date <= vBeforeDate
            and send.org_cd = '003'
            and send.send_type = '2'
            and send.send_status = '2'
            and send.dept_cd = off.dept_cd
            and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.branch_cd = close.branch_cd (+) 
      and send.mac_no = close.mac_no (+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KuAtms_Demand.sp_createAtmsAddCashReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_ku_createAtmsAddCashReport;
    

    
    /* 기업은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_kucreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR2   DEFAULT '1'                         
    ) 
    IS
        --pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        --pIsDeleting  IN VARCHAR2                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
         and   org_cd ='003'; 
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   branch_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )
-----------------------------------------------------------------------------------------
select main.org_cd org_cd --'97' org_cd
                  ,main.branch_cd
                  ,main.demand_date
                  ,'' operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,main.oper_found
                  ,main.post_trans_amt
                  ,main.pre_add_trans_amt
                  ,main.pre_collect_amt
                  ,main.differ_amt
                  ,main.unset_before_amt
                  ,main.demand_amt
                  ,main.unset_amt
                  --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
                ,TOTAL_branch.STOCK_AMT   STOCK_AMT
                  ,substr(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,main.update_date
                  ,main.update_uid
            ,TOTAL_branch_BEFORE.PRETOTALAMT /*- TOTAL_branch_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,TOTAL_branch.OPERAMT  pre_oper_amt
            ,TOTAL_branch_BEFORE.DIFFERAMT pre_differ_amt  
            ,TOTAL_branch.OUTAMT pre_out_amt
            ,TOTAL_branch.INAMT  pre_in_amt

            from
                   (select org_cd
                          ,branch_cd
                          ,demand_date
                          ,vPostActDate PostActDate
                          ,OP.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(OP.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          ,sysdate update_date
                          ,'SYSTEM' update_uid
                    from OP.t_fn_pack_BRANCH
                    where demand_date = pDemandDate
                    and org_cd = '003'
                    group by demand_date
                            ,org_cd
                            ,branch_cd) main,
         (
          select 
             org_cd,
             branch_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='003'
          and close_date=OP.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     branch_cd
          ) total_branch,
          (
          -- total_branch_before
          select 
             org_cd,
             branch_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_branch
          where
            org_cd='003'
            and close_date=OP.sf_getPreActDate(OP.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
      where main.org_cd   = total_branch.org_cd
      and main.branch_cd = total_branch.branch_cd
      and main.org_cd   = total_branch_before.org_cd
      and main.branch_cd = total_branch_before.branch_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
      and TOTAL_branch.STOCK_AMT <> 0       ;

------------------------------------------------------------------------------------------
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_Demand.sp_createAtmsOperFundsDemand', 
                                           vResult, 
                                           pDemandDate);

    END sp_kucreateAtmsOperFundsDemand;
    
END pkg_fn_KuAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.PKG_CM_FAXDETAIL AS

  PROCEDURE SP_FEEDETAILSFORSH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                               PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                               PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                               PFAXCD    IN VARCHAR2,
                               PPAGENO   IN NUMBER,
                               PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
  
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT  NUMBER := 0;
    VT_T   NUMBER := 0;
    VT_OP  NUMBER := 0;
    VT_OU  NUMBER := 0;
    VT_IN  NUMBER := 0;
    VTJ_PT NUMBER := 0;
    VTJ_T  NUMBER := 0;
    VTJ_OP NUMBER := 0;
    VTJ_OU NUMBER := 0;
    VTJ_IN NUMBER := 0;
    VTB_D  NUMBER := 0;
    VTJB_D NUMBER := 0;
    VA_S   NUMBER := 0;
    VA_C   NUMBER := 0;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --미완료 오류명세서 거래  FeedetailSForSh
    
      -- header  
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ---------------------------------------------------------
      --list
    
      FOR K IN (SELECT op.fc_length(FEE.FEE_DATE) || ',' || FEE.FEE_DATE ||
                       op.fc_length(MAC.MAC_NM) || ',' || MAC.MAC_NM ||
                       op.fc_length(FEE.BRANCH_CD || '-' || FEE.MAC_NO) || ',' ||
                       FEE.BRANCH_CD || '-' || FEE.MAC_NO ||
                       op.fc_length(FEE.NOTEND_DATE) || ',' || FEE.NOTEND_DATE ||
                       op.fc_length(NO.DEAL_DATE) || ',' || NO.DEAL_DATE ||
                       op.fc_length(NO.TRAN_NO) || ',' || NO.TRAN_NO ||
                       op.fc_length(NO.BANK_CD) || ',' || NO.BANK_CD ||
                       op.fc_length(substr2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2'),
                                      0,
                                      4) || TRANSLATE(substr2(OP.FC_FN_SECURITY(ACCOUNT_NO,
                                                                               '2'),
                                                             5,
                                                             4),
                                                      '0123456789',
                                                      '*',
                                                      '*') ||
                               substr2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2'),
                                      9,
                                      LENGTH2(OP.FC_FN_SECURITY(ACCOUNT_NO,
                                                                '2')) - 8)) || ',' ||
                       substr2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2'), 0, 4) ||
                       TRANSLATE(substr2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2'),
                                        5,
                                        4),
                                 '0123456789',
                                 '*',
                                 '*') ||
                       substr2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2'),
                              9,
                              LENGTH2(OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) - 8) ||
                       op.fc_length(LTRIM(TO_CHAR(NO.DEAL_AMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NO.DEAL_AMT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(FEE.SEND_FEE, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(FEE.SEND_FEE, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(FEE.RETURN_FEE, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(FEE.RETURN_FEE, '999,999,999')) ||
                       op.fc_length(substr2(OFF.OFFICE_NM, 1, 2)) || ',' ||
                       substr2(OFF.OFFICE_NM, 1, 2) || op.fc_length(MEM.MEMBER_NM) || ',' ||
                       MEM.MEMBER_NM LIST_DATA
                FROM OP.T_FN_FEE    FEE,
                     OP.T_CM_OFFICE OFF,
                     OP.T_CM_MEMBER MEM,
                     OP.T_CM_ORG    ORG,
                     OP.T_CM_MAC    MAC,
                     OP.T_FN_NOTEND NO
                WHERE FEE.FEE_DATE >= OP.SF_GETPREACTDATE(PDATE)
                      AND
                      FEE.FEE_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                      AND FEE.ORG_CD = PORGCD
                      AND FEE.DEPT_CD = OFF.DEPT_CD
                      AND FEE.OFFICE_CD = OFF.OFFICE_CD
                      AND FEE.ORG_CD = ORG.ORG_CD(+)
                      AND FEE.ORG_CD = MAC.ORG_CD(+)
                      AND FEE.BRANCH_CD = MAC.BRANCH_CD(+)
                      AND FEE.MAC_NO = MAC.MAC_NO(+)
                      AND FEE.DEPT_CD = MEM.DEPT_CD
                      AND FEE.OFFICE_CD = MEM.OFFICE_CD
                      AND FEE.WRITER = MEM.MEMBER_ID
                      AND FEE.NOTEND_DATE = NO.NOTEND_DATE(+)
                      AND FEE.DEAL_DATE = NO.DEAL_DATE(+)
                      AND FEE.ORG_CD = NO.ORG_CD(+)
                      AND FEE.BRANCH_CD = NO.BRANCH_CD(+)
                      AND FEE.MAC_NO = NO.MAC_NO(+)
                      AND FEE.TRAN_NO = NO.TRAN_NO(+)
                ORDER BY FEE.FEE_DATE,
                         ORG.ORG_NM
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT), 0), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(FEE.SEND_FEE), 0), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(FEE.SEND_FEE), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(FEE.RETURN_FEE), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(FEE.RETURN_FEE), 0), '999,999,999')) ||
             lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' '
      INTO VFD_TEMP1
      FROM OP.T_FN_FEE    FEE,
           OP.T_CM_OFFICE OFF,
           OP.T_CM_MEMBER MEM,
           OP.T_CM_ORG    ORG,
           OP.T_CM_MAC    MAC,
           OP.T_FN_NOTEND NO
      WHERE FEE.FEE_DATE >= OP.SF_GETPREACTDATE(PDATE)
            AND FEE.FEE_DATE <= OP.SF_GETBEFOREDATE(PDATE)
            AND FEE.ORG_CD = PORGCD
            AND FEE.DEPT_CD = OFF.DEPT_CD
            AND FEE.OFFICE_CD = OFF.OFFICE_CD
            AND FEE.ORG_CD = ORG.ORG_CD(+)
            AND FEE.ORG_CD = MAC.ORG_CD(+)
            AND FEE.BRANCH_CD = MAC.BRANCH_CD(+)
            AND FEE.MAC_NO = MAC.MAC_NO(+)
            AND FEE.DEPT_CD = MEM.DEPT_CD
            AND FEE.OFFICE_CD = MEM.OFFICE_CD
            AND FEE.WRITER = MEM.MEMBER_ID
            AND FEE.NOTEND_DATE = NO.NOTEND_DATE(+)
            AND FEE.DEAL_DATE = NO.DEAL_DATE(+)
            AND FEE.ORG_CD = NO.ORG_CD(+)
            AND FEE.BRANCH_CD = NO.BRANCH_CD(+)
            AND FEE.MAC_NO = NO.MAC_NO(+)
            AND FEE.TRAN_NO = NO.TRAN_NO(+);
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_FeedetailSForSh',
                                          VRESULT,
                                          PDATE);
  
  END SP_FEEDETAILSFORSH;

  -- 신한미완료양식변경
  PROCEDURE SP_FEEDETAILSFORSH1(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                PFAXCD    IN VARCHAR2,
                                PPAGENO   IN NUMBER,
                                PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
  
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT  NUMBER := 0;
    VT_T   NUMBER := 0;
    VT_OP  NUMBER := 0;
    VT_OU  NUMBER := 0;
    VT_IN  NUMBER := 0;
    VTJ_PT NUMBER := 0;
    VTJ_T  NUMBER := 0;
    VTJ_OP NUMBER := 0;
    VTJ_OU NUMBER := 0;
    VTJ_IN NUMBER := 0;
    VTB_D  NUMBER := 0;
    VTJB_D NUMBER := 0;
    VA_S   NUMBER := 0;
    VA_C   NUMBER := 0;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --미완료 오류명세서 거래  FeedetailSForSh1
    
      -- header  
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ---------------------------------------------------------
      --list
    
      FOR K IN (SELECT op.fc_length(FEE.FEE_DATE) || ',' || FEE.FEE_DATE ||
                        op.fc_length(MAC.MAC_NM) || ',' || MAC.MAC_NM ||
                        op.fc_length(FEE.BRANCH_CD || '-' || FEE.MAC_NO) || ',' ||
                        FEE.BRANCH_CD || '-' || FEE.MAC_NO ||
                        op.fc_length(FEE.NOTEND_DATE) || ',' || FEE.NOTEND_DATE ||
                        op.fc_length(NO.DEAL_DATE) || ',' || NO.DEAL_DATE ||
                        op.fc_length(NO.TRAN_NO) || ',' || NO.TRAN_NO ||
                        op.fc_length(NO.BANK_CD) || ',' || NO.BANK_CD ||
                       --           op.fc_length(substr2(account_no,0,4)||REGEXP_REPLACE(substr2(account_no,5,4),'[0-9]','*')||substr2(account_no,9, LENGTH2(account_no)-8))||
                       --             ','||substr2(account_no,0,4)||REGEXP_REPLACE(substr2(account_no,5,4),'[0-9]','*')||substr2(account_no,9, LENGTH2(account_no)-8)||
                        op.fc_length(LTRIM(TO_CHAR(NO.DEAL_AMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NO.DEAL_AMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(FEE.SEND_FEE, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(FEE.SEND_FEE, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(FEE.RETURN_FEE, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(FEE.RETURN_FEE, '999,999,999')) ||
                        op.fc_length(substr2(OFF.OFFICE_NM, 1, 2)) || ',' ||
                        substr2(OFF.OFFICE_NM, 1, 2) || op.fc_length(MEM.MEMBER_NM) || ',' ||
                        MEM.MEMBER_NM LIST_DATA
                FROM OP.T_FN_FEE    FEE,
                     OP.T_CM_OFFICE OFF,
                     OP.T_CM_MEMBER MEM,
                     OP.T_CM_ORG    ORG,
                     OP.T_CM_MAC    MAC,
                     OP.T_FN_NOTEND NO
                WHERE FEE.FEE_DATE >= OP.SF_GETPREACTDATE(PDATE)
                      AND
                      FEE.FEE_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                      AND FEE.ORG_CD = PORGCD
                      AND FEE.DEPT_CD = OFF.DEPT_CD
                      AND FEE.OFFICE_CD = OFF.OFFICE_CD
                      AND FEE.ORG_CD = ORG.ORG_CD(+)
                      AND FEE.ORG_CD = MAC.ORG_CD(+)
                      AND FEE.BRANCH_CD = MAC.BRANCH_CD(+)
                      AND FEE.MAC_NO = MAC.MAC_NO(+)
                      AND FEE.DEPT_CD = MEM.DEPT_CD
                      AND FEE.OFFICE_CD = MEM.OFFICE_CD
                      AND FEE.WRITER = MEM.MEMBER_ID
                      AND FEE.NOTEND_DATE = NO.NOTEND_DATE(+)
                      AND FEE.DEAL_DATE = NO.DEAL_DATE(+)
                      AND FEE.ORG_CD = NO.ORG_CD(+)
                      AND FEE.BRANCH_CD = NO.BRANCH_CD(+)
                      AND FEE.MAC_NO = NO.MAC_NO(+)
                      AND FEE.TRAN_NO = NO.TRAN_NO(+)
                ORDER BY FEE.FEE_DATE,
                         ORG.ORG_NM
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT), 0), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(FEE.SEND_FEE), 0), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(FEE.SEND_FEE), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(FEE.RETURN_FEE), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(FEE.RETURN_FEE), 0), '999,999,999')) ||
             lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' '
      INTO VFD_TEMP1
      FROM OP.T_FN_FEE    FEE,
           OP.T_CM_OFFICE OFF,
           OP.T_CM_MEMBER MEM,
           OP.T_CM_ORG    ORG,
           OP.T_CM_MAC    MAC,
           OP.T_FN_NOTEND NO
      WHERE FEE.FEE_DATE >= OP.SF_GETPREACTDATE(PDATE)
            AND FEE.FEE_DATE <= OP.SF_GETBEFOREDATE(PDATE)
            AND FEE.ORG_CD = PORGCD
            AND FEE.DEPT_CD = OFF.DEPT_CD
            AND FEE.OFFICE_CD = OFF.OFFICE_CD
            AND FEE.ORG_CD = ORG.ORG_CD(+)
            AND FEE.ORG_CD = MAC.ORG_CD(+)
            AND FEE.BRANCH_CD = MAC.BRANCH_CD(+)
            AND FEE.MAC_NO = MAC.MAC_NO(+)
            AND FEE.DEPT_CD = MEM.DEPT_CD
            AND FEE.OFFICE_CD = MEM.OFFICE_CD
            AND FEE.WRITER = MEM.MEMBER_ID
            AND FEE.NOTEND_DATE = NO.NOTEND_DATE(+)
            AND FEE.DEAL_DATE = NO.DEAL_DATE(+)
            AND FEE.ORG_CD = NO.ORG_CD(+)
            AND FEE.BRANCH_CD = NO.BRANCH_CD(+)
            AND FEE.MAC_NO = NO.MAC_NO(+)
            AND FEE.TRAN_NO = NO.TRAN_NO(+);
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_FeedetailSForSh1',
                                          VRESULT,
                                          PDATE);
  
  END SP_FEEDETAILSFORSH1;

  -- 공항키오스크 미완료내역
  PROCEDURE SP_NOTENDFORGH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                           PFAXCD    IN VARCHAR2,
                           PPAGENO   IN NUMBER,
                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
  
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT  NUMBER := 0;
    VT_T   NUMBER := 0;
    VT_OP  NUMBER := 0;
    VT_OU  NUMBER := 0;
    VT_IN  NUMBER := 0;
    VTJ_PT NUMBER := 0;
    VTJ_T  NUMBER := 0;
    VTJ_OP NUMBER := 0;
    VTJ_OU NUMBER := 0;
    VTJ_IN NUMBER := 0;
    VTB_D  NUMBER := 0;
    VTJB_D NUMBER := 0;
    VA_S   NUMBER := 0;
    VA_C   NUMBER := 0;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --미완료 오류명세서 거래  NotendForGH
    
      -- header  
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM (SELECT ORG_NM FROM OP.T_CM_ORG ORG WHERE ORG.ORG_CD = PORGCD);
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ---------------------------------------------------------
      --list
    
      FOR K IN (SELECT op.fc_length(VARCHAR(ROWNUM)) || ',' || ROWNUM ||
                        op.fc_length(BRANCH_CD) || ',' || BRANCH_CD ||
                        op.fc_length(MAC_NM) || ',' || MAC_NM || op.fc_length(MAC_NO) || ',' ||
                        MAC_NO || op.fc_length(DEAL_DATE) || ',' || DEAL_DATE ||
                        op.fc_length(TRAN_NO) || ',' || TRAN_NO ||
                        op.fc_length(BANK_CD) || ',' || BANK_CD ||
                        op.fc_length(ACCOUNT_NO) || ',' || ACCOUNT_NO ||
                       --           op.fc_length(substr2(ACCOUNT_NO,0,4)||REGEXP_REPLACE(substr2(ACCOUNT_NO,5,4),'[0-9]','*')||substr2(ACCOUNT_NO,9, LENGTH2(ACCOUNT_NO)-8))||
                       --             ','||substr2(ACCOUNT_NO,0,4)||REGEXP_REPLACE(substr2(ACCOUNT_NO,5,4),'[0-9]','*')||substr2(ACCOUNT_NO,9, LENGTH2(ACCOUNT_NO)-8)||
                        op.fc_length(DEAL_TYPE) || ',' || DEAL_TYPE ||
                        op.fc_length(LTRIM(TO_CHAR(DEALAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEALAMT, '999,999,999')) ||
                        op.fc_length(OFF) || ',' || OFF LIST_DATA
                FROM (SELECT NO.BRANCH_CD,
                             TRIM(MAC.MAC_NM) MAC_NM,
                             MAC.MAC_NO,
                             substr2(NO.DEAL_DATE, 5, 2) || '월 ' ||
                             substr2(NO.DEAL_DATE, 7, 2) || '일' DEAL_DATE,
                             NO.TRAN_NO,
                             NO.BANK_CD || '(' || substr2(ORG.ORG_NM, 1, 2) || ')' BANK_CD,
                             NVL(OP.FC_FN_SECURITY(NO.ACCOUNT_NO, '2'),
                                 '0000000000000000') ACCOUNT_NO,
                             COM.CD_NM DEAL_TYPE,
                             NO.DEAL_AMT / 1000 DEALAMT,
                             substr2(OFF.OFFICE_NM, 1, 2) OFF
                      FROM OP.T_FN_NOTEND NO,
                           OP.T_CM_ORG    ORG,
                           OP.T_CM_MAC    MAC,
                           OP.T_CM_COMMON COM,
                           OP.T_CM_OFFICE OFF,
                           OP.T_CM_SITE   SITE
                      WHERE NO.ORG_CD = MAC.ORG_CD
                            AND NO.BRANCH_CD = MAC.BRANCH_CD
                            AND NO.MAC_NO = MAC.MAC_NO
                            AND NO.BANK_CD = ORG.ORG_CD
                            AND MAC.ORG_CD = SITE.ORG_CD
                            AND MAC.BRANCH_CD = SITE.BRANCH_CD
                            AND MAC.SITE_CD = SITE.SITE_CD
                            AND SITE.DEPT_CD = OFF.DEPT_CD
                            AND SITE.OFFICE_CD = OFF.OFFICE_CD
                            AND COM.LARGE_CD = '5103'
                            AND COM.SMALL_CD = NO.DEAL_TYPE
                            AND NO.NOTEND_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND NO.NOTEND_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND NO.ORG_CD = PORGCD
                            AND NO.BRANCH_CD = PBRANCHCD
                            AND NO.OWNER_ORG_CD <> '096'
                      ORDER BY BRANCH_CD,
                               MAC_NO)
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT) / 1000, 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT) / 1000, 0), '999,999,999'))
      INTO VFD_TEMP1
      FROM OP.T_FN_NOTEND NO,
           OP.T_CM_ORG    ORG,
           OP.T_CM_MAC    MAC,
           OP.T_CM_COMMON COM,
           OP.T_CM_OFFICE OFF
      WHERE NO.ORG_CD = MAC.ORG_CD
            AND NO.BRANCH_CD = MAC.BRANCH_CD
            AND NO.MAC_NO = MAC.MAC_NO
            AND NO.BANK_CD = ORG.ORG_CD
            AND NO.DEPT_CD = OFF.DEPT_CD
            AND NO.OFFICE_CD = OFF.OFFICE_CD
            AND COM.LARGE_CD = '5103'
            AND COM.SMALL_CD = NO.DEAL_TYPE
            AND NO.NOTEND_DATE >= OP.SF_GETPREACTDATE(PDATE)
            AND NO.NOTEND_DATE <= OP.SF_GETBEFOREDATE(PDATE)
            AND NO.ORG_CD = PORGCD
            AND NO.BRANCH_CD = PBRANCHCD
            AND NO.OWNER_ORG_CD <> '096';
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NotendForGH',
                                          VRESULT,
                                          PDATE);
  
  END SP_NOTENDFORGH;

  -- 국민 지원센타용 미완료내역
  PROCEDURE SP_NOTENDFORKB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                           PFAXCD    IN VARCHAR2,
                           PPAGENO   IN NUMBER,
                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
  
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT  NUMBER := 0;
    VT_T   NUMBER := 0;
    VT_OP  NUMBER := 0;
    VT_OU  NUMBER := 0;
    VT_IN  NUMBER := 0;
    VTJ_PT NUMBER := 0;
    VTJ_T  NUMBER := 0;
    VTJ_OP NUMBER := 0;
    VTJ_OU NUMBER := 0;
    VTJ_IN NUMBER := 0;
    VTB_D  NUMBER := 0;
    VTJB_D NUMBER := 0;
    VA_S   NUMBER := 0;
    VA_C   NUMBER := 0;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --미완료 오류명세서 거래  NotendForKB
    
      -- header  
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM (SELECT ORG_NM || BRANCH_NM ORG_NM
            FROM OP.T_CM_ORG    ORG,
                 OP.T_CM_BRANCH JUM
            WHERE ORG.ORG_CD = JUM.ORG_CD
                  AND JUM.ORG_CD = PORGCD
                  AND JUM.BRANCH_CD = PBRANCHCD);
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ---------------------------------------------------------
      --list
    
      FOR K IN (SELECT op.fc_length(VARCHAR(ROWNUM)) || ',' || ROWNUM ||
                        op.fc_length(BRANCH_CD) || ',' || BRANCH_CD ||
                        op.fc_length(MAC_NM) || ',' || MAC_NM || op.fc_length(MAC_NO) || ',' ||
                        MAC_NO || op.fc_length(DEAL_DATE) || ',' || DEAL_DATE ||
                        op.fc_length(TRAN_NO) || ',' || TRAN_NO ||
                        op.fc_length(BANK_CD) || ',' || BANK_CD ||
                        op.fc_length(ACCOUNT_NO) || ',' || ACCOUNT_NO ||
                       --           op.fc_length(substr2(ACCOUNT_NO,0,4)||REGEXP_REPLACE(substr2(ACCOUNT_NO,5,4),'[0-9]','*')||substr2(ACCOUNT_NO,9, LENGTH2(ACCOUNT_NO)-8))||
                       --             ','||substr2(ACCOUNT_NO,0,4)||REGEXP_REPLACE(substr2(ACCOUNT_NO,5,4),'[0-9]','*')||substr2(ACCOUNT_NO,9, LENGTH2(ACCOUNT_NO)-8)||
                        op.fc_length(DEAL_TYPE) || ',' || DEAL_TYPE ||
                        op.fc_length(LTRIM(TO_CHAR(DEALAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEALAMT, '999,999,999')) ||
                        op.fc_length(OFF) || ',' || OFF LIST_DATA
                FROM (SELECT NO.BRANCH_CD,
                             TRIM(MAC.MAC_NM) MAC_NM,
                             MAC.MAC_NO,
                             substr2(NO.DEAL_DATE, 5, 2) || '월 ' ||
                             substr2(NO.DEAL_DATE, 7, 2) || '일' DEAL_DATE,
                             NO.TRAN_NO,
                             NO.BANK_CD || '(' || substr2(ORG.ORG_NM, 1, 2) || ')' BANK_CD,
                             NVL(OP.FC_FN_SECURITY(NO.ACCOUNT_NO, '2'),
                                 '0000000000000000') ACCOUNT_NO,
                             COM.CD_NM DEAL_TYPE,
                             NO.DEAL_AMT / 1000 DEALAMT,
                             substr2(OFF.OFFICE_NM, 1, 2) OFF
                      FROM OP.T_FN_NOTEND NO,
                           OP.T_CM_ORG    ORG,
                           OP.T_CM_MAC    MAC,
                           OP.T_CM_COMMON COM,
                           OP.T_CM_OFFICE OFF,
                           OP.T_CM_SITE   SITE
                      WHERE NO.ORG_CD = MAC.ORG_CD
                            AND NO.BRANCH_CD = MAC.BRANCH_CD
                            AND NO.MAC_NO = MAC.MAC_NO
                            AND NO.BANK_CD = ORG.ORG_CD
                            AND MAC.ORG_CD = SITE.ORG_CD
                            AND MAC.BRANCH_CD = SITE.BRANCH_CD
                            AND MAC.SITE_CD = SITE.SITE_CD
                            AND SITE.DEPT_CD = OFF.DEPT_CD
                            AND SITE.OFFICE_CD = OFF.OFFICE_CD
                            AND COM.LARGE_CD = '5103'
                            AND COM.SMALL_CD = NO.DEAL_TYPE
                            AND NO.NOTEND_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND NO.NOTEND_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND NO.ORG_CD = PORGCD
                            AND NO.BRANCH_CD = PBRANCHCD
                            AND NO.OWNER_ORG_CD <> '096'
                      ORDER BY BRANCH_CD,
                               MAC_NO)
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT) / 1000, 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(NO.DEAL_AMT) / 1000, 0), '999,999,999'))
      INTO VFD_TEMP1
      FROM OP.T_FN_NOTEND NO,
           OP.T_CM_ORG    ORG,
           OP.T_CM_MAC    MAC,
           OP.T_CM_COMMON COM,
           OP.T_CM_OFFICE OFF
      WHERE NO.ORG_CD = MAC.ORG_CD
            AND NO.BRANCH_CD = MAC.BRANCH_CD
            AND NO.MAC_NO = MAC.MAC_NO
            AND NO.BANK_CD = ORG.ORG_CD
            AND NO.DEPT_CD = OFF.DEPT_CD
            AND NO.OFFICE_CD = OFF.OFFICE_CD
            AND COM.LARGE_CD = '5103'
            AND COM.SMALL_CD = NO.DEAL_TYPE
            AND NO.NOTEND_DATE >= OP.SF_GETPREACTDATE(PDATE)
            AND NO.NOTEND_DATE <= OP.SF_GETBEFOREDATE(PDATE)
            AND NO.ORG_CD = PORGCD
            AND NO.BRANCH_CD = PBRANCHCD
            AND NO.OWNER_ORG_CD <> '096';
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NotendForKB',
                                          VRESULT,
                                          PDATE);
  
  END SP_NOTENDFORKB;

  -- 국민 지원센타용 추가현송내역
  PROCEDURE SP_PLUSSENDFORKB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                             PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                             PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                             PFAXCD    IN VARCHAR2,
                             PPAGENO   IN NUMBER,
                             PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
  
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT  NUMBER := 0;
    VT_T   NUMBER := 0;
    VT_OP  NUMBER := 0;
    VT_OU  NUMBER := 0;
    VT_IN  NUMBER := 0;
    VTJ_PT NUMBER := 0;
    VTJ_T  NUMBER := 0;
    VTJ_OP NUMBER := 0;
    VTJ_OU NUMBER := 0;
    VTJ_IN NUMBER := 0;
    VTB_D  NUMBER := 0;
    VTJB_D NUMBER := 0;
    VA_S   NUMBER := 0;
    VA_C   NUMBER := 0;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --국민 지원센타 추가내역  PlusSendForKB
    
      -- header  
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM (SELECT ORG_NM || BRANCH_NM ORG_NM
            FROM OP.T_CM_ORG    ORG,
                 OP.T_CM_BRANCH JUM
            WHERE ORG.ORG_CD = JUM.ORG_CD
                  AND JUM.ORG_CD = PORGCD
                  AND JUM.BRANCH_CD = PBRANCHCD);
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                      'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                              'yyyymmdd'),
                      'yyyy-mm-dd') ||
             --            op.fc_length(' ~ ')||','||' ~ '||        
              op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                      'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                              'yyyymmdd'),
                      'yyyy-mm-dd') BASE_DATE
      
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ---------------------------------------------------------
      --list
    
      FOR K IN (SELECT op.fc_length(VARCHAR(ROWNUM)) || ',' || ROWNUM ||
                       op.fc_length(BRANCH_CD) || ',' || BRANCH_CD ||
                       op.fc_length(MAC_NM) || ',' || MAC_NM || op.fc_length(MAC_NO) || ',' ||
                       MAC_NO || op.fc_length(DEAL_DATE) || ',' || DEAL_DATE ||
                       op.fc_length(LTRIM(TO_CHAR(AMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(AMT, '999,999,999')) || op.fc_length(OFF) || ',' || OFF LIST_DATA
                FROM (SELECT MAC.BRANCH_CD,
                             MAC.MAC_NM,
                             MAC.MAC_NO,
                             substr2(SEND.SEND_DATE, 5, 2) || '월 ' ||
                             substr2(SEND.SEND_DATE, 7, 2) || '일' DEAL_DATE,
                             SEND.SEND_AMT / 1000 AMT,
                             substr2(OFF.OFFICE_NM, 1, 2) OFF
                      FROM OP.T_FN_SEND   SEND,
                           OP.T_CM_MAC    MAC,
                           OP.T_CM_OFFICE OFF,
                           OP.T_CM_SITE   SITE
                      WHERE SEND_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND SEND_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND SEND.ORG_CD = MAC.ORG_CD
                            AND SEND.BRANCH_CD = MAC.BRANCH_CD
                            AND SEND.MAC_NO = MAC.MAC_NO
                            AND MAC.ORG_CD = SITE.ORG_CD
                            AND MAC.BRANCH_CD = SITE.BRANCH_CD
                            AND MAC.SITE_CD = SITE.SITE_CD
                            AND SITE.DEPT_CD = OFF.DEPT_CD
                            AND SITE.OFFICE_CD = OFF.OFFICE_CD
                            AND SEND.SEND_STATUS = '2'
                            AND SEND.SEND_TYPE = '2'
                            AND SEND.SEND_AMT <> 0
                            AND SEND.ORG_CD = PORGCD
                            AND SEND.BRANCH_CD = PBRANCHCD
                      ORDER BY BRANCH_CD,
                               MAC_NO)
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_AMT) / 1000, 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_AMT) / 1000, 0), '999,999,999'))
      INTO VFD_TEMP1
      FROM OP.T_FN_SEND   SEND,
           OP.T_CM_MAC    MAC,
           OP.T_CM_OFFICE OFF
      WHERE SEND_DATE >= OP.SF_GETPREACTDATE(PDATE)
            AND SEND_DATE <= OP.SF_GETBEFOREDATE(PDATE)
            AND SEND.ORG_CD = MAC.ORG_CD
            AND SEND.BRANCH_CD = MAC.BRANCH_CD
            AND SEND.MAC_NO = MAC.MAC_NO
            AND SEND.DEPT_CD = OFF.DEPT_CD
            AND SEND.OFFICE_CD = OFF.OFFICE_CD
            AND SEND.SEND_STATUS = '2'
            AND SEND.SEND_TYPE = '2'
            AND SEND.SEND_AMT <> 0
            AND SEND.ORG_CD = PORGCD
            AND SEND.BRANCH_CD = PBRANCHCD;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PlusSendForKB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PLUSSENDFORKB;

  PROCEDURE SP_NICEOPAMTREQ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                            PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                            PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                            PFAXCD    IN VARCHAR2,
                            PPAGENO   IN NUMBER,
                            PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReq
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      --         select op.fc_length(to_char(sysdate,'yyyy-mm-dd'))||','||to_char(sysdate,'yyyy-mm-dd')  BASE_DATE  
      --        into   vFd_temp     
      --         from dual;         
    
      --         vFd_hd :=  vFd_hd||vFd_temp;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                                  DECODE(DE.USE_DAYS,
                                                                       1,
                                                                       RA.ORD_CNT_RATE,
                                                                       WKD_CNT_RATE) / 100),
                                                  '999,999.9999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                          DECODE(DE.USE_DAYS,
                                                               1,
                                                               RA.ORD_CNT_RATE,
                                                               WKD_CNT_RATE) / 100),
                                          '999,999.9999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,999.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,999.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_CNT_RATE,
                                                         WKD_CNT_RATE),
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_CNT_RATE,
                                                 WKD_CNT_RATE),
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3) * (1 +
                                                              (DECODE(DE.USE_DAYS,
                                                                      1,
                                                                      RA.ORD_AMT_RATE,
                                                                      RA.WKD_AMT_RATE)) / 100)),
                                                  '999,999.9999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3) * (1 +
                                                      (DECODE(DE.USE_DAYS,
                                                              1,
                                                              RA.ORD_AMT_RATE,
                                                              RA.WKD_AMT_RATE)) / 100)),
                                          '999,999.9999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3)),
                                                  '999,999.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3)),
                                          '999,999.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_AMT_RATE,
                                                         RA.WKD_AMT_RATE),
                                                  '99999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_AMT_RATE,
                                                 RA.WKD_AMT_RATE),
                                          '99999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99'))) ||
                      
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999'))) ||
                      
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                                  YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                          YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      
                      op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd')) || ',' ||
                      TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd')
      
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT COUNT(*)
      INTO VCNT
      FROM OP.T_CM_ORG
      WHERE ORG_CD = KFTC_ORG_CD
            AND TRAN_YN = '1'
            AND ORG_CD = PORGCD;
    
      IF VCNT > 0 THEN
        /*
          select op.fc_length(case when org_cd is null then ' '  else  '마. 입금계좌' end)||','||case when org_cd is null then ' '  else  '마. 입금계좌' end ||
          op.fc_length(case when org_cd is null then ' '  else  '- 은  행  명 :' end)||','||case when org_cd is null then ' '  else  '- 은  행  명 :' end ||
          op.fc_length(case when org_cd is null then ' '  when pOrgCd ='HM' then '한미은행' when pOrgCd='45' then '새마을금고' else org_nm end)||','||
          case when org_cd is null then ' '  when pOrgCd ='HM' then '한미은행' when pOrgCd='45' then '새마을금고' else org_nm end ||
          op.fc_length(case when org_cd is null then ' '  else  '- 예  금  주 :' end)||','||case when org_cd is null then ' '  else  '- 예  금  주 :' end                
         into vFd_temp
         from 
          OP.t_cm_org 
         where 
          org_cd = kftc_org_cd
          and tran_yn = '1'
          and org_cd=pOrgCd;
        */
        SELECT op.fc_length(CASE
                         WHEN O.ORG_CD IS NULL THEN
                          ' '
                         ELSE
                          '마. 입금계좌'
                       END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '마. 입금계좌'
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 은  행  명 :'
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 은  행  명 :'
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                WHEN PORGCD = '0HM' THEN
                                 '씨티은행'
                                WHEN PORGCD = '045' THEN
                                 '새마을금고'
                                WHEN PORGCD = '0CU' THEN
                                 '하나은행'
                                WHEN PORGCD = '0HN' THEN
                                 '하나은행'
                                ELSE
                                 O.ORG_NM
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 WHEN PORGCD = '0HM' THEN
                  '씨티은행'
                 WHEN PORGCD = '045' THEN
                  '새마을금고'
                 WHEN PORGCD = '0CU' THEN
                  '하나은행'
                 WHEN PORGCD = '0HN' THEN
                  '하나은행'
                 ELSE
                  O.ORG_NM
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 예  금  주 :'
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 예  금  주 :'
               END
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_ACCOUNT A,
             OP.T_CM_ORG          O
        WHERE A.ORG_CD = O.ORG_CD;
      
      ELSE
        SELECT lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' '
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_ACCOUNT A,
           OP.T_CM_ORG O,
           (SELECT ORG_CD
            FROM OP.T_CM_ORG
            WHERE ORG_CD = KFTC_ORG_CD
                  AND TRAN_YN = '1'
                  AND ORG_CD = PORGCD) B
      WHERE A.ORG_CD = O.ORG_CD;
    
      IF VCNT > 0 THEN
        SELECT op.fc_length(CASE
                         WHEN B.ORG_CD IS NULL THEN
                          ' '
                         ELSE
                          A.ACCOUNT_PERSON
                       END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  A.ACCOUNT_PERSON
               END || op.fc_length(CASE
                                WHEN B.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 계좌번호  :'
                              END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 계좌번호  :'
               END || op.fc_length(CASE
                                WHEN B.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 CASE
                                   WHEN PORGCD = '0HM' THEN
                                    '101-52061-248'
                                   WHEN PORGCD = '045' THEN
                                    '0006-801-860001-1'
                                   WHEN PORGCD = '0CU' THEN
                                    '147-169475-00404'
                                   WHEN PORGCD = '0HN' THEN
                                    '147-169475-00404'
                                   ELSE
                                    OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')
                                 END
                              END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  CASE
                    WHEN PORGCD = '0HM' THEN
                     '101-52061-248'
                    WHEN PORGCD = '045' THEN
                     '0006-801-860001-1'
                    WHEN PORGCD = '0CU' THEN
                     '147-169475-00404'
                    WHEN PORGCD = '0HN' THEN
                     '147-169475-00404'
                    ELSE
                     OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')
                  END
               END END
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_ACCOUNT A,
             OP.T_CM_ORG O,
             (SELECT ORG_CD
              FROM OP.T_CM_ORG
              WHERE ORG_CD = KFTC_ORG_CD
                    AND TRAN_YN = '1'
                    AND ORG_CD = PORGCD) B
        WHERE A.ORG_CD = O.ORG_CD;
      ELSE
        SELECT lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' '
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
      SELECT op.fc_length(NVL(NICE_RCV_PART, '') || ' ' ||
                     NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PART, '') || ' ' || NVL(NICE_RCV_PERSON, '')
      
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_L1   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReq',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQ;

  PROCEDURE SP_NICEOPAMTREQFORFI(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 제일브랜드 NiceOpAmtReqForFI
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      --         select op.fc_length(to_char(sysdate,'yyyy-mm-dd'))||','||to_char(sysdate,'yyyy-mm-dd')  BASE_DATE  
      --        into   vFd_temp     
      --         from dual;         
    
      --         vFd_hd :=  vFd_hd||vFd_temp;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                                  DECODE(DE.USE_DAYS,
                                                                       1,
                                                                       RA.ORD_CNT_RATE,
                                                                       WKD_CNT_RATE) / 100),
                                                  '999,990.999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                          DECODE(DE.USE_DAYS,
                                                               1,
                                                               RA.ORD_CNT_RATE,
                                                               WKD_CNT_RATE) / 100),
                                          '999,990.999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,990.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,990.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_CNT_RATE,
                                                         WKD_CNT_RATE),
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_CNT_RATE,
                                                 WKD_CNT_RATE),
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3) * (1 +
                                                              (DECODE(DE.USE_DAYS,
                                                                      1,
                                                                      RA.ORD_AMT_RATE,
                                                                      RA.WKD_AMT_RATE)) / 100)),
                                                  '999,999.9999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3) * (1 +
                                                      (DECODE(DE.USE_DAYS,
                                                              1,
                                                              RA.ORD_AMT_RATE,
                                                              RA.WKD_AMT_RATE)) / 100)),
                                          '999,999.9999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3)),
                                                  '999,999.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(INT(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3)),
                                          '999,999.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_AMT_RATE,
                                                         RA.WKD_AMT_RATE),
                                                  '99999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_AMT_RATE,
                                                 RA.WKD_AMT_RATE),
                                          '99999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99'))) ||
                      
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999'))) ||
                      
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                                  YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                          YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      
                      op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd')) || ',' ||
                      TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd')
      
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(RTRIM(LTRIM(TO_CHAR(AMT, '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(AMT, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(TOTAMT, '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(TOTAMT, '999,999,999')))
      INTO VFD_TEMP
      FROM (SELECT B.AMT,
                   (A.AMT - B.AMT) TOTAMT
            FROM (SELECT DEMAND_AMT / 1000 AMT
                  FROM OP.T_FN_NICE_DEMAND
                  WHERE DEMAND_DATE = PDATE
                        AND ORG_CD = PORGCD) A,
                 (SELECT NVL(SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT),
                             0) / 1000 AMT
                  FROM OP.T_FN_NICE_JEIL_BRADN_DSUM
                  WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                        AND
                        DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                        AND DEAL_TYPE = '0') B);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '') || ' ' ||
                     NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PART, '') || ' ' || NVL(NICE_RCV_PERSON, '')
      
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_L1   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForFI',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORFI;

  PROCEDURE SP_NICEOPAMTREQHANA(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                PFAXCD    IN VARCHAR2,
                                PPAGENO   IN NUMBER,
                                PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqHana
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(FINAL.STD_DATE, 5, 2) || '/' ||
                               substr2(FINAL.STD_DATE, 7, 2)) || ',' ||
                       substr2(FINAL.STD_DATE, 5, 2) || '/' ||
                       substr2(FINAL.STD_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(FINAL.MAC_CNT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(FINAL.MAC_CNT, '999,999,999')) ||
                       op.fc_length(FINAL.RESPECTCNT) || ',' || FINAL.RESPECTCNT ||
                       op.fc_length(ROUND(FINAL.AVG_CNT, 2)) || ',' ||
                       ROUND(FINAL.AVG_CNT, 2) || op.fc_length(FINAL.CNTRATE) || ',' ||
                       FINAL.CNTRATE || op.fc_length(FINAL.RESPECTAMT) || ',' ||
                       FINAL.RESPECTAMT || op.fc_length(FINAL.AVG_AMT) || ',' ||
                       FINAL.AVG_AMT || op.fc_length(FINAL.AMTRATE) || ',' ||
                       FINAL.AMTRATE || op.fc_length(FINAL.DEMANDCNT) || ',' ||
                       FINAL.DEMANDCNT ||
                       op.fc_length(LTRIM(TO_CHAR(INT(ROUND(FINAL.MAC_CNT *
                                                   FINAL.RESPECTCNT *
                                                   FINAL.RESPECTAMT *
                                                   FINAL.DEMANDCNT,
                                                   -1)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(INT(ROUND(FINAL.MAC_CNT * FINAL.RESPECTCNT *
                                           FINAL.RESPECTAMT *
                                           FINAL.DEMANDCNT,
                                           -1)),
                                     '999,999,999')) LIST_DATA
                
                FROM (SELECT RESULT.STD_DATE,
                             RESULT.HOLIDAY_YN,
                             RESULT.MAC_CNT,
                             RESULT.AVG_CNT * ((100 + RESULT.CNTRATE) / 100) RESPECTCNT,
                             RESULT.AVG_CNT,
                             RESULT.CNTRATE,
                             (RESULT.AVG_AMT / 1000) *
                             ((100 + RESULT.AMTRATE) / 100) RESPECTAMT,
                             RESULT.AVG_AMT / 1000 AVG_AMT,
                             RESULT.AMTRATE,
                             RESULT.DEMANDCNT
                      FROM (SELECT MAIN.STD_DATE,
                                   HOLIDAY_YN,
                                   DEMAND.MAC_CNT,
                                   MTH.AVG_CNT,
                                   DECODE(HOLIDAY_YN,
                                          '0',
                                          ORD_CNT_RATE,
                                          '1',
                                          WKD_CNT_RATE,
                                          0) CNTRATE,
                                   MTH.AVG_AMT,
                                   DECODE(HOLIDAY_YN,
                                          '0',
                                          ORD_AMT_RATE,
                                          '1',
                                          WKD_AMT_RATE,
                                          0) AMTRATE,
                                   1 DEMANDCNT
                            FROM (SELECT STD_DATE,
                                         HOLIDAY_YN
                                  FROM OP.T_FN_CALENDAR
                                  WHERE (SELECT START_DATE
                                         FROM OP.T_FN_NICE_DEMAND
                                         WHERE DEMAND_DATE = PDATE
                                               AND ORG_CD = PORGCD) <= STD_DATE
                                        AND
                                        (SELECT END_DATE
                                         FROM OP.T_FN_NICE_DEMAND
                                         WHERE DEMAND_DATE = PDATE
                                               AND ORG_CD = PORGCD) >= STD_DATE) MAIN,
                                 (SELECT *
                                  FROM OP.T_FN_NICE_DEMAND
                                  WHERE DEMAND_DATE = PDATE
                                        AND ORG_CD = PORGCD) DEMAND,
                                 (SELECT *
                                  FROM OP.T_FN_NICE_MONTHLY_OPER
                                  WHERE START_DATE <= PDATE
                                        AND END_DATE >= PDATE
                                        AND ORG_CD = PORGCD) MTH,
                                 (SELECT *
                                  FROM OP.T_FN_ORG_SPARE_RATE
                                  WHERE ORG_CD = PORGCD
                                        AND PDATE BETWEEN START_DATE AND
                                        END_DATE) SPR) RESULT) FINAL) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      --list 2        
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(FINAL.DEMANDCNT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(FINAL.DEMANDCNT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INT(SUM(ROUND(FINAL.MAC_CNT *
                                             FINAL.RESPECTCNT *
                                             FINAL.RESPECTAMT *
                                             FINAL.DEMANDCNT,
                                             -1))),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INT(SUM(ROUND(FINAL.MAC_CNT * FINAL.RESPECTCNT *
                                     FINAL.RESPECTAMT * FINAL.DEMANDCNT,
                                     -1))),
                           '999,999,999'))
      INTO VFD_L2
      FROM (SELECT RESULT.STD_DATE,
                   RESULT.HOLIDAY_YN,
                   RESULT.MAC_CNT,
                   RESULT.AVG_CNT * ((100 + RESULT.CNTRATE) / 100) RESPECTCNT,
                   RESULT.AVG_CNT,
                   RESULT.CNTRATE,
                   (RESULT.AVG_AMT / 1000) * ((100 + RESULT.AMTRATE) / 100) RESPECTAMT,
                   RESULT.AVG_AMT / 1000 AVG_AMT,
                   RESULT.AMTRATE,
                   RESULT.DEMANDCNT
            FROM (SELECT MAIN.STD_DATE,
                         HOLIDAY_YN,
                         DEMAND.MAC_CNT,
                         MTH.AVG_CNT,
                         DECODE(HOLIDAY_YN,
                                '0',
                                ORD_CNT_RATE,
                                '1',
                                WKD_CNT_RATE,
                                0) CNTRATE,
                         MTH.AVG_AMT,
                         DECODE(HOLIDAY_YN,
                                '0',
                                ORD_AMT_RATE,
                                '1',
                                WKD_AMT_RATE,
                                0) AMTRATE,
                         1 DEMANDCNT
                  FROM (SELECT STD_DATE,
                               HOLIDAY_YN
                        FROM OP.T_FN_CALENDAR
                        WHERE (SELECT START_DATE
                               FROM OP.T_FN_NICE_DEMAND
                               WHERE DEMAND_DATE = PDATE
                                     AND ORG_CD = PORGCD) <= STD_DATE
                              AND (SELECT END_DATE
                                   FROM OP.T_FN_NICE_DEMAND
                                   WHERE DEMAND_DATE = PDATE
                                         AND ORG_CD = PORGCD) >= STD_DATE) MAIN,
                       (SELECT *
                        FROM OP.T_FN_NICE_DEMAND
                        WHERE DEMAND_DATE = PDATE
                              AND ORG_CD = PORGCD) DEMAND,
                       (SELECT *
                        FROM OP.T_FN_NICE_MONTHLY_OPER
                        WHERE START_DATE <= PDATE
                              AND END_DATE >= PDATE
                              AND ORG_CD = PORGCD) MTH,
                       (SELECT *
                        FROM OP.T_FN_ORG_SPARE_RATE
                        WHERE ORG_CD = PORGCD
                              AND PDATE BETWEEN START_DATE AND END_DATE) SPR) RESULT) FINAL;
    
      --list 2-1
    
      FOR L IN (SELECT op.fc_length(substr2(MAIN.DETAIL_DATE, 5, 2) || '/' ||
                               substr2(MAIN.DETAIL_DATE, 7, 2)) || ',' ||
                       substr2(MAIN.DETAIL_DATE, 5, 2) || '/' ||
                       substr2(MAIN.DETAIL_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(DECODE(MAIN.HOLIDAY_YN,
                                                    '0',
                                                    SUB.RESULT,
                                                    MAIN.OPER_AMT),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DECODE(MAIN.HOLIDAY_YN,
                                            '0',
                                            SUB.RESULT,
                                            MAIN.OPER_AMT),
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DETAIL_DATE,
                             HOLIDAY_YN,
                             OPER_AMT
                      FROM OP.T_FN_NICE_DETAIL_DEMAND
                      WHERE ORG_CD = PORGCD
                            AND DETAIL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DETAIL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)) MAIN,
                     (SELECT NVL((DMD.YST_AMT / 1000 - NVL(MAIN.OPER_AMT, 0)),
                                 0) RESULT
                      FROM (SELECT SUM(OPER_AMT) OPER_AMT
                            FROM OP.T_FN_NICE_DETAIL_DEMAND
                            WHERE ORG_CD = PORGCD
                                  AND HOLIDAY_YN = '1'
                                  AND DETAIL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DETAIL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)) MAIN,
                           (SELECT YST_AMT
                            FROM OP.T_FN_NICE_DEMAND
                            WHERE ORG_CD = PORGCD
                                  AND DEMAND_DATE = PDATE) DMD) SUB
                ORDER BY MAIN.DETAIL_DATE) LOOP
      
        VFD_L2 := VFD_L2 || L.LIST_DATA;
      
      END LOOP;
    
      --list 3
    
      FOR M IN (SELECT op.fc_length(substr2(MAIN.DETAIL_DATE, 5, 2) || '/' ||
                               substr2(MAIN.DETAIL_DATE, 7, 2)) || ',' ||
                       substr2(MAIN.DETAIL_DATE, 5, 2) || '/' ||
                       substr2(MAIN.DETAIL_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(MAIN.OPER_AMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(MAIN.OPER_AMT, '999,999,999')) LIST_DATA
                FROM (SELECT (CASE
                               WHEN RESULT <= 0 THEN
                                1
                               ELSE
                                RESULT
                             END) RESULT
                      FROM (SELECT TO_NUMBER(PRE.VPRESTARTDAY - BEFORE.VPREDAY) RESULT
                            FROM (SELECT SUM(INVENT_DAY) VPRESTARTDAY
                                  FROM OP.T_FN_DEMAND_CALENDAR
                                  WHERE STD_DATE BETWEEN
                                        OP.SF_GETBEFOREPREACTDATE(PDATE) AND
                                        OP.SF_GETPREACTDATE(PDATE)
                                        AND ORG_CD = PORGCD) PRE,
                                 
                                 (SELECT TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                                 'YYYYMMDD') -
                                         TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                                 'YYYYMMDD') + 1 VPREDAY
                                  FROM DUAL) BEFORE)) SUB,
                     OP.T_FN_NICE_DETAIL_DEMAND MAIN
                WHERE DETAIL_DATE >= PDATE
                      AND
                      DETAIL_DATE <=
                      TO_CHAR((TO_DATE(PDATE, 'YYYYMMDD') + (SUB.RESULT - 1)),
                              'YYYYMMDD')
                ORDER BY DETAIL_DATE) LOOP
      
        VFD_L3 := VFD_L3 || M.LIST_DATA;
      
      END LOOP;
    
      VFD_TEMP := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD = PORGCD;
    
      VFD_L4 := VFD_L4 || VFD_TEMP;
    
      VFD_TEMP := '';
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DECODE(MAIN.HOLIDAY_YN,
                                              '0',
                                              SUB.RESULT,
                                              MAIN.OPER_AMT)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DECODE(MAIN.HOLIDAY_YN,
                                      '0',
                                      SUB.RESULT,
                                      MAIN.OPER_AMT)),
                           '999,999,999')),
             SUM(DECODE(MAIN.HOLIDAY_YN, '0', SUB.RESULT, MAIN.OPER_AMT)) AMT1
      INTO VFD_TEMP,
           VAMT1
      FROM (SELECT DETAIL_DATE,
                   HOLIDAY_YN,
                   OPER_AMT
            FROM OP.T_FN_NICE_DETAIL_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DETAIL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DETAIL_DATE <= OP.SF_GETBEFOREDATE(PDATE)) MAIN,
           
           (SELECT NVL((DMD.YST_AMT / 1000 - NVL(MAIN.OPER_AMT, 0)), 0) RESULT
            FROM (SELECT SUM(OPER_AMT) OPER_AMT
                  FROM OP.T_FN_NICE_DETAIL_DEMAND
                  WHERE ORG_CD = PORGCD
                        AND HOLIDAY_YN = '1'
                        AND
                        DETAIL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                        AND
                        DETAIL_DATE <= OP.SF_GETBEFOREDATE(PDATE)) MAIN,
                 (SELECT YST_AMT
                  FROM OP.T_FN_NICE_DEMAND
                  WHERE ORG_CD = PORGCD
                        AND DEMAND_DATE = PDATE) DMD) SUB;
      --ORDER BY MAIN.DETAIL_DATE;
    
      VFD_L4 := VFD_L4 || VFD_TEMP;
    
      VFD_TEMP := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAIN.OPER_AMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAIN.OPER_AMT), '999,999,999')),
             SUM(MAIN.OPER_AMT) AMT2
      INTO VFD_TEMP,
           VAMT2
      FROM (SELECT (CASE
                     WHEN RESULT <= 0 THEN
                      1
                     ELSE
                      RESULT
                   END) RESULT
            FROM (SELECT TO_NUMBER(PRE.VPRESTARTDAY - BEFORE.VPREDAY) RESULT
                  FROM (SELECT SUM(INVENT_DAY) VPRESTARTDAY
                        FROM OP.T_FN_DEMAND_CALENDAR
                        WHERE STD_DATE BETWEEN
                              OP.SF_GETBEFOREPREACTDATE(PDATE) AND
                              OP.SF_GETPREACTDATE(PDATE)
                              AND ORG_CD = PORGCD) PRE,
                       
                       (SELECT TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'YYYYMMDD') -
                               TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'YYYYMMDD') + 1 VPREDAY
                        FROM DUAL) BEFORE)) SUB,
           OP.T_FN_NICE_DETAIL_DEMAND MAIN
      WHERE DETAIL_DATE >= PDATE
            AND DETAIL_DATE <=
            TO_CHAR((TO_DATE(PDATE, 'YYYYMMDD') + (SUB.RESULT - 1)),
                        'YYYYMMDD');
    
      VFD_L4 := VFD_L4 || VFD_TEMP ||
                op.fc_length(LTRIM(TO_CHAR((VAMT1 + VAMT2), '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR((VAMT1 + VAMT2), '999,999,999'));
    
      VFD_TEMP := '';
      SELECT op.fc_length(LTRIM(TO_CHAR((YST_START_AMT / 1000) -
                                   (YST_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR((YST_START_AMT / 1000) - (YST_RESULT_AMT / 1000),
                           '999,999,999')) ||
             op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                            'yyyymmdd'),
                                    'yyyy.mm.dd') || '  24') || ',' || '(' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy.mm.dd') || '  24'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD = PORGCD;
    
      VFD_L4 := VFD_L4 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqHana',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQHANA;

  PROCEDURE SP_NICEOPAMTREQFORCN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과      
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqForCN
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(A.ORD_AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.ORD_AMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.WKD_AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.WKD_AMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.TIMEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.TIMEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.OTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.OTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(C.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(C.DEMANDAMT, '999,999,999')) CNAMT
      INTO VFD_TEMP
      FROM (SELECT ORG_CD,
                   NICE_ORD_AMT / 1000 * 2 ORD_AMT,
                   NICE_WKD_AMT / 1000 WKD_AMT
            FROM OP.T_FN_ORG_INFO
            WHERE ORG_CD IN ('0CN')) A,
           
           (SELECT ORG_CD,
                   SUM(TIME_DEAL_AMT) / 1000 TIMEAMT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD IN ('0CN')
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY ORG_CD) B,
           
           (SELECT ORG_CD,
                   DEMAND_AMT / 1000 DEMANDAMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD IN ('0CN')) C
      WHERE A.ORG_CD = B.ORG_CD
            AND A.ORG_CD = C.ORG_CD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(A.ORD_AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.ORD_AMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.WKD_AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.WKD_AMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.TIMEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.TIMEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.OTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.OTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(C.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(C.DEMANDAMT, '999,999,999')) BCAMT
      INTO VFD_TEMP
      FROM (SELECT ORG_CD,
                   NICE_ORD_AMT / 1000 * 2 ORD_AMT,
                   NICE_WKD_AMT / 1000 WKD_AMT
            FROM OP.T_FN_ORG_INFO
            WHERE ORG_CD IN ('0BC')) A,
           
           (SELECT ORG_CD,
                   SUM(TIME_DEAL_AMT) / 1000 TIMEAMT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD IN ('0BC')
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY ORG_CD) B,
           
           (SELECT ORG_CD,
                   DEMAND_AMT / 1000 DEMANDAMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD IN ('0BC')) C
      WHERE A.ORG_CD = B.ORG_CD
            AND A.ORG_CD = C.ORG_CD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0CN');
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0BC');
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForCN',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORCN;

  PROCEDURE SP_NICEOPAMTREQJJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                              PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                              PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                              PFAXCD    IN VARCHAR2,
                              PPAGENO   IN NUMBER,
                              PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과      
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqJJ
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD IN ('035')
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(DECODE(ORG_CD, '035', '예금인출', '서비스')) || ',' ||
                       DECODE(ORG_CD, '035', '예금인출', '서비스') ||
                       op.fc_length(LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999')) LIST_DATA
                FROM OP.T_FN_NICE_DEMAND
                WHERE DEMAND_DATE = PDATE
                      AND ORG_CD IN ('035', '0JJ')
                ORDER BY ORG_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
      --list 2
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))
      INTO VFD_L2
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('035', '0JJ');
      --      ORDER BY ORG_CD;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('035', '0JJ');
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --list 3
    
      FOR L IN (SELECT op.fc_length(substr2(C.STD_DATE, 5, 2)) || ',' ||
                       substr2(C.STD_DATE, 5, 2) ||
                       op.fc_length(substr2(C.STD_DATE, 7, 2)) || ',' ||
                       substr2(C.STD_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) +
                                             NVL(B.TOTCNT, 0)),
                                             '999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0)),
                                     '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) +
                                             NVL(B.TOTAMT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0)),
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = '035'
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) A,
                     
                     (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = '0JJ'
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) B,
                     
                     (SELECT STD_DATE
                      FROM OP.T_FN_CALENDAR
                      WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                            AND
                            STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)) C
                WHERE C.STD_DATE = A.DEAL_DATE(+)
                      AND C.STD_DATE = B.DEAL_DATE(+)) LOOP
      
        VFD_L3 := VFD_L3 || L.LIST_DATA;
      
      END LOOP;
    
      --list 4
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                                   '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                           '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                           '999,999,999'))
      INTO VFD_L4
      FROM (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = '035'
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) A,
           
           (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = '0JJ'
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) B,
           
           (SELECT STD_DATE
            FROM OP.T_FN_CALENDAR
            WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)) C
      WHERE C.STD_DATE = A.DEAL_DATE(+)
            AND C.STD_DATE = B.DEAL_DATE(+);
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqJJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQJJ;

  PROCEDURE SP_NICEOPAMTREQFORBJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과      
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqForBJ
    
      -- header  
    
      SELECT op.fc_length(NVL(substr2(NICE_RCV_PART, 1, 10), '')) || ',' ||
             NVL(substr2(NICE_RCV_PART, 1, 10), '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT --distinct
       op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
       op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(DECODE(ORG_CD,
                                      '0BJ',
                                      'JCB',
                                      '0BM',
                                      '마스터',
                                      '비자')) || ',' ||
                       DECODE(ORG_CD, '0BJ', 'JCB', '0BM', '마스터', '비자') ||
                       op.fc_length(LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999')) LIST_DATA
                FROM OP.T_FN_NICE_DEMAND
                WHERE DEMAND_DATE = PDATE
                      AND ORG_CD IN ('0BJ', '0BM', '0BV')
                ORDER BY ORG_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
      --list 2
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))
      INTO VFD_L2
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0BJ', '0BM', '0BV');
      --      ORDER BY ORG_CD;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0BJ', '0BM', '0BV');
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForBJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORBJ;

  PROCEDURE SP_NICEOPAMTREQLG(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                              PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                              PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                              PFAXCD    IN VARCHAR2,
                              PPAGENO   IN NUMBER,
                              PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과      
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqLG
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD IN ('0LG')
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(DECODE(ORG_CD, '0LG', '현금서비스', '카드론')) || ',' ||
                       DECODE(ORG_CD, '0LG', '현금서비스', '카드론') ||
                       op.fc_length(LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((OPER_AMT / USE_DAYS) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999')) LIST_DATA
                FROM OP.T_FN_NICE_DEMAND
                WHERE DEMAND_DATE = PDATE
                      AND ORG_CD IN ('0LG', '0LC')
                ORDER BY ORG_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
      --list 2
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((OPER_AMT / USE_DAYS) / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(TMR_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(RETURN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))
      INTO VFD_L2
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0LG', '0LC');
      --      ORDER BY ORG_CD;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('0LG', '0LC');
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --list 3
    
      FOR L IN (SELECT op.fc_length(substr2(C.STD_DATE, 5, 2)) || ',' ||
                       substr2(C.STD_DATE, 5, 2) ||
                       op.fc_length(substr2(C.STD_DATE, 7, 2)) || ',' ||
                       substr2(C.STD_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) +
                                             NVL(B.TOTCNT, 0)),
                                             '999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0)),
                                     '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) +
                                             NVL(B.TOTAMT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0)),
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = '0LG'
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) A,
                     
                     (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = '0LC'
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) B,
                     
                     (SELECT STD_DATE
                      FROM OP.T_FN_CALENDAR
                      WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                            AND
                            STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                      ORDER BY STD_DATE) C
                WHERE C.STD_DATE = A.DEAL_DATE(+)
                      AND C.STD_DATE = B.DEAL_DATE(+)) LOOP
      
        VFD_L3 := VFD_L3 || L.LIST_DATA;
      
      END LOOP;
    
      --list 4
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                                   '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                           '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                           '999,999,999'))
      INTO VFD_L4
      FROM (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = '0LG'
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) A,
           
           (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = '0LC'
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) B,
           
           (SELECT STD_DATE
            FROM OP.T_FN_CALENDAR
            WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)) C
      WHERE C.STD_DATE = A.DEAL_DATE(+)
            AND C.STD_DATE = B.DEAL_DATE(+);
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqLG',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQLG;

  --광주나이스 양식생성  2014.01.26 정희성
  PROCEDURE SP_NICEOPAMTREQKJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                              PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                              PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                              PFAXCD    IN VARCHAR2,
                              PPAGENO   IN NUMBER,
                              PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과      
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqKJ
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PERSON, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(DECODE(D.ORG_CD,
                                      '034',
                                      '예금인출',
                                      '0KJ',
                                      '현금서비스',
                                      '브랜드제휴')) || ',' ||
                       DECODE(D.ORG_CD,
                              '034',
                              '예금인출',
                              '0KJ',
                              '현금서비스',
                              '브랜드제휴') ||
                       op.fc_length(LTRIM(TO_CHAR(DECODE(D.USE_DAYS,
                                                    '1',
                                                    D.OPER_AMT * 2,
                                                    D.OPER_AMT + D.TMR_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DECODE(D.USE_DAYS,
                                            '1',
                                            D.OPER_AMT * 2,
                                            D.OPER_AMT + D.TMR_AMT) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(FO.NICE_ORD_AMT / 1000 * 2,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(FO.NICE_ORD_AMT / 1000 * 2,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DECODE(D.USE_DAYS,
                                                    '1',
                                                    0,
                                                    FO.NICE_WKD_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DECODE(D.USE_DAYS,
                                            '1',
                                            0,
                                            FO.NICE_WKD_AMT) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_START_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_START_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(YST_IN_RESULT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(YST_IN_RESULT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((YST_START_AMT - YST_RESULT_AMT +
                                             YST_IN_RESULT_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((YST_START_AMT - YST_RESULT_AMT +
                                     YST_IN_RESULT_AMT) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999')) LIST_DATA
                FROM OP.T_FN_NICE_DEMAND D,
                     OP.T_FN_ORG_INFO    FO
                WHERE D.DEMAND_DATE = PDATE
                      AND D.ORG_CD IN ('034', '0KJ', '0B4')
                      AND D.ORG_CD = FO.ORG_CD
                ORDER BY D.ORG_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
      --list 2
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DECODE(D.USE_DAYS,
                                              '1',
                                              D.OPER_AMT * 2,
                                              D.OPER_AMT + D.TMR_AMT) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DECODE(D.USE_DAYS,
                                      '1',
                                      D.OPER_AMT * 2,
                                      D.OPER_AMT + D.TMR_AMT) / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(FO.NICE_ORD_AMT / 1000 * 2),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(FO.NICE_ORD_AMT / 1000 * 2), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DECODE(D.USE_DAYS,
                                              '1',
                                              0,
                                              FO.NICE_WKD_AMT) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DECODE(D.USE_DAYS, '1', 0, FO.NICE_WKD_AMT) / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_RESULT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(YST_IN_RESULT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_IN_RESULT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((YST_START_AMT - YST_RESULT_AMT +
                                       YST_IN_RESULT_AMT) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((YST_START_AMT - YST_RESULT_AMT +
                               YST_IN_RESULT_AMT) / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT / 1000), '999,999,999'))
      INTO VFD_L2
      FROM OP.T_FN_NICE_DEMAND D,
           OP.T_FN_ORG_INFO    FO
      WHERE D.DEMAND_DATE = PDATE
            AND D.ORG_CD IN ('034', '0KJ', '0B4')
            AND D.ORG_CD = FO.ORG_CD;
      --      ORDER BY D.ORG_CD;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                                   SUM(YST_RESULT_AMT) / 1000 +
                                   SUM(YST_IN_RESULT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(YST_START_AMT) / 1000 -
                           SUM(YST_RESULT_AMT) / 1000 +
                           SUM(YST_IN_RESULT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
                     ' 24:00 기준') || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
             ' 24:00 기준'
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD IN ('034', '0KJ', '0B4');
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --list 3
    
      FOR L IN (SELECT op.fc_length(substr2(C.STD_DATE, 5, 2)) || ',' ||
                       substr2(C.STD_DATE, 5, 2) ||
                       op.fc_length(substr2(C.STD_DATE, 7, 2)) || ',' ||
                       substr2(C.STD_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.CNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) +
                                             NVL(B.TOTCNT, 0)),
                                             '999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0)),
                                     '999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.AMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) +
                                             NVL(B.TOTAMT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0)),
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD IN ('034', '0KJ', '0B4')
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) A,
                     
                     (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) / 1000 AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD IN ('034', '0KJ', '0B4')
                            AND DEAL_TYPE = '1'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) B,
                     
                     (SELECT STD_DATE
                      FROM OP.T_FN_CALENDAR
                      WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                            AND
                            STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                      ORDER BY STD_DATE) C
                WHERE C.STD_DATE = A.DEAL_DATE(+)
                      AND C.STD_DATE = B.DEAL_DATE(+)
                ORDER BY C.STD_DATE) LOOP
      
        VFD_L3 := VFD_L3 || L.LIST_DATA;
      
      END LOOP;
    
      --list 4
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                                   '999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTCNT, 0) + NVL(B.TOTCNT, 0))),
                           '999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((NVL(A.TOTAMT, 0) + NVL(B.TOTAMT, 0))),
                           '999,999,999'))
      INTO VFD_L4
      FROM (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD IN ('034', '0KJ', '0B4')
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) A,
           
           (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) / 1000 AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD IN ('034', '0KJ', '0B4')
                  AND DEAL_TYPE = '1'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) B,
           
           (SELECT STD_DATE
            FROM OP.T_FN_CALENDAR
            WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND STD_DATE <= OP.SF_GETBEFOREDATE(PDATE)) C
      WHERE C.STD_DATE = A.DEAL_DATE(+)
            AND C.STD_DATE = B.DEAL_DATE(+);
      --      ORDER BY C.STD_DATE;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqKJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQKJ;

  PROCEDURE SP_NICEOPAMTREQPOST(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                PFAXCD    IN VARCHAR2,
                                PPAGENO   IN NUMBER,
                                PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqPost
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
              op.fc_length(TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
              op.fc_length(TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
              op.fc_length(DE.USE_DAYS) || ',' || DE.USE_DAYS ||
              op.fc_length(LTRIM(TO_CHAR(INT(ROUND(OP.PRE_DAY_AMT, 0)), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(INT(ROUND(OP.PRE_DAY_AMT, 0)), '999,999,999')) ||
              op.fc_length(ROUND(RA.ORD_AMT_RATE, 0)) || ',' ||
              ROUND(RA.ORD_AMT_RATE, 0) || op.fc_length(DE.USE_DAYS) || ',' ||
              DE.USE_DAYS ||
              op.fc_length(LTRIM(TO_CHAR(OP.PRE_DAY_AMT *
                                    (1 + (RA.ORD_AMT_RATE / 100)) *
                                    DE.USE_DAYS,
                                    '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(OP.PRE_DAY_AMT * (1 + (RA.ORD_AMT_RATE / 100)) *
                            DE.USE_DAYS,
                            '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999')) ||
             
             /*op.fc_length(ltrim(to_char(int(round(op.day_amt/10000,0)*10),'999,999,999')))||','||
               ltrim(to_char(int(round(op.day_amt/10000,0)*10),'999,999,999'))||
             op.fc_length(INT(round(op.day_amt/op.pre_day_amt*100,1)))||','||INT(round(op.day_amt/op.pre_day_amt*100,1))||
             op.fc_length(round(ra.ord_amt_rate,0))||','||round(ra.ord_amt_rate,0)||
             op.fc_length(de.use_days)||','||de.use_days||
             op.fc_length(ltrim(to_char(de.oper_amt/1000 ,'999,999,999')))||','||
               ltrim(to_char(de.oper_amt/1000 ,'999,999,999'))||
             op.fc_length(substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-1),4,2))||','||substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-1),4,2)||
             op.fc_length(substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-1),4,2))||','||substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-1),4,2)||
             op.fc_length(op.day_amt/1000)||','||op.day_amt/1000||
             op.fc_length(substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-2),4,2))||','||substr2(ADD_MONTHS(TO_DATE(pDate,'YYYYMMDD'),-2),4,2)||
             op.fc_length(op.pre_day_amt/1000)||','||op.pre_day_amt/1000||
             op.fc_length(INT(round(op.day_amt/op.pre_day_amt*100,1)))||','||INT(round(op.day_amt/op.pre_day_amt*100,1))||
             */
              op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.YST_RESULT_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.YST_RESULT_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.RETURN_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.RETURN_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.DEMAND_AMT / 1000, '999,999,999')) ||
              op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1,
                              'yyyy.mm.dd') || ' 24:00 기준') || ',' ||
              TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1, 'yyyy.mm.dd') ||
              ' 24:00 기준' ||
              op.fc_length(LTRIM(TO_CHAR(DE.RETURN_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.RETURN_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.TMR_AMT / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.TMR_AMT / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DE.TMR_AMT / 1000 + DE.RETURN_AMT / 1000,
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DE.TMR_AMT / 1000 + DE.RETURN_AMT / 1000,
                            '999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NICE_RCV_PART || ' ' || NICE_RCV_PERSON) || ',' ||
             NICE_RCV_PART || ' ' || NICE_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqPost',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQPOST;

  PROCEDURE SP_NICEOPAMTREQFORSH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqForSH
      --  select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --  and rownum =1  ;
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length('제휴자동화기기 운영자금 담당자') || ',' || '제휴자동화기기 운영자금 담당자'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd') ||
                      op.fc_length(LTRIM(TO_CHAR(DE.USE_DAYS, '999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.USE_DAYS, '999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR((DE.OPER_AMT / DE.USE_DAYS),
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR((DE.OPER_AMT / DE.USE_DAYS),
                                    '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(TMR_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(TMR_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(YST_RESULT_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(YST_IN_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(YST_IN_RESULT_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(RETURN_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(RETURN_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_START_AMT -
                                            YST_RESULT_AMT +
                                            YST_IN_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_START_AMT - YST_RESULT_AMT +
                                    YST_IN_RESULT_AMT,
                                    '999,999,999,999')) ||
                      op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd') || ' 24:00 기준') || ',' ||
                      TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1,
                              'yyyy.mm.dd') || ' 24:00 기준'
      INTO VFD_TEMP
      FROM (SELECT ORG_CD,
                   START_DATE,
                   END_DATE,
                   USE_DAYS,
                   DEMAND_DATE,
                   SUM(OPER_AMT) / 1000 OPER_AMT,
                   SUM(YST_START_AMT) / 1000 YST_START_AMT,
                   SUM(YST_AMT) / 1000 YST_AMT,
                   SUM(TMR_AMT) / 1000 TMR_AMT,
                   SUM(YST_RESULT_AMT) / 1000 YST_RESULT_AMT,
                   SUM(YST_IN_RESULT_AMT) / 1000 YST_IN_RESULT_AMT,
                   SUM(RETURN_AMT) / 1000 RETURN_AMT,
                   SUM(DEMAND_AMT) / 1000 DEMAND_AMT,
                   SUM(INVENT_AMT) / 1000 INVENT_AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
            GROUP BY ORG_CD,
                     START_DATE,
                     END_DATE,
                     USE_DAYS,
                     DEMAND_DATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2)) || ',' ||
                       substr2(A.DEAL_DATE, 5, 2) ||
                       op.fc_length(substr2(A.DEAL_DATE, 7, 2)) || ',' ||
                       substr2(A.DEAL_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,99,9999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = PORGCD
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) A,
                     
                     (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = PORGCD
                            AND DEAL_TYPE = '1'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) B
                WHERE A.DEAL_DATE = B.DEAL_DATE(+)
                GROUP BY A.DEAL_DATE
                ORDER BY A.DEAL_DATE) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      --list 2
      VFD_L2 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,99,9999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000, '999,999,999')) LIST_DATA
      INTO VFD_L2
      FROM (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) A,
           
           (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND DEAL_TYPE = '1'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      ----------------------------------------------------------------------------------------------------------------------------------                  
    
      /*     if vCnt = 0 then -- hidden없는것
               insert into OP.t_cm_fax_data 
               (index_key, page_index, fax_file_cd, fd_hd, fd_L1, fd_L2 ) 
               values(pIndexKey, pPageNo, pFaxCd , vFd_hd, vFd_L1, vFd_L2);
            
                    else -- hidden 있는것
                     begin
            
                     --list 2
                  FOR l IN
                        (
                      select op.fc_length(to_char(rownum,'999'))||','||to_char(rownum,'999')||
                       op.fc_length(substr2(deal_mmdd,1,2)||'/'||substr2(deal_mmdd,3,2))||','||substr2(deal_mmdd,1,2)||'/'||substr2(deal_mmdd,3,2)||
                       op.fc_length(deal_hour||':'||deal_mi||':'||deal_sec)||','||deal_hour||':'||deal_mi||':'||deal_sec||
                       op.fc_length(deal_no)||','||deal_no||
                       op.fc_length(account_no)||','||account_no||
                       op.fc_length(s)||','||s||
                       op.fc_length(to_char(deal_amt,'999'))||','||to_char(deal_amt,'999') list_data
                      from  
                      ( 
                       select
                    deal_mmdd,
                    deal_hour,
                    deal_mi,
                    deal_sec,
                    deal_no,
                        trim(OP.FC_FN_SECURITY(inst_jijum_cd,'2')||'-'||OP.FC_FN_SECURITY(account_no,'2')) account_no,
                    '미완료' s,
                    deal_amt/1000 deal_amt
                      from 
                    OP.t_Fn_nice_tran_notend 
                      where org_cd=pOrgCd and deal_date<=to_char(to_date(pDate,'yyyymmdd')-1,'yyyymmdd')
                      and deal_status='2'
                      and deal_type = '0'
                      and deal_date>=
                    (select 
                    max(demand_date) demand_date 
                     from 
                    OP.t_fn_nice_demand 
                     where 
                    demand_date<pDate
                    and org_cd=pOrgCd)
                      order by deal_mmdd,deal_hour,deal_mi,deal_sec
                      ) 
                    )
                  LOOP  
                
                    vFd_L3 :=  vFd_L3||l.list_data;         
                
                  END LOOP;    
                     
            
                    select  op.fc_length(to_char(sum(deal_amt/1000),'99,999'))||','||to_char(sum(deal_amt/1000),'99,999') 
                    into vFd_L4
                    from 
                  OP.t_Fn_nice_tran_notend 
                    where org_cd=pOrgCd and deal_date<=to_char(to_date(pDate,'yyyymmdd')-1,'yyyymmdd')
                    and deal_status='2'
                    and deal_type = '0'
                    and deal_date>=
                  (select 
                  max(demand_date) demand_date 
                   from 
                  OP.t_fn_nice_demand 
                   where 
                  demand_date<pDate
                  and org_cd=pOrgCd);
                    
                    
                      insert into OP.t_cm_fax_data 
                     (index_key, page_index, fax_file_cd, fd_hd, fd_L1, fd_L2 , fd_L3, fd_L4) 
                     values(pIndexKey, pPageNo, 'NOAR4SH_H' , vFd_hd, vFd_L1, vFd_L2, vFd_L3, vFd_L4);      
            
                     end;
                    end if;
                    
                 vFd_hd := ''; 
                 vFd_temp := '';
                 vFd_L1 := ''; 
                 vFd_L2 := ''; 
                 vFd_L3 := ''; 
                 vFd_L4 := ''; 
                 vCnt :=0;
                 vFd_ft := '';
      
        
        EXCEPTION
        WHEN OTHERS THEN
        -- ROLLBACK;
        vResult := SQLERRM;
        END;
      
        OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForSH', 
                   vResult, 
                   pDate);
        
      */
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForSH',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORSH;

  --- 하나은행 브랜드 신규
  PROCEDURE SP_NICEOPAMTREQFORHNB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length('하나은행 브랜드 업무지원부') || ',' || '하나은행 브랜드 업무지원부'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_RESULT_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_IN_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_IN_RESULT_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.OPER_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DEMAND_AMT, '999,999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_START_AMT -
                                            YST_RESULT_AMT +
                                            YST_IN_RESULT_AMT,
                                            '999,999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_START_AMT - YST_RESULT_AMT +
                                    YST_IN_RESULT_AMT,
                                    '999,999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT ORG_CD,
                   START_DATE,
                   END_DATE,
                   USE_DAYS,
                   DEMAND_DATE,
                   SUM(OPER_AMT) / 1000 OPER_AMT,
                   SUM(YST_START_AMT) / 1000 YST_START_AMT,
                   SUM(YST_RESULT_AMT) / 1000 YST_RESULT_AMT,
                   SUM(YST_IN_RESULT_AMT) / 1000 YST_IN_RESULT_AMT,
                   SUM(DEMAND_AMT) / 1000 DEMAND_AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
            GROUP BY ORG_CD,
                     START_DATE,
                     END_DATE,
                     USE_DAYS,
                     DEMAND_DATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2)) || ',' ||
                       substr2(A.DEAL_DATE, 5, 2) ||
                       op.fc_length(substr2(A.DEAL_DATE, 7, 2)) || ',' ||
                       substr2(A.DEAL_DATE, 7, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,99,9999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = PORGCD
                            AND DEAL_TYPE = '0'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) A,
                     
                     (SELECT DEAL_DATE,
                             SUM(TIME_DEAL_CNT) CNT,
                             SUM(TIME_DEAL_AMT) AMT,
                             SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                             SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                             SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                             SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
                      FROM OP.T_FN_NICE_ORG_DSUM
                      WHERE DEAL_DATE >=
                            OP.SF_GETPREACTDATE(PDATE)
                            AND DEAL_DATE <=
                            OP.SF_GETBEFOREDATE(PDATE)
                            AND ORG_CD = PORGCD
                            AND DEAL_TYPE = '1'
                            AND DEAL_STATUS = '0'
                      GROUP BY DEAL_DATE) B
                WHERE A.DEAL_DATE = B.DEAL_DATE(+)
                GROUP BY A.DEAL_DATE
                ORDER BY A.DEAL_DATE) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      --list 2
      VFD_L2 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.CNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.CNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,99,9999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.AMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.AMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)) / 1000, '999,999,999')) LIST_DATA
      INTO VFD_L2
      FROM (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) A,
           
           (SELECT DEAL_DATE,
                   SUM(TIME_DEAL_CNT) CNT,
                   SUM(TIME_DEAL_AMT) AMT,
                   SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT) OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT) TOTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND DEAL_TYPE = '1'
                  AND DEAL_STATUS = '0'
            GROUP BY DEAL_DATE) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForHNB',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORHNB;

  PROCEDURE SP_NICEOPAMTREQWOORI(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --운영자금 소요명세서 NiceOpAmtReqWoori
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
      VAMT1  := 0;
      SELECT op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(DE.USE_DAYS) || ',' || DE.USE_DAYS,
             DE.YST_START_AMT / 1000 YST_START_AMT
      INTO VFD_TEMP,
           VAMT1
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(YST_RESULT_AMT) / 1000 YST_RESULT_AMT
        INTO VAMT2
        FROM OP.T_FN_NICE_DEMAND
        WHERE DEMAND_DATE = PDATE;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
    
      VAMT3 := 0;
      BEGIN
        SELECT DEMAND_AMT / 1000 DEMAND_AMT
        INTO VAMT3
        FROM OP.T_FN_NICE_DEMAND
        WHERE ORG_CD = PORGCD
              AND
              DEMAND_DATE = (SELECT MAX(DEMAND_DATE)
                             FROM OP.T_FN_NICE_DEMAND
                             WHERE DEMAND_DATE < PDATE
                                   AND ORG_CD = PORGCD);
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT3 := 0;
      END;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.MAC_CNT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.MAC_CNT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.OPER_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.OPER_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.RETURN_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.RETURN_AMT / 1000, '999,999,999')) ||
             op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.YST_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.YST_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.YST_RESULT_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.YST_RESULT_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.RETURN_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.RETURN_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INT(ROUND((A.YST_RESULT_AMT / 1000) /
                                         (A.YST_AMT / 1000) * 100,
                                         0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INT(ROUND((A.YST_RESULT_AMT / 1000) /
                                 (A.YST_AMT / 1000) * 100,
                                 0)),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INT(ROUND((A.YST_RESULT_AMT / 1000) / VAMT2 * 100,
                                         0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INT(ROUND((A.YST_RESULT_AMT / 1000) / VAMT2 * 100, 0)),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT1 - VAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT1 - VAMT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.DEMAND_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.YST_RESULT_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.YST_RESULT_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT1 - VAMT3 + B.DEMAND_AMT / 1000 -
                                   A.YST_RESULT_AMT / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT1 - VAMT3 + B.DEMAND_AMT / 1000 -
                           A.YST_RESULT_AMT / 1000,
                           '999,999,999')) || op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(A.DEAL_CNT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.DEAL_CNT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.DEMAND_AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.INVENT_AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.INVENT_AMT / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT ORG_CD,
                   OPER_AMT,
                   RETURN_AMT,
                   DEMAND_AMT,
                   MAC_CNT,
                   YST_AMT,
                   YST_RESULT_AMT,
                   DEAL_CNT,
                   INVENT_AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE) A,
           (SELECT ORG_CD,
                   YST_START_AMT,
                   DEMAND_AMT,
                   YST_AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)) B
      WHERE A.ORG_CD = B.ORG_CD
            AND A.ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VAMT1    := 0;
      VAMT2    := 0;
      VAMT3    := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqWoori',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQWOORI;

  -- 농협
  PROCEDURE SP_NICEOPAMTREQFORNH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqForNh
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      --         select op.fc_length(to_char(sysdate,'yyyy-mm-dd'))||','||to_char(sysdate,'yyyy-mm-dd')  BASE_DATE  
      --        into   vFd_temp     
      --         from dual;         
    
      --         vFd_hd :=  vFd_hd||vFd_temp;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT
      
       op.fc_length(RTRIM(LTRIM(TO_CHAR(SILORD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(SILORD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(SHORD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(SHORD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(STORD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(STORD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(DAYORD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(DAYORD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(OPERORD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(OPERORD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(SILWKD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(SILWKD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(SHWKD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(SHWKD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(STWKD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(STWKD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(DAYWKD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(DAYWKD, '999,999,999'))) ||
       op.fc_length(RTRIM(LTRIM(TO_CHAR(OPERWKD, '999,999,999')))) || ',' ||
       RTRIM(LTRIM(TO_CHAR(OPERWKD, '999,999,999')))
      
      INTO VFD_TEMP
      FROM (SELECT INT(ROUND((A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (ORD_AMT_RATE / 100))) / 1000) / 1.1,
                         0)) SILORD,
                   '110' SHORD,
                   INT(ROUND(A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (ORD_AMT_RATE / 100))) / 1000,
                         0)) STORD,
                   '1' DAYORD,
                   INT(ROUND(A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (ORD_AMT_RATE / 100))) / 1000,
                         0)) OPERORD,
                   INT(ROUND((A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (WKD_AMT_RATE / 100))) / 1000) / 1.15,
                         0)) SILWKD,
                   '115' SHWKD,
                   INT(ROUND(A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (WKD_AMT_RATE / 100))) / 1000,
                         0)) STWKD,
                   C.USE_DAYS - 1 DAYWKD,
                   INT(ROUND(A.MAC_CNT * A.AVG_CNT *
                         (A.AVG_AMT * (1 + (WKD_AMT_RATE / 100))) / 1000,
                         0) * (C.USE_DAYS - 1)) OPERWKD
            
            FROM (SELECT *
                  FROM OP.T_FN_NICE_MONTHLY_OPER
                  WHERE ORG_CD = PORGCD
                        AND PDATE BETWEEN START_DATE AND END_DATE) A,
                 
                 (SELECT *
                  FROM OP.T_FN_ORG_SPARE_RATE
                  WHERE ORG_CD = PORGCD
                        AND PDATE BETWEEN START_DATE AND END_DATE) B,
                 
                 (SELECT *
                  FROM OP.T_FN_NICE_DEMAND
                  WHERE DEMAND_DATE = PDATE
                        AND ORG_CD = PORGCD) C
            WHERE A.ORG_CD = B.ORG_CD
                  AND A.ORG_CD = C.ORG_CD);
    
      VFD_HD   := VFD_HD || VFD_TEMP;
      VFD_TEMP := '';
    
      SELECT DISTINCT /*     op.fc_length(rtrim(ltrim(to_char(de.mac_cnt , '999,999,999'))))||','||rtrim(ltrim(to_char(de.mac_cnt , '999,999,999')))||
                                             op.fc_length(rtrim(ltrim(to_char(op.avg_cnt * (1+ decode(de.use_days,1,ra.ord_cnt_rate,wkd_cnt_rate)/100) , '999,990.999'))))||','||rtrim(ltrim(to_char(op.avg_cnt * (1+ decode(de.use_days,1,ra.ord_cnt_rate,wkd_cnt_rate)/100) , '999,990.999')))||
                                             op.fc_length(rtrim(ltrim(to_char(op.avg_cnt , '999,990.99'))))||','||rtrim(ltrim(to_char(op.avg_cnt , '999,990.99')))||
                                             op.fc_length(rtrim(ltrim(to_char(decode(de.use_days,1,ra.ord_cnt_rate,wkd_cnt_rate) , '999,999,999'))))||','|| rtrim(ltrim(to_char(decode(de.use_days,1,ra.ord_cnt_rate,wkd_cnt_rate) , '999,999,999'))) ||
                                             op.fc_length(rtrim(ltrim(to_char(int(round(TO_NUMBER(op.avg_amt/1000),3) * (1 + (decode(de.use_days,1,ra.ord_amt_rate,ra.wkd_amt_rate))/100 ))  , '999,999.9999'))))||','|| rtrim(ltrim(to_char(int(round(TO_NUMBER(op.avg_amt/1000),3) * (1 + (decode(de.use_days,1,ra.ord_amt_rate,ra.wkd_amt_rate))/100 ))  , '999,999.9999')))||
                                             op.fc_length(rtrim(ltrim(to_char(int(round(TO_NUMBER(op.avg_amt/1000),3)) , '999,999.99'))))||','||rtrim(ltrim(to_char(int(round(TO_NUMBER(op.avg_amt/1000),3)) , '999,999.99')))||
                                             op.fc_length(rtrim(ltrim(to_char(decode(de.use_days,1,ra.ord_amt_rate,ra.wkd_amt_rate) , '99999'))))||','||rtrim(ltrim(to_char(decode(de.use_days,1,ra.ord_amt_rate,ra.wkd_amt_rate) , '99999')))||
                                             op.fc_length(rtrim(ltrim(to_char(de.use_days, '99'))))||','||rtrim(ltrim(to_char(de.use_days, '99')))||
                                             */
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999'))) ||
                      
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                                  YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                          YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      
                      op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd')) || ',' ||
                      TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd')
      
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD   := VFD_HD || VFD_TEMP;
      VFD_TEMP := '';
      VCNT     := 0;
    
      SELECT op.fc_length(RTRIM(LTRIM(TO_CHAR(B.JOHAPAMT, '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(B.JOHAPAMT, '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(C.CARDAMT, '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(C.CARDAMT, '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR((A.AMT + B.JOHAPAMT + C.CARDAMT),
                                         '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR((A.AMT + B.JOHAPAMT + C.CARDAMT),
                                 '999,999,999')))
      INTO VFD_TEMP
      FROM (SELECT DEMAND_AMT / 1000 AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD) A,
           (SELECT DEMAND_AMT / 1000 JOHAPAMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = '012') B,
           (SELECT DEMAND_AMT / 1000 CARDAMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = '0CH') C;
    
      VFD_HD   := VFD_HD || VFD_TEMP;
      VFD_TEMP := '';
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '') || ' ' ||
                     NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PART, '') || ' ' || NVL(NICE_RCV_PERSON, '')
      
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_L1   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForNh',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORNH;

  PROCEDURE SP_PACKCASHTRANPLANTABLE(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                     PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                     PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                     PFAXCD    IN VARCHAR2,
                                     PPAGENO   IN NUMBER,
                                     PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리현송계획표 PackCashTranPlanTable
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일' ||
             op.fc_length(substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                   '1',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                           'YYYYMMDD'),
                                   '2',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                           'YYYYMMDD'),
                                   '3',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                           'YYYYMMDD'),
                                   '4',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                           'YYYYMMDD'),
                                   '5',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                           'YYYYMMDD'),
                                   '6',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                           'YYYYMMDD'),
                                   PDATE),
                            5,
                            2) || '월' ||
                     substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                   '1',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                           'YYYYMMDD'),
                                   '2',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                           'YYYYMMDD'),
                                   '3',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                           'YYYYMMDD'),
                                   '4',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                           'YYYYMMDD'),
                                   '5',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                           'YYYYMMDD'),
                                   '6',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                           'YYYYMMDD'),
                                   PDATE),
                            7,
                            2) || '일') || ',' ||
             substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                           '1',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                   'YYYYMMDD'),
                           '2',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                   'YYYYMMDD'),
                           '3',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                   'YYYYMMDD'),
                           '4',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                   'YYYYMMDD'),
                           '5',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                   'YYYYMMDD'),
                           '6',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                   'YYYYMMDD'),
                           PDATE),
                    5,
                    2) || '월' ||
             substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                           '1',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                   'YYYYMMDD'),
                           '2',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                   'YYYYMMDD'),
                           '3',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                   'YYYYMMDD'),
                           '4',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                   'YYYYMMDD'),
                           '5',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                   'YYYYMMDD'),
                           '6',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                   'YYYYMMDD'),
                           PDATE),
                    7,
                    2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) || op.fc_length(COMPANY.CD_NM1) || ',' ||
                       COMPANY.CD_NM1 || op.fc_length(MACHINE.CD_NM1) || ',' ||
                       MACHINE.CD_NM1 || op.fc_length(REPORT.MAC_NO) || ',' ||
                       REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT) / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.WKD_SENDPLAN_AMT / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.WKD_SENDPLAN_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT / 1000), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                           REPORT.WKD_SENDPLAN_AMT +
                                           REPORT.PLUS_SEND_AMT) / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                   REPORT.WKD_SENDPLAN_AMT +
                                   REPORT.PLUS_SEND_AMT) / 1000),
                               0),
                           '999,999,999'))
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTable',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLE;

  PROCEDURE SP_PACKOPAMTCLOSINGTABLE(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                     PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                     PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                     PFAXCD    IN VARCHAR2,
                                     PPAGENO   IN NUMBER,
                                     PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 마감표 PackOpAmtclosingTable
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(PDATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      IF PORGCD <> '034' THEN
      
        FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                          substr2(MAC.MAC_NM, 1, 11) ||
                         --          op.fc_length(REPORT.MAC_NO)||','||REPORT.MAC_NO||
                          op.fc_length(REPORT.BRANCH_CD || '-' || REPORT.MAC_NO) || ',' ||
                          REPORT.BRANCH_CD || '-' || REPORT.MAC_NO ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                        '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000, '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.IN_AMT / 1000, '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                        '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_CNT,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000,
                                        '999,999,999')) ||
                          op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                                REPORT.DIFFER_AMT / 1000,
                                                '999,999,999'))) || ',' ||
                          LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                        REPORT.DIFFER_AMT / 1000,
                                        '999,999,999')) LIST_DATA
                  FROM (SELECT *
                        FROM OP.T_FN_PACK_REPORT
                        WHERE ORG_CD = PORGCD
                              AND BRANCH_CD LIKE PBRANCHCD || '%'
                              AND DEMAND_DATE = PDATE
                              AND OUT_AMT || IN_AMT || CLOSE_AMT ||
                              DIFFER_AMT <> '0000') REPORT,
                       OP.T_CM_MAC MAC
                  WHERE REPORT.ORG_CD = MAC.ORG_CD
                        AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                        AND REPORT.MAC_NO = MAC.MAC_NO
                  ORDER BY REPORT.ORG_CD,
                           REPORT.BRANCH_CD,
                           REPORT.MAC_NO) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        VFD_TEMP1 := '';
        SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT / 1000), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT / 1000), 0),
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT / 1000), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT / 1000), 0),
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT / 1000), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT / 1000), 0),
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000), 0),
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT / 1000), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT / 1000), 0),
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000 +
                                             REPORT.DIFFER_AMT / 1000),
                                         0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000 +
                                     REPORT.DIFFER_AMT / 1000),
                                 0),
                             '999,999,999')) LIST_DATA
        INTO VFD_TEMP1
        FROM (SELECT *
              FROM OP.T_FN_PACK_REPORT
              WHERE ORG_CD = PORGCD
                    AND BRANCH_CD LIKE PBRANCHCD || '%'
                    AND DEMAND_DATE = PDATE
                    AND
                    OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
             OP.T_CM_MAC MAC
        WHERE REPORT.ORG_CD = MAC.ORG_CD
              AND REPORT.BRANCH_CD = MAC.BRANCH_CD
              AND REPORT.MAC_NO = MAC.MAC_NO;
      
        VFD_L2 := VFD_L2 || VFD_TEMP1;
      
      END IF;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTable',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLE;

  PROCEDURE SP_PACKOPAMTNEEDFORHANA(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                    PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                    PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                    PFAXCD    IN VARCHAR2,
                                    PPAGENO   IN NUMBER,
                                    PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForHana
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || op.fc_length(CASE
                                                WHEN PBRANCHCD IS NULL THEN
                                                 ' '
                                                ELSE
                                                 PBRANCHCD
                                              END) || ',' || CASE
               WHEN PBRANCHCD IS NULL THEN
                ' '
               ELSE
                PBRANCHCD
             END
      /*
      ||op.fc_length(ltrim(to_char(DEMAND.POSTTRAN,'999,999,999')))||','||ltrim(to_char(DEMAND.POSTTRAN,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.PREADD,'999,999,999')))||','||ltrim(to_char(DEMAND.PREADD,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(PRERESPECTAMT,'999,999,999')))||','||ltrim(to_char(PRERESPECTAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(CURRESPECTAMT,'999,999,999')))||','||ltrim(to_char(CURRESPECTAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999')),
      
      op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')
      */
      INTO VFD_TEMP --, vCharTemp
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_BRANCH
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(A.CNT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.CNT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(B.CNT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(B.CNT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.CNT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.CNT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(C.CNT, 0), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(C.CNT, 0), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT COUNT(MAC_NO) CNT
            FROM OP.T_CM_MAC
            WHERE ORG_CD = PORGCD
                  AND CLOSE_DATE IS NULL) A,
           
           (SELECT COUNT(MAC_NO) CNT
            FROM OP.T_FN_SEND
            WHERE SEND_DATE = OP.SF_GETPOSTACTDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND SEND_TYPE = '1') B,
           
           (SELECT COUNT(MAC_NO) CNT
            FROM OP.T_FN_SEND
            WHERE SEND_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND SEND_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                  AND ORG_CD = PORGCD
                  AND SEND_TYPE = '2'
                  AND SEND_STATUS = '2') C;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT
      /*      op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
      op.fc_length(to_char(to_date(OP.sf_getBeforePostActDate(OP.SF_GETPOSTACTDATE(pDate)),'yyyymmdd')-
              to_date(OP.sf_getPostActDate(pDate),'yyyymmdd')+1,'99'))||','||
        to_char(to_date(OP.sf_getBeforePostActDate(OP.SF_GETPOSTACTDATE(pDate)),'yyyymmdd')-
                to_date(OP.sf_getPostActDate(pDate),'yyyymmdd')+1,'99')||
        
      op.fc_length(to_char(to_date(OP.sf_getPostActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(OP.sf_getPostActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')||
      op.fc_length(to_char(to_date(OP.sf_getBeforePostActDate(OP.SF_GETPOSTACTDATE(pDate)),'yyyymmdd'),'yyyy-mm-dd'))||','||
        to_char(to_date(OP.sf_getBeforePostActDate(OP.SF_GETPOSTACTDATE(pDate)),'yyyymmdd'),'yyyy-mm-dd')||
      op.fc_length(case when pJijumCd is null then ' ' else pJijumCd end)||','||case when pJijumCd is null then ' ' else pJijumCd end
      
      ||*/
       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
       
       op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE), 'yyyymmdd'),
               'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_BRANCH
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT2
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
    
      IF PBRANCHCD IS NULL THEN
      
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                              '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT1,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT1,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      ELSE
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT2,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT2,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForHana',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORHANA;

  --  우체국 토탈 아웃소싱
  PROCEDURE SP_PACKOPAMTNEEDFORPOSTTO(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                      PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                      PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                      PFAXCD    IN VARCHAR2,
                                      PPAGENO   IN NUMBER,
                                      PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 sp_PackOpAmtNeedForPostTo
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      /*        ||
            op.fc_length(case when pJijumCd is null then ' ' else pJijumCd end)||','||case when pJijumCd is null then ' ' else pJijumCd end
      */
      /*
      ||op.fc_length(ltrim(to_char(DEMAND.POSTTRAN,'999,999,999')))||','||ltrim(to_char(DEMAND.POSTTRAN,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.PREADD,'999,999,999')))||','||ltrim(to_char(DEMAND.PREADD,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(PRERESPECTAMT,'999,999,999')))||','||ltrim(to_char(PRERESPECTAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(CURRESPECTAMT,'999,999,999')))||','||ltrim(to_char(CURRESPECTAMT,'999,999,999'))||
      op.fc_length(ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999')),
      
      op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')
      */
      INTO VFD_TEMP --, vCharTemp
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
            --         AND BRANCH_CD LIKE pJijumCd||'%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      /*      
            select 
               op.fc_length(ltrim(to_char(a.cnt,'999,999,999')))||','||ltrim(to_char(a.cnt,'999,999,999'))||
             op.fc_length(ltrim(to_char(b.cnt,'999,999,999')))||','||ltrim(to_char(b.cnt,'999,999,999'))||
             op.fc_length(ltrim(to_char(a.cnt,'999,999,999')))||','||ltrim(to_char(a.cnt,'999,999,999'))||
             op.fc_length(ltrim(to_char(nvl(c.cnt,0),'999,999,999')))||','||ltrim(to_char(nvl(c.cnt,0),'999,999,999'))
              into vFd_temp
              from
              (select count(maC_no) cnt 
              from OP.t_Cm_mac
              where orG_cd=pOrgCd
              and close_date is null) A,
              
              (select count(mac_no) cnt 
              From OP.t_fn_send
              where send_date=OP.sf_getPostActDate (pDate)
              and org_Cd=pOrgCd
              and send_type='1') B,
              
              (select count(mac_no) cnt 
              From OP.t_fn_send
              where send_date>=OP.sf_getPreActDate (pDate)
              and   send_date<=OP.sf_getBeforeDate (pDate)
              and org_Cd=pOrgCd
              and send_type='2'
              and send_status='2') C;
            
            vFd_hd :=  vFd_hd||vFd_temp;        
      */
    
      SELECT
      
       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
       
       op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE), 'yyyymmdd'),
               'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
            --         AND BRANCH_CD LIKE pJijumCd||'%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT2
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
    
      IF PBRANCHCD IS NULL THEN
      
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                              '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT1,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT1,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999')) ||
               --  금고현황      
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999')) ||
               --  기기현황
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT - IN_AMT + OUT_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(CLOSE_AMT - IN_AMT + OUT_AMT) / 1000,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT_KN
        --from    OP.t_fn_pack_invent
        WHERE ORG_CD = PORGCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      ELSE
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT2,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT2,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT_KN
        --t_fn_pack_invent
        WHERE ORG_CD = PORGCD
             --      and jijum_cd=pJijumCd
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForPostTo',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORPOSTTO;

  -- 동양종금양식
  PROCEDURE SP_PACKOPAMTNEEDFORDJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForDJ
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || op.fc_length(CASE
                                                WHEN PBRANCHCD IS NULL THEN
                                                 ' '
                                                ELSE
                                                 PBRANCHCD
                                              END) || ',' || CASE
               WHEN PBRANCHCD IS NULL THEN
                ' '
               ELSE
                PBRANCHCD
             END || op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_BRANCH
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT2
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
    
      IF PBRANCHCD IS NULL THEN
      
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                              '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT1,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT1,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      ELSE
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                      VAMT2,
                                      '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT2,
                              '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForDJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORDJ;

  --외환양식
  PROCEDURE SP_PACKOPAMTNEEDFORKEB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                   PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                   PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                   PFAXCD    IN VARCHAR2,
                                   PPAGENO   IN NUMBER,
                                   PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForKEB
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
            --     AND BRANCH_CD LIKE '%#OZParam.BRANCHCD#%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --------------------------------------------------------------------------         
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
      ----------------------------------------------------------------------------
      SELECT op.fc_length(LTRIM(TO_CHAR(P.AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(P.AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(N.AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(N.AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(C.AMT / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(C.AMT / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR((P.AMT + N.AMT + C.AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR((P.AMT + N.AMT + C.AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT SUM(DEMAND_AMT) AMT
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = '005') P,
           (SELECT SUM(DEMAND_AMT) AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = '005') N,
           (SELECT SUM(DEMAND_AMT) AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = '044') C;
    
      VFD_HD   := VFD_HD || VFD_TEMP;
      VFD_TEMP := '';
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD     := '';
      VFD_TEMP   := '';
      VCHARTEMP  := '';
      VCHARTEMP1 := '';
      VAMT1      := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForKEB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORKEB;

  PROCEDURE SP_PACKOPAMTNEEDFORHUSUN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                     PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                     PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                     PFAXCD    IN VARCHAR2,
                                     PPAGENO   IN NUMBER,
                                     PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 1;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
    VRESULT    OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과        
    VT_PT      NUMBER := 0;
    VT_T       NUMBER := 0;
    VT_OP      NUMBER := 0;
    VT_OU      NUMBER := 0;
    VT_IN      NUMBER := 0;
    VTJ_PT     NUMBER := 0;
    VTJ_T      NUMBER := 0;
    VTJ_OP     NUMBER := 0;
    VTJ_OU     NUMBER := 0;
    VTJ_IN     NUMBER := 0;
    VTB_D      NUMBER := 0;
    VTJB_D     NUMBER := 0;
    VA_S       NUMBER := 0;
    VA_C       NUMBER := 0;
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForHusun
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT COUNT(*)
        INTO VCNT1
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      
        IF VCNT1 > 0 THEN
          SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM || '점') || ',' ||
                 ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM || '점'
          INTO VFD_TEMP
          FROM OP.T_CM_ORG    ORG,
               OP.T_CM_BRANCH BRANCH
          WHERE ORG.ORG_CD = BRANCH.ORG_CD
                AND ORG.ORG_CD = PORGCD
                AND BRANCH.BRANCH_CD = PBRANCHCD;
        END IF;
      END IF;
    
      IF VCNT1 > 0 THEN
      
        VFD_HD := VFD_TEMP;
        VAMT1  := 0;
      
        BEGIN
          SELECT NVL(SUM(SEND.PSEND + CLO.INVENT) / 1000, 0) BRANCHINVENT
          INTO VAMT1
          FROM (SELECT POST_TRANS_AMT PSEND
                FROM OP.T_FN_PACK_BRANCH
                WHERE ORG_CD = PORGCD
                      AND BRANCH_CD = PBRANCHCD
                      AND
                      DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)) SEND,
               (SELECT SUM(PRE_COLLECT_AMT + DIFFER_AMT - PRE_ADD_TRANS_AMT) INVENT
                FROM OP.T_FN_PACK_BRANCH
                WHERE ORG_CD = PORGCD
                      AND BRANCH_CD = PBRANCHCD
                      AND DEMAND_DATE = PDATE) CLO;
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            VAMT1 := 0;
        END;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                       'yyyymmdd') -
                               TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                       'yyyymmdd') + 1,
                               '99')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(NVL(PBRANCHCD, ' ')) || ',' ||
               NVL(PBRANCHCD, ' ') ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
               op.fc_length('*') || ',' || '*' || op.fc_length('*') || ',' || '*' ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN + DEMAND.PREADD -
                                     DEMAND.CLOSEAMT - DEMAND.DIFFERAMT,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.POSTTRAN + DEMAND.PREADD -
                             DEMAND.CLOSEAMT - DEMAND.DIFFERAMT,
                             '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VAMT1, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VAMT1, '999,999,999')) ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd')
        INTO VFD_TEMP
        FROM (SELECT DEMAND_DATE,
                     ORG_CD,
                     SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                     SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                     SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                     SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                     SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                     SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                     SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
              
              FROM OP.T_FN_PACK_BRANCH
              WHERE DEMAND_DATE = PDATE
                    AND ORG_CD = PORGCD
                    AND BRANCH_CD LIKE PBRANCHCD || '%'
              GROUP BY DEMAND_DATE,
                       ORG_CD) DEMAND;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        SELECT op.fc_length(ORG.ORG_NM || ' ' || substr2(BRANCH.BRANCH_NM, 1, 2) ||
                       '업무지원센터장님') || ',' || ORG.ORG_NM || ' ' ||
               substr2(BRANCH.BRANCH_NM, 1, 2) || '업무지원센터장님'
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        INSERT INTO OP.T_CM_FAX_DATA
          (INDEX_KEY,
           PAGE_INDEX,
           FAX_FILE_CD,
           FD_HD)
        VALUES
          (PINDEXKEY,
           PPAGENO,
           PFAXCD,
           VFD_HD);
      
        VFD_HD   := '';
        VFD_TEMP := '';
      
        VAMT1   := 0;
        VRESULT := 'OK';
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForHusun',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORHUSUN;

  PROCEDURE SP_PACKOPAMTNEEDFORGG(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 1;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
    VRESULT    OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과        
    VT_PT      NUMBER := 0;
    VT_T       NUMBER := 0;
    VT_OP      NUMBER := 0;
    VT_OU      NUMBER := 0;
    VT_IN      NUMBER := 0;
    VTJ_PT     NUMBER := 0;
    VTJ_T      NUMBER := 0;
    VTJ_OP     NUMBER := 0;
    VTJ_OU     NUMBER := 0;
    VTJ_IN     NUMBER := 0;
    VTB_D      NUMBER := 0;
    VTJB_D     NUMBER := 0;
    VA_S       NUMBER := 0;
    VA_C       NUMBER := 0;
  
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForGG
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT COUNT(*)
        INTO VCNT1
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      
        IF VCNT1 > 0 THEN
          SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM || '점') || ',' ||
                 ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM || '점'
          INTO VFD_TEMP
          FROM OP.T_CM_ORG    ORG,
               OP.T_CM_BRANCH BRANCH
          WHERE ORG.ORG_CD = BRANCH.ORG_CD
                AND ORG.ORG_CD = PORGCD
                AND BRANCH.BRANCH_CD = PBRANCHCD;
        END IF;
      END IF;
    
      IF VCNT1 > 0 THEN
      
        VFD_HD := VFD_TEMP;
        VAMT1  := 0;
      
        BEGIN
          SELECT NVL(SUM(SEND.PSEND + CLO.INVENT) / 1000, 0) BRANCHINVENT
          INTO VAMT1
          FROM (SELECT POST_TRANS_AMT PSEND
                FROM OP.T_FN_PACK_BRANCH
                WHERE ORG_CD = PORGCD
                      AND BRANCH_CD = PBRANCHCD
                      AND
                      DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)) SEND,
               (SELECT SUM(PRE_COLLECT_AMT + DIFFER_AMT - PRE_ADD_TRANS_AMT) INVENT
                FROM OP.T_FN_PACK_BRANCH
                WHERE ORG_CD = PORGCD
                      AND BRANCH_CD = PBRANCHCD
                      AND DEMAND_DATE = PDATE) CLO;
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            VAMT1 := 0;
        END;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                       'yyyymmdd') -
                               TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                       'yyyymmdd') + 1,
                               '99')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(NVL(PBRANCHCD, ' ')) || ',' ||
               NVL(PBRANCHCD, ' ') ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
               op.fc_length('*') || ',' || '*' || op.fc_length('*') || ',' || '*' ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))
        --        op.fc_length(ltrim(to_char(vAmt1,'999,999,999')))||','||ltrim(to_char(vAmt1,'999,999,999'))||    
        --        op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||
        --      to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')  
        INTO VFD_TEMP
        FROM (SELECT DEMAND_DATE,
                     ORG_CD,
                     SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                     SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                     SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                     SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                     SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                     SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                     SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
              
              FROM OP.T_FN_PACK_BRANCH
              WHERE DEMAND_DATE = PDATE
                    AND ORG_CD = PORGCD
                    AND BRANCH_CD LIKE PBRANCHCD || '%'
              GROUP BY DEMAND_DATE,
                       ORG_CD) DEMAND;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        SELECT op.fc_length(LTRIM(TO_CHAR(DEMAND.AMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.AMT, '999,999,999')) ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.PREAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.PREAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.OPERAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.OPERAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.DIFAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT (PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 PREAMT,
                     OPER_AMT / 1000 OPERAMT,
                     DIFFER_AMT / 1000 DIFAMT,
                     OUT_AMT / 1000 OUTAMT,
                     IN_AMT / 1000 INAMT,
                     (MAC_AMT + SAFE_AMT) / 1000 AMT
              
              FROM OP.T_FN_PACK_INVENT_BRANCH
              WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                    AND ORG_CD = PORGCD
                    AND BRANCH_CD LIKE PBRANCHCD || '%') DEMAND;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        SELECT op.fc_length(ORG.ORG_NM || ' ' || substr2(BRANCH.BRANCH_NM, 1, 4) || '님') || ',' ||
               ORG.ORG_NM || ' ' || substr2(BRANCH.BRANCH_NM, 1, 4) || '님'
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        INSERT INTO OP.T_CM_FAX_DATA
          (INDEX_KEY,
           PAGE_INDEX,
           FAX_FILE_CD,
           FD_HD)
        VALUES
          (PINDEXKEY,
           PPAGENO,
           PFAXCD,
           VFD_HD);
      
        VFD_HD   := '';
        VFD_TEMP := '';
      
        VAMT1   := 0;
        VRESULT := 'OK';
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForGG',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORGG;

  PROCEDURE SP_PACKOPAMTNEEDFORPOST(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                    PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                    PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                    PFAXCD    IN VARCHAR2,
                                    PPAGENO   IN NUMBER,
                                    PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForPost
    
      -- header  
      SELECT op.fc_length(BRANCH_NM) || ',' || BRANCH_NM ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM OP.T_CM_BRANCH
      WHERE ORG_CD = PORGCD
            AND BRANCH_CD = PBRANCHCD;
    
      VFD_HD    := VFD_TEMP;
      VCHARTEMP := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || lengthb(' ') || ',' || ' ' ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP,
           VCHARTEMP
      
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_BRANCH
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999')) ||
              VCHARTEMP ||
              op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             ---- 서귀포우체국 관련 정희성추가 2010.07.30
              op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT) / 1000, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(MAC_AMT) / 1000, '999,999,999')) ||
              VCHARTEMP ||
              op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT + MAC_AMT) / 1000,
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(SAFE_AMT + MAC_AMT) / 1000, '999,999,999')) ||
              VCHARTEMP
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT_BRANCH
      WHERE ORG_CD = PORGCD
            AND BRANCH_CD = PBRANCHCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      IF PORGCD = '011' THEN
        SELECT op.fc_length('농협중앙회') || ',' || '농협중앙회'
        INTO VFD_TEMP
        FROM DUAL;
      ELSE
        SELECT op.fc_length('국민은행') || ',' || '국민은행'
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      IF PORGCD = '011' THEN
        SELECT op.fc_length('367-17-019954') || ',' || '367-17-019954'
        INTO VFD_TEMP
        FROM DUAL;
      ELSE
        SELECT op.fc_length('001-25-0025-900') || ',' || '001-25-0025-900'
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(BRANCH_NM || ' 일괄관리 관련 팀장님 ') || ',' || BRANCH_NM ||
             ' 일괄관리 관련 팀장님 '
      INTO VFD_TEMP
      FROM OP.T_CM_BRANCH
      WHERE ORG_CD = PORGCD
            AND BRANCH_CD = PBRANCHCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForPost',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORPOST;

  PROCEDURE SP_PACKOPAMTNEEDFORKANGJU(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                      PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                      PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                      PFAXCD    IN VARCHAR2,
                                      PPAGENO   IN NUMBER,
                                      PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
    VCHARTEMP2 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForKangju
    
      -- header  
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || BRANCH.BRANCH_NM) || ',' || ORG.ORG_NM ||
               BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD    := VFD_TEMP;
      VCHARTEMP := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || op.fc_length(NVL(PBRANCHCD, ' ')) || ',' ||
             NVL(PBRANCHCD, ' ') ||
             
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') || -- 당영업일
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || -- 익영업일    
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || -- 전영업일
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || -- 전영업일
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || -- 전영업일
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || -- 전영업일
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') || -- 당영업일
             
             op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM OP.T_FN_PACK_BRANCH
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --total
      SELECT SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 PRETOTALAMT,
             SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000 TOTALAMT,
             SUM(OPER_AMT) / 1000 OPERAMT,
             SUM(OUT_AMT) / 1000 OUTAMT,
             SUM(IN_AMT) / 1000 INAMT
      INTO VT_PT,
           VT_T,
           VT_OP,
           VT_OU,
           VT_IN
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      --total jijum
      SELECT SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 PRETOTALAMT,
             SUM(MAC_AMT + SAFE_AMT) / 1000 TOTALAMT,
             SUM(OPER_AMT) / 1000 OPERAMT,
             SUM(OUT_AMT) / 1000 OUTAMT,
             SUM(IN_AMT) / 1000 INAMT
      INTO VTJ_PT,
           VTJ_T,
           VTJ_OP,
           VTJ_OU,
           VTJ_IN
      FROM OP.T_FN_PACK_INVENT_BRANCH
      WHERE ORG_CD = PORGCD
            AND BRANCH_CD = PBRANCHCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      --total before  
      SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
      INTO VTB_D
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND
            CLOSE_DATE =
            OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
    
      --total jijum before  
      SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
      INTO VTJB_D
      FROM OP.T_FN_PACK_INVENT_BRANCH
      WHERE ORG_CD = PORGCD
            AND BRANCH_CD = PBRANCHCD
            AND
            CLOSE_DATE =
            OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
    
      --aaa
    
      SELECT A.AMT SAFEAMT,
             (A.AMT - B.AMT) CHAMT
      INTO VA_S,
           VA_C
      FROM (SELECT SUM(SAFE_AMT) / 1000 AMT
            FROM OP.T_FN_PACK_INVENT
            WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = PORGCD) A,
           
           (SELECT SUM(POST_TRANS_AMT) / 1000 AMT
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = PORGCD) B;
    
      /*     2012/04/12  황도영 
             일괄관리 운영자금 소요명세서 수정으로 인한 변경 
      */
      /*
               if pJijumCd is null then
            select op.fc_length(ltrim(to_char(vT_T,'999,999,999')))||','||ltrim(to_char(vT_T,'999,999,999'))||
             vCharTemp||
             op.fc_length(ltrim(to_char(vT_Pt-vTB_D,'999,999,999')))||','||ltrim(to_char(vT_Pt-vTB_D,'999,999,999'))||
             op.fc_length(ltrim(to_char(vT_Op,'999,999,999')))||','||ltrim(to_char(vT_Op,'999,999,999'))||
             op.fc_length(ltrim(to_char(vTB_D,'999,999,999')))||','||ltrim(to_char(vTB_D,'999,999,999'))||
             op.fc_length(ltrim(to_char(vT_Ou,'999,999,999')))||','||ltrim(to_char(vT_Ou,'999,999,999'))||
             op.fc_length(ltrim(to_char(vT_In,'999,999,999')))||','||ltrim(to_char(vT_In,'999,999,999'))||
             op.fc_length(ltrim(to_char(vA_S,'999,999,999')))||','||ltrim(to_char(vA_S,'999,999,999'))||
             vCharTemp||
             op.fc_length(ltrim(to_char(vA_C,'999,999,999')))||','||ltrim(to_char(vA_C,'999,999,999'))
            into vFd_temp       
            from dual;      
               else
            select op.fc_length(ltrim(to_char(vTJ_T,'999,999,999')))||','||ltrim(to_char(vTJ_T,'999,999,999'))||
             vCharTemp||
             op.fc_length(ltrim(to_char(vTJ_Pt-vTJB_D,'999,999,999')))||','||ltrim(to_char(vTJ_Pt-vTJB_D,'999,999,999'))||
             op.fc_length(ltrim(to_char(vTJ_Op,'999,999,999')))||','||ltrim(to_char(vTJ_Op,'999,999,999'))||
             op.fc_length(ltrim(to_char(vTJB_D,'999,999,999')))||','||ltrim(to_char(vTJB_D,'999,999,999'))||
             op.fc_length(ltrim(to_char(vTJ_Ou,'999,999,999')))||','||ltrim(to_char(vTJ_Ou,'999,999,999'))||
             op.fc_length(ltrim(to_char(vTJ_In,'999,999,999')))||','||ltrim(to_char(vTJ_In,'999,999,999'))||
             op.fc_length(ltrim(to_char(vA_C,'999,999,999')))||','||ltrim(to_char(vA_C,'999,999,999'))||
             vCharTemp||
             op.fc_length(ltrim(to_char(vA_S,'999,999,999')))||','||ltrim(to_char(vA_S,'999,999,999'))
            into vFd_temp       
            from dual;       
               end if ;              
        -----------------------------------------------------------------------------------------------------------------------        
      
          vFd_hd :=  vFd_hd||vFd_temp; 
      
            select op.fc_length(PACK_RCV_PART||' '||PACK_RCV_PERSON)||','|| PACK_RCV_PART||' '||PACK_RCV_PERSON
            into vFd_temp
            from OP.t_fn_org_info
            where 
            org_cd=pOrgCd;
      
          vFd_hd :=  vFd_hd||vFd_temp;      
      */
    
      --전전영업일
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE,
                                                                       2),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE, 2),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VCHARTEMP2
      FROM DUAL;
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(LTRIM(TO_CHAR(VT_T, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VT_T, '999,999,999')) || VCHARTEMP ||
               op.fc_length(LTRIM(TO_CHAR(VT_PT - VTB_D, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VT_PT - VTB_D, '999,999,999')) || VCHARTEMP2 ||
               op.fc_length(LTRIM(TO_CHAR(VT_OP, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VT_OP, '999,999,999')) || VCHARTEMP ||
               op.fc_length(LTRIM(TO_CHAR(VTB_D, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTB_D, '999,999,999')) || VCHARTEMP ||
               op.fc_length(LTRIM(TO_CHAR(VT_OU, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VT_OU, '999,999,999')) || VCHARTEMP ||
               op.fc_length(LTRIM(TO_CHAR(VT_IN, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VT_IN, '999,999,999')) || VCHARTEMP --||
        --       op.fc_length(ltrim(to_char(vA_S,'999,999,999')))||','||ltrim(to_char(vA_S,'999,999,999'))||
        --       vCharTemp
        --       ||op.fc_length(ltrim(to_char(vA_C,'999,999,999')))||','||ltrim(to_char(vA_C,'999,999,999'))
        
        INTO VFD_TEMP
        FROM DUAL;
      ELSE
        SELECT op.fc_length(LTRIM(TO_CHAR(VTJ_T, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJ_T, '999,999,999')) || VCHARTEMP ||
               op.fc_length(LTRIM(TO_CHAR(VTJ_PT - VTJB_D, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJ_PT - VTJB_D, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VTJ_OP, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJ_OP, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VTJB_D, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJB_D, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VTJ_OU, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJ_OU, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VTJ_IN, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VTJ_IN, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(VA_C, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(VA_C, '999,999,999')) || VCHARTEMP
        --       ||op.fc_length(ltrim(to_char(vA_S,'999,999,999')))||','||ltrim(to_char(vA_S,'999,999,999'))
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --- 금고재고 신규    
      SELECT
      
       VCHARTEMP || VCHARTEMP || VCHARTEMP || VCHARTEMP ||
       op.fc_length(LTRIM(TO_CHAR(AA.MAC_AMT + AA.SAFE_AMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(AA.MAC_AMT + AA.SAFE_AMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(AA.MAC_AMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(AA.MAC_AMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(AA.SAFE_AMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(AA.SAFE_AMT, '999,999,999'))
      
      /*        vCharTemp2||vCharTemp||vCharTemp||vCharTemp||vCharTemp||vCharTemp||
                op.fc_length(ltrim(to_char(AA.pre_Safe_amt,'999,999,999')))||','||ltrim(to_char(AA.pre_Safe_amt,'999,999,999'))||
            op.fc_length(ltrim(to_char(AA.ord_Send_Amt,'999,999,999')))||','||ltrim(to_char(AA.ord_Send_Amt,'999,999,999'))||
            op.fc_length(ltrim(to_char(AA.PLUS_SEND_AMT,'999,999,999')))||','||ltrim(to_char(AA.PLUS_SEND_AMT,'999,999,999'))||   
            op.fc_length(ltrim(to_char(AA.OPER_AMT,'999,999,999')))||','||ltrim(to_char(AA.OPER_AMT,'999,999,999'))||                     
            op.fc_length(ltrim(to_char(AA.CLOSE_AMT,'999,999,999')))||','||ltrim(to_char(AA.CLOSE_AMT,'999,999,999'))||    
            op.fc_length(ltrim(to_char(AA.SAFE_AMT,'999,999,999')))||','||ltrim(to_char(AA.SAFE_AMT,'999,999,999'))
      */
      INTO VFD_TEMP
      FROM (SELECT SUM(PRE_SAFE_AMT) / 1000 PRE_SAFE_AMT,
                   SUM(ORD_SEND_AMT) / 1000 ORD_SEND_AMT,
                   SUM(PLUS_SEND_AMT) / 1000 PLUS_SEND_AMT,
                   SUM(OPER_AMT) / 1000 OPER_AMT,
                   SUM(CLOSE_AMT) / 1000 CLOSE_AMT,
                   SUM(SAFE_AMT) / 1000 SAFE_AMT,
                   SUM(MAC_AMT) / 1000 MAC_AMT
            FROM OP.T_FN_PACK_INVENT
            WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = PORGCD) AA;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
    
      VT_PT  := 0;
      VT_T   := 0;
      VT_OP  := 0;
      VT_OU  := 0;
      VT_IN  := 0;
      VTJ_PT := 0;
      VTJ_T  := 0;
      VTJ_OP := 0;
      VTJ_OU := 0;
      VTJ_IN := 0;
      VTB_D  := 0;
      VTJB_D := 0;
      VA_S   := 0;
      VA_C   := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForKangju',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORKANGJU;

  PROCEDURE SP_PACKOPAMTNEEDFORKB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT         NUMBER := 0;
    VAMT1        NUMBER := 0;
    VAMT2        NUMBER := 0;
    VAMT3        NUMBER := 0;
    VAMT4        NUMBER := 0;
    VAMT5        NUMBER := 0;
    VCHARTEMP    VARCHAR2(30);
    VCHARTEMP1   VARCHAR2(30);
    VPLUSOLD     NUMBER := 0; -- 17시기준 마감전 추가 (영업일)
    VPLUSBEFORE1 NUMBER := 0; -- 17시기준 마감후 추가(영업일)
    VPLUSBEFORE2 NUMBER := 0; -- 휴일추가
    VPLUSBEFORE  NUMBER := 0; -- 총 마감후 추가
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForKB
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP,
           VCHARTEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(BRANCH.BRANCH_NM) || ',' || BRANCH.BRANCH_NM ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEALTRAN, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.DEALTRAN, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.TOTAMT + DEMAND.PREADD,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.TOTAMT + DEMAND.PREADD,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.TOTAMT - DEMAND.POSTTRAN,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.TOTAMT - DEMAND.POSTTRAN,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
                       op.fc_length('*') || ',' || '*' ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.TOTAMT + DEMAND.PREADD -
                                             DEMAND.PRECOLLECTAMT -
                                             DEMAND.DIFFERAMT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.TOTAMT + DEMAND.PREADD -
                                     DEMAND.PRECOLLECTAMT - DEMAND.DIFFERAMT,
                                     '999,999,999')) || op.fc_length('*') || ',' || '*' LIST_DATA
                FROM (
                      
                      SELECT A.DEMAND_DATE,
                              A.ORG_CD,
                              A.BRANCH_CD,
                              B.POSTTRAN DEALTRAN,
                              A.POSTTRAN TOTAMT,
                              A.PREADD,
                              A.PRERESPECTAMT,
                              A.DIFFERAMT,
                              A.PRECOLLECTAMT,
                              A.DEMANDAMT,
                              A.BALAMT,
                              NVL(C.LIMIT, 0) LIMIT,
                              CASE
                                WHEN (NVL(A.POSTTRAN, 0) - NVL(C.LIMIT, 0)) >= 0 THEN
                                 NVL(C.LIMIT, 0)
                                WHEN (NVL(A.POSTTRAN, 0) - NVL(C.LIMIT, 0)) < 0 THEN
                                 NVL(A.POSTTRAN, 0)
                              END AS POSTTRAN
                      FROM (SELECT DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                                    SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                                    SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                                    SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                                    SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                                    SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                                    SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE = PDATE
                                   AND ORG_CD = PORGCD
                                   AND NOT (POST_TRANS_AMT = '0' AND
                                    PRE_ADD_TRANS_AMT = '0' AND
                                    PRE_COLLECT_AMT = '0' AND
                                    DIFFER_AMT = '0' AND DEMAND_AMT = '0')
                                   AND BRANCH_CD > '1000' -- 20080826
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) A,
                            
                            (SELECT DEMAND_DATE DAT,
                                    PDATE DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE =
                                   OP.SF_GETPREACTDATE(PDATE)
                                   AND ORG_CD = PORGCD
                             --  AND NOT(POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0'  AND PRE_COLLECT_AMT = '0'  AND DIFFER_AMT = '0' and DEMAND_AMT ='0')
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) B,
                            
                            (SELECT ORG_CD,
                                    BRANCH_CD,
                                    FLOOR(SUM(SEND_AMT) / 1000000) * 1000 LIMIT
                             FROM OP.T_FN_KB_SENDPLAN
                             WHERE YYYYMM = substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                                   1,
                                                   6)
                                   AND
                                   WEEK_NO =
                                   OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                             GROUP BY ORG_CD,
                                      BRANCH_CD) C
                      WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                            AND A.ORG_CD = B.ORG_CD(+)
                            AND A.BRANCH_CD = B.BRANCH_CD(+)
                            AND A.ORG_CD = C.ORG_CD(+)
                            AND A.BRANCH_CD = C.BRANCH_CD(+)) DEMAND,
                     
                     OP.T_CM_BRANCH BRANCH
                WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
                      AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD
                ORDER BY BRANCH.BRANCH_NM) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        -- 회수예상치 작게보이기적용 2010.07.01 정희성
        SELECT SUM(PRE_RESPECT_AMT) / 1000 - 30000000 PRERESPECTAMT,
               SUM(CUR_RESPECT_AMT) / 1000 - 30000000 BALAMT
        INTO VAMT1,
             VAMT2
        FROM OP.T_FN_PACK_DEMAND
        WHERE DEMAND_DATE = PDATE
              AND ORG_CD = PORGCD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
          VAMT2 := 0;
      END;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEALTRAN), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DEALTRAN), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.TOTAMT + DEMAND.PREADD),
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.TOTAMT + DEMAND.PREADD),
                            '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.TOTAMT - DEMAND.POSTTRAN),
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.TOTAMT - DEMAND.POSTTRAN),
                            '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(VAMT1, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(VAMT1, '999,999,999')) ||
             --op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
             --  ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(VAMT2, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(VAMT2, '999,999,999')),
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))
      --          op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
      --            ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))
      INTO VFD_L2,
           VFD_TEMP
      FROM (
            
            SELECT A.DEMAND_DATE,
                    A.ORG_CD,
                    A.BRANCH_CD,
                    B.POSTTRAN DEALTRAN,
                    A.POSTTRAN TOTAMT,
                    A.PREADD,
                    A.PRERESPECTAMT,
                    A.DIFFERAMT,
                    A.PRECOLLECTAMT,
                    A.DEMANDAMT,
                    A.BALAMT,
                    NVL(C.LIMIT, 0) LIMIT,
                    CASE
                      WHEN (A.POSTTRAN - C.LIMIT) >= 0 THEN
                       C.LIMIT
                      WHEN (A.POSTTRAN - C.LIMIT) < 0 THEN
                       A.POSTTRAN
                    END AS POSTTRAN
            FROM (SELECT DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                          SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                          SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                          SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                          SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                          SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                          SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = PDATE
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) A,
                  
                  (SELECT DEMAND_DATE DAT,
                          PDATE DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) B,
                  
                  (SELECT ORG_CD,
                          BRANCH_CD,
                          FLOOR(SUM(SEND_AMT) / 1000000) * 1000 LIMIT
                   FROM OP.T_FN_KB_SENDPLAN
                   WHERE YYYYMM =
                         substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                         AND
                         WEEK_NO =
                         OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                   GROUP BY ORG_CD,
                            BRANCH_CD) C
            WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                  AND A.ORG_CD = B.ORG_CD(+)
                  AND A.BRANCH_CD = B.BRANCH_CD(+)
                  AND A.ORG_CD = C.ORG_CD(+)
                  AND A.BRANCH_CD = C.BRANCH_CD(+)) DEMAND,
           
           OP.T_CM_BRANCH BRANCH
      WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
            AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD;
      --      ORDER BY BRANCH.BRANCH_NM;
    
      -- 전영업일 마감전추가(17시) 구하기
      BEGIN
        SELECT SUM(SEND_AMT) / 1000
        INTO VPLUSOLD
        FROM OP.T_FN_SEND
        WHERE SEND_DATE = OP.SF_GETPREACTDATE(PDATE)
              AND ORG_CD = PORGCD
              AND SEND_TYPE = '2'
              AND SEND_STATUS = '2'
              AND SEND_TIME < '170000';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VPLUSOLD := 0;
      END;
    
      -- 전영업일 마감후추가(17시이후) 구하기  
      BEGIN
        SELECT SUM(SEND_AMT) / 1000
        INTO VPLUSBEFORE1
        FROM OP.T_FN_SEND
        WHERE SEND_DATE = OP.SF_GETPREACTDATE(PDATE)
              AND ORG_CD = PORGCD
              AND SEND_TYPE = '2'
              AND SEND_STATUS = '2'
              AND SEND_TIME >= '170000';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VPLUSBEFORE1 := 0;
      END;
    
      -- 휴일추가 구하기  
      BEGIN
        SELECT SUM(SEND_AMT) / 1000
        INTO VPLUSBEFORE2
        FROM OP.T_FN_SEND
        WHERE SEND_DATE >= OP.SF_GETAFTERPREACTDATE(PDATE)
              AND SEND_DATE <= OP.SF_GETBEFOREDATE(PDATE)
              AND ORG_CD = PORGCD
              AND SEND_TYPE = '2'
              AND SEND_STATUS = '2';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VPLUSBEFORE2 := 0;
      END;
    
      IF VPLUSOLD IS NULL THEN
        VPLUSOLD := 0;
      END IF;
    
      IF VPLUSBEFORE1 IS NULL THEN
        VPLUSBEFORE1 := 0;
      END IF;
    
      IF VPLUSBEFORE2 IS NULL THEN
        VPLUSBEFORE2 := 0;
      END IF;
    
      VPLUSBEFORE := VPLUSBEFORE1 + VPLUSBEFORE2;
    
      SELECT VFD_TEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT - IN_AMT + OUT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT - IN_AMT + OUT_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) /
                                   SUM(CLOSE_AMT - IN_AMT + OUT_AMT) * 100,
                                   '999.9'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT) /
                           SUM(CLOSE_AMT - IN_AMT + OUT_AMT) * 100,
                           '999.9')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VPLUSOLD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VPLUSOLD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) /
                                   SUM(CLOSE_AMT - IN_AMT + OUT_AMT) * 100,
                                   '999.9'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / SUM(CLOSE_AMT - IN_AMT + OUT_AMT) * 100,
                           '999.9')) ||
             op.fc_length(LTRIM(TO_CHAR(VPLUSBEFORE, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VPLUSBEFORE, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForKB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORKB;

  PROCEDURE SP_PACKOPAMTNEEDFORSG(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForSG
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP,
           VCHARTEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(BRANCH.BRANCH_NM) || ',' || BRANCH.BRANCH_NM ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEALTRAN, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.DEALTRAN, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN + DEMAND.PREADD,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.POSTTRAN + DEMAND.PREADD,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
                       op.fc_length('*') || ',' || '*' ||
                       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')) ||
                       op.fc_length('*') || ',' || '*' LIST_DATA
                FROM (
                      
                      SELECT A.DEMAND_DATE,
                              A.ORG_CD,
                              A.BRANCH_CD,
                              NVL(B.POSTTRAN, 0) DEALTRAN,
                              A.POSTTRAN POSTTRAN,
                              A.PREADD,
                              A.PRERESPECTAMT,
                              A.DIFFERAMT,
                              A.PRECOLLECTAMT,
                              A.DEMANDAMT,
                              A.BALAMT
                      FROM (SELECT DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                                    SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                                    SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                                    SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                                    SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                                    SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                                    SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE = PDATE
                                   AND ORG_CD = PORGCD
                                   AND NOT (POST_TRANS_AMT = '0' AND
                                    PRE_ADD_TRANS_AMT = '0' AND
                                    PRE_COLLECT_AMT = '0' AND
                                    DIFFER_AMT = '0' AND DEMAND_AMT = '0')
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) A,
                            
                            (SELECT DEMAND_DATE DAT,
                                    PDATE DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE =
                                   OP.SF_GETPREACTDATE(PDATE)
                                   AND ORG_CD = PORGCD
                                   AND NOT (POST_TRANS_AMT = '0' AND
                                    PRE_ADD_TRANS_AMT = '0' AND
                                    PRE_COLLECT_AMT = '0' AND
                                    DIFFER_AMT = '0' AND DEMAND_AMT = '0')
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) B
                      
                      WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                            AND A.ORG_CD = B.ORG_CD(+)
                            AND A.BRANCH_CD = B.BRANCH_CD(+)) DEMAND,
                     
                     OP.T_CM_BRANCH BRANCH
                WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
                      AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD
                ORDER BY BRANCH.BRANCH_NM) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
               SUM(CUR_RESPECT_AMT) / 1000 BALAMT
        INTO VAMT1,
             VAMT2
        FROM OP.T_FN_PACK_DEMAND
        WHERE DEMAND_DATE = PDATE
              AND ORG_CD = PORGCD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
          VAMT2 := 0;
      END;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEALTRAN), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DEALTRAN), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN + DEMAND.PREADD),
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN + DEMAND.PREADD),
                            '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(VAMT1, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(VAMT1, '999,999,999')) ||
             --op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
             --  ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))||
              op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(VAMT2, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(VAMT2, '999,999,999')),
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))
      --          op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
      --            ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))
      INTO VFD_L2,
           VFD_TEMP
      FROM (
            
            SELECT A.DEMAND_DATE,
                    A.ORG_CD,
                    A.BRANCH_CD,
                    NVL(B.POSTTRAN, 0) DEALTRAN,
                    A.POSTTRAN POSTTRAN,
                    A.PREADD,
                    A.PRERESPECTAMT,
                    A.DIFFERAMT,
                    A.PRECOLLECTAMT,
                    A.DEMANDAMT,
                    A.BALAMT
            FROM (SELECT DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                          SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                          SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                          SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                          SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                          SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                          SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = PDATE
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) A,
                  
                  (SELECT DEMAND_DATE DAT,
                          PDATE DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) B
            
            WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                  AND A.ORG_CD = B.ORG_CD(+)
                  AND A.BRANCH_CD = B.BRANCH_CD(+)) DEMAND,
           
           OP.T_CM_BRANCH BRANCH
      WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
            AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD;
      --      ORDER BY BRANCH.BRANCH_NM;
    
      SELECT VFD_TEMP || op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                               '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT + PRE_MAC_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT + PRE_MAC_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForSG',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORSG;

  -- 제주은행양식  20101119 정희성작성
  PROCEDURE SP_PACKOPAMTNEEDFORJJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForJJ
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP,
           VCHARTEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(BRANCH.BRANCH_NM) || ',' || BRANCH.BRANCH_NM ||
                       /*        op.fc_length(ltrim(to_char(DEMAND.DEALTRAN,'999,999,999')))||','||ltrim(to_char(DEMAND.DEALTRAN,'999,999,999'))||
                       op.fc_length(ltrim(to_char(DEMAND.POSTTRAN+DEMAND.PREADD,'999,999,999')))||','||
                         ltrim(to_char(DEMAND.POSTTRAN+DEMAND.PREADD,'999,999,999'))||             */
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.PRECOLLECTAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.PRERESPECTAMT,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.PRERESPECTAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.BALAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.BALAMT, '999,999,999')) LIST_DATA
                FROM (
                      
                      SELECT A.DEMAND_DATE,
                              A.ORG_CD,
                              A.BRANCH_CD,
                              NVL(B.POSTTRAN, 0) DEALTRAN,
                              A.POSTTRAN POSTTRAN,
                              A.PREADD,
                              A.PRERESPECTAMT,
                              A.DIFFERAMT,
                              A.PRECOLLECTAMT,
                              A.DEMANDAMT,
                              A.BALAMT
                      FROM (SELECT DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                                    SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                                    SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                                    SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                                    SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                                    SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                                    SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE = PDATE
                                   AND ORG_CD = PORGCD
                                   AND NOT (POST_TRANS_AMT = '0' AND
                                    PRE_ADD_TRANS_AMT = '0' AND
                                    PRE_COLLECT_AMT = '0' AND
                                    DIFFER_AMT = '0' AND DEMAND_AMT = '0')
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) A,
                            
                            (SELECT DEMAND_DATE DAT,
                                    PDATE DEMAND_DATE,
                                    ORG_CD,
                                    BRANCH_CD,
                                    SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                             FROM OP.T_FN_PACK_BRANCH
                             WHERE DEMAND_DATE =
                                   OP.SF_GETPREACTDATE(PDATE)
                                   AND ORG_CD = PORGCD
                                   AND NOT (POST_TRANS_AMT = '0' AND
                                    PRE_ADD_TRANS_AMT = '0' AND
                                    PRE_COLLECT_AMT = '0' AND
                                    DIFFER_AMT = '0' AND DEMAND_AMT = '0')
                             GROUP BY DEMAND_DATE,
                                      ORG_CD,
                                      BRANCH_CD) B
                      
                      WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                            AND A.ORG_CD = B.ORG_CD(+)
                            AND A.BRANCH_CD = B.BRANCH_CD(+)) DEMAND,
                     
                     OP.T_CM_BRANCH BRANCH
                WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
                      AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD
                ORDER BY BRANCH.BRANCH_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
               SUM(CUR_RESPECT_AMT) / 1000 BALAMT
        INTO VAMT1,
             VAMT2
        FROM OP.T_FN_PACK_DEMAND
        WHERE DEMAND_DATE = PDATE
              AND ORG_CD = PORGCD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
          VAMT2 := 0;
      END;
    
      SELECT
      /*          op.fc_length(ltrim(to_char(sum(DEMAND.DEALTRAN),'999,999,999')))||','||ltrim(to_char(sum(DEMAND.DEALTRAN),'999,999,999'))||
      op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD),'999,999,999')))||','||
            ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD),'999,999,999'))||   */
       op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(SUM(DEMAND.POSTTRAN), '999,999,999')) ||
        op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(SUM(DEMAND.PREADD), '999,999,999')) ||
        op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(SUM(DEMAND.PRECOLLECTAMT), '999,999,999')) ||
        op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(SUM(DEMAND.DIFFERAMT), '999,999,999')) ||
        op.fc_length(LTRIM(TO_CHAR(VAMT1, '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(VAMT1, '999,999,999')) ||
       --op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
       --  ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))||
        op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999')) ||
        op.fc_length(LTRIM(TO_CHAR(VAMT2, '999,999,999'))) || ',' ||
        LTRIM(TO_CHAR(VAMT2, '999,999,999')),
       op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(DEMAND.DEMANDAMT), '999,999,999'))
      --          op.fc_length(ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999')))||','||
      --            ltrim(to_char(sum(DEMAND.POSTTRAN+DEMAND.PREADD -DEMAND.PRECOLLECTAMT-DEMAND.DIFFERAMT),'999,999,999'))
      INTO VFD_L2,
           VFD_TEMP
      FROM (
            
            SELECT A.DEMAND_DATE,
                    A.ORG_CD,
                    A.BRANCH_CD,
                    NVL(B.POSTTRAN, 0) DEALTRAN,
                    A.POSTTRAN POSTTRAN,
                    A.PREADD,
                    A.PRERESPECTAMT,
                    A.DIFFERAMT,
                    A.PRECOLLECTAMT,
                    A.DEMANDAMT,
                    A.BALAMT
            FROM (SELECT DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                          SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                          SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                          SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                          SUM(PRE_COLLECT_AMT) / 1000 PRECOLLECTAMT,
                          SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                          SUM(CUR_RESPECT_AMT) / 1000 BALAMT
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = PDATE
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) A,
                  
                  (SELECT DEMAND_DATE DAT,
                          PDATE DEMAND_DATE,
                          ORG_CD,
                          BRANCH_CD,
                          SUM(POST_TRANS_AMT) / 1000000 POSTTRAN
                   FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = OP.SF_GETPREACTDATE(PDATE)
                         AND ORG_CD = PORGCD
                         AND
                         NOT (POST_TRANS_AMT = '0' AND PRE_ADD_TRANS_AMT = '0' AND
                          PRE_COLLECT_AMT = '0' AND DIFFER_AMT = '0' AND
                          DEMAND_AMT = '0')
                   GROUP BY DEMAND_DATE,
                            ORG_CD,
                            BRANCH_CD) B
            
            WHERE A.DEMAND_DATE = B.DEMAND_DATE(+)
                  AND A.ORG_CD = B.ORG_CD(+)
                  AND A.BRANCH_CD = B.BRANCH_CD(+)) DEMAND,
           
           OP.T_CM_BRANCH BRANCH
      WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
            AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD;
      --      ORDER BY BRANCH.BRANCH_CD;
    
      SELECT VFD_TEMP || op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                               '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP --||
      /*         op.fc_length(ltrim(to_char(sum(pre_safe_amt+PRE_MAC_AMT)/1000,'999,999,999')))||','||ltrim(to_char(sum(pre_safe_amt+PRE_MAC_AMT)/1000,'999,999,999'))||
      op.fc_length(ltrim(to_char(sum(oper_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(oper_amt)/1000,'999,999,999'))||
      op.fc_length(ltrim(to_char(sum(DIFFER_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(DIFFER_amt)/1000,'999,999,999'))||
      op.fc_length(ltrim(to_char(sum(OUT_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(OUT_amt)/1000,'999,999,999'))||
      op.fc_length(ltrim(to_char(sum(IN_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(IN_amt)/1000,'999,999,999'))   */
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --list 1
    
      FOR J IN (SELECT op.fc_length(BRANCH.BRANCH_NM) || ',' || BRANCH.BRANCH_NM ||
                       /*        op.fc_length(ltrim(to_char(DEMAND.DEALTRAN,'999,999,999')))||','||ltrim(to_char(DEMAND.DEALTRAN,'999,999,999'))||
                       op.fc_length(ltrim(to_char(DEMAND.POSTTRAN+DEMAND.PREADD,'999,999,999')))||','||
                         ltrim(to_char(DEMAND.POSTTRAN+DEMAND.PREADD,'999,999,999'))||             */
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.PRETOTAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.PRETOTAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.OPERAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.OPERAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(DEMAND.TOTAMT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(DEMAND.TOTAMT, '999,999,999')) LIST_DATA
                --                INTO VFD_TEMP
                FROM (SELECT ORG_CD,
                             BRANCH_CD,
                             (PRE_SAFE_AMT + PRE_MAC_AMT) / 1000 PRETOTAMT,
                             OPER_AMT / 1000 OPERAMT,
                             DIFFER_AMT / 1000 DIFFERAMT,
                             OUT_AMT / 1000 OUTAMT,
                             IN_AMT / 1000 INAMT,
                             (SAFE_AMT + MAC_AMT) / 1000 TOTAMT
                      FROM OP.T_FN_PACK_INVENT_BRANCH
                      WHERE CLOSE_DATE =
                            OP.SF_GETPREACTDATE(PDATE)
                            AND ORG_CD = PORGCD) DEMAND,
                     OP.T_CM_BRANCH BRANCH
                WHERE DEMAND.ORG_CD = BRANCH.ORG_CD
                      AND DEMAND.BRANCH_CD = BRANCH.BRANCH_CD
                ORDER BY BRANCH.BRANCH_CD) LOOP
      
        VFD_L2 := VFD_L2 || J.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT + PRE_MAC_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT + PRE_MAC_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_L3 := VFD_L3 || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_L3 := VFD_L3 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_L3    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForJJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORJJ;

  PROCEDURE SP_PACKOPAMTNEEDFORKN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForKn
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             --'20141028'--op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||
             --'20141028'--    to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
             --'20141028'--op.fc_length(ltrim(to_char(nvl(pre.pre_Amt,0)-PRERESPECTAMT,'999,999,999')))||','||ltrim(to_char(nvl(pre.pre_Amt,0)-PRERESPECTAMT,'999,999,999'))||
             --'20141028'--op.fc_length(ltrim(to_char(nvl(cur.cur_Amt,0)-CURRESPECTAMT,'999,999,999')))||','||ltrim(to_char(nvl(cur.cur_Amt,0)-CURRESPECTAMT,'999,999,999'))||
             --op.fc_length(ltrim(to_char(PRERESPECTAMT,'999,999,999')))||','||ltrim(to_char(PRERESPECTAMT,'999,999,999'))||
             --op.fc_length(ltrim(to_char(CURRESPECTAMT,'999,999,999')))||','||ltrim(to_char(CURRESPECTAMT,'999,999,999'))||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT -
                                    (DEMAND.POSTTRAN + DEMAND.PREADD -
                                    DEMAND.CLOSEAMT - DEMAND.DIFFERAMT),
                                    '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.DEMANDAMT -
                            (DEMAND.POSTTRAN + DEMAND.PREADD -
                            DEMAND.CLOSEAMT - DEMAND.DIFFERAMT),
                            '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP,
           VCHARTEMP1
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM --T_FN_PACK_BRANCH   -- hossong 20141020 (전두휘과장 요청사항)
                 OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
            --     AND BRANCH_CD LIKE '%#OZParam.BRANCHCD#%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND,
           
           (SELECT ORG_CD,
                   SUM(DECODE(OP.SF_GETWEEKDAY(OP.SF_GETPREACTDATE(PDATE)),
                              '1',
                              COLLECT_RESPECT1_AMT,
                              '2',
                              COLLECT_RESPECT2_AMT,
                              '3',
                              COLLECT_RESPECT3_AMT,
                              '4',
                              COLLECT_RESPECT4_AMT,
                              '5',
                              COLLECT_RESPECT5_AMT,
                              '6',
                              COLLECT_RESPECT6_AMT,
                              '7',
                              COLLECT_RESPECT7_AMT)) / 1000 PRE_AMT
            FROM OP.T_FN_COLLECT_RESPECT_AMT
            WHERE START_DATE <= OP.SF_GETPREACTDATE(PDATE)
                  AND END_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = PORGCD
            GROUP BY ORG_CD) PRE,
           
           (SELECT ORG_CD,
                   SUM(DECODE(OP.SF_GETWEEKDAY(PDATE),
                              '1',
                              COLLECT_RESPECT1_AMT,
                              '2',
                              COLLECT_RESPECT2_AMT,
                              '3',
                              COLLECT_RESPECT3_AMT,
                              '4',
                              COLLECT_RESPECT4_AMT,
                              '5',
                              COLLECT_RESPECT5_AMT,
                              '6',
                              COLLECT_RESPECT6_AMT,
                              '7',
                              COLLECT_RESPECT7_AMT)) / 1000 CUR_AMT
            FROM OP.T_FN_COLLECT_RESPECT_AMT
            WHERE START_DATE <= PDATE
                  AND END_DATE >= PDATE
                  AND ORG_CD = PORGCD
            GROUP BY ORG_CD) CUR
      WHERE DEMAND.ORG_CD = PRE.ORG_CD(+)
            AND DEMAND.ORG_CD = CUR.ORG_CD(+);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --------------------------------------------------------------------------         
      BEGIN
        SELECT SUM(DIFFER_AMT) / 1000 DIFFERAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT - DIFFER_AMT) / 1000,
                           '999,999,999')) || VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 -
                                   VAMT1,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 - VAMT1,
                           '999,999,999')) || VCHARTEMP1 ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(OUT_AMT) / 1000, 0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(int(ROUND(SUM(OUT_AMT) / 1000, 0)), '999,999,999')) ||
             VCHARTEMP ||
             op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(IN_AMT) / 1000, 0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(int(ROUND(SUM(IN_AMT) / 1000, 0)), '999,999,999')) ||
             VCHARTEMP
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD     := '';
      VFD_TEMP   := '';
      VCHARTEMP  := '';
      VCHARTEMP1 := '';
      VAMT1      := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForKn',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORKN;

  PROCEDURE SP_PACKOPAMTNEEDFORSINHAN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                      PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                      PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                      PFAXCD    IN VARCHAR2,
                                      PPAGENO   IN NUMBER,
                                      PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForSinHan
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT
      --        op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||
      --          to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
       op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE), 'yyyymmdd'),
               'yyyy-mm-dd') ||
       op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                       'yyyymmdd') -
               TO_DATE(OP.SF_GETPOSTACTDATE(PDATE), 'yyyymmdd') + 1,
               '99') || op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                                'yyyymmdd'),
                                        'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE), 'yyyymmdd'),
               'yyyy-mm-dd') ||
       op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                               'yyyymmdd'),
                       'yyyy-mm-dd')) || ',' ||
       TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                       'yyyymmdd'),
               'yyyy-mm-dd') || lengthb(' ') || ',' || ' ' ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(PRERESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(CURRESPECTAMT, '999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT DEMAND_DATE,
--                   ORG_CD,
                   SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) / 1000 PREADD,
                   SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) / 1000 CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) / 1000 PRERESPECTAMT,
                   SUM(DIFFER_AMT) / 1000 DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) / 1000 CLOSEAMT
            
            FROM --OP.T_FN_PACK_OFCJJM
                 OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD IN ('088', '021')
            -- AND BRANCH_CD LIKE DECODE('#OZParam.BRANCHCD#','000000',''||'%','%#OZParam.BRANCHCD#%')
            --     AND BRANCH_CD LIKE '%#OZParam.BRANCHCD#%'
            GROUP BY DEMAND_DATE) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      -- 기준일자 생성
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_WK_SEND_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_PLUS_WK_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(SAFE_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM --OP.t_fn_pack_invent_ofcjjm
           OP.T_FN_PACK_INVENT_SH
      WHERE ORG_CD IN ('088', '021')
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForSinHan',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORSINHAN;

  ----정희성수정 20080521
  PROCEDURE SP_PACKOPAMTSENDPLANFORKB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                      PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                      PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                      PFAXCD    IN VARCHAR2,
                                      PPAGENO   IN NUMBER,
                                      PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --현송계획 산정근거 PackOpAmtSendPlanForKB
    
      -- header  
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_TEMP;
    
      ----------------------------
      FOR K IN (SELECT op.fc_length(BRANCH_CD) || ',' || BRANCH_CD ||
                       op.fc_length(LTRIM(TO_CHAR(SUM(AMT) / 1000, '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(SUM(AMT) / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0)),
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(INAMT) / 1000, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(int(ROUND(SUM(INAMT) / 1000, 0)),
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0) -
                                             ROUND(SUM(INAMT) / 1000, 0)),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0) -
                                     ROUND(SUM(INAMT) / 1000, 0)),
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(CASE
                                               WHEN SUM(AMT) = 0 THEN
                                                0
                                               ELSE
                                                INT(ROUND(((SUM(AMT) / 1000) -
                                                      ROUND(SUM(OUTAMT) / 1000, -0) +
                                                      ROUND(SUM(INAMT) / 1000, 0)) /
                                                      (SUM(AMT) / 1000),
                                                      4) * 100)
                                             END,
                                             '999.90'))) || ',' ||
                       LTRIM(TO_CHAR(CASE
                                       WHEN SUM(AMT) = 0 THEN
                                        0
                                       ELSE
                                        INT(ROUND(((SUM(AMT) / 1000) -
                                              ROUND(SUM(OUTAMT) / 1000, -0) +
                                              ROUND(SUM(INAMT) / 1000, 0)) /
                                              (SUM(AMT) / 1000),
                                              4) * 100)
                                     END,
                                     '999.90')) LIST_DATA
                FROM (SELECT A.BRANCH_CD,
                             CASE
                               WHEN (A.AMT - B.LIMIT) >= 0 THEN
                                B.LIMIT
                               WHEN (A.AMT - B.LIMIT) < 0 THEN
                                A.AMT
                             END AS AMT,
                             B.OUTAMT,
                             B.INAMT,
                             (B.OUTAMT - B.INAMT) INOUTAMT,
                             (A.AMT - B.OUTAMT + B.INAMT) / A.AMT FFF
                      FROM (SELECT DAT,
                                   WEEK,
                                   BRANCH_CD,
                                   SUM(AMT) AMT
                            FROM (SELECT substr2(SEND_DATE, 1, 6) DAT,
                                         OP.SF_GETWEEKDAY(SEND_DATE) WEEK,
                                         BRANCH_CD,
                                         MAC_NO,
                                         DECODE(LAST_SEND_TYPE,
                                                '1',
                                                PLAN_SEND_AMT,
                                                CHANGE_SEND_AMT) AMT
                                  FROM OP.T_FN_SENDPLAN
                                  WHERE SEND_DATE =
                                        OP.SF_GETPOSTACTDATE(PDATE)
                                        AND ORG_CD = '004'
                                        AND CANCEL_TYPE = '0'
                                        AND DECODE(LAST_SEND_TYPE,
                                                   '1',
                                                   PLAN_SEND_AMT,
                                                   CHANGE_SEND_AMT) <> 0)
                            GROUP BY DAT,
                                     WEEK,
                                     BRANCH_CD) A,
                           (SELECT YYYYMM,
                                   WEEK_NO WEEK,
                                   BRANCH_CD,
                                   FLOOR(SUM(SEND_AMT) / 1000000) * 1000000 LIMIT,
                                   SUM(OUT_AMT) OUTAMT,
                                   SUM(IN_AMT) INAMT
                            FROM OP.T_FN_KB_SENDPLAN
                            WHERE YYYYMM = substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                                  1,
                                                  6)
                                  AND
                                  WEEK_NO =
                                  OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                            GROUP BY YYYYMM,
                                     WEEK_NO,
                                     BRANCH_CD) B
                      WHERE A.DAT = B.YYYYMM(+)
                            AND A.WEEK = B.WEEK(+)
                            AND A.BRANCH_CD = B.BRANCH_CD(+))
                GROUP BY BRANCH_CD
                ORDER BY BRANCH_CD
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(INAMT) / 1000, 0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(int(ROUND(SUM(INAMT) / 1000, 0)), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0) -
                                   ROUND(SUM(INAMT) / 1000, 0)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(int(ROUND(SUM(OUTAMT) / 1000, 0) -
                           ROUND(SUM(INAMT) / 1000, 0)),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INT(CASE
                                     WHEN SUM(AMT) = 0 THEN
                                      0
                                     ELSE
                                      ROUND(((SUM(AMT) / 1000) - ROUND(SUM(OUTAMT) / 1000, 0) +
                                            ROUND(SUM(INAMT) / 1000, 0)) / (SUM(AMT) / 1000),
                                            4) * 100
                                   END),
                                   '999.90'))) || ',' ||
             LTRIM(TO_CHAR(INT(CASE
                             WHEN SUM(AMT) = 0 THEN
                              0
                             ELSE
                              ROUND(((SUM(AMT) / 1000) - ROUND(SUM(OUTAMT) / 1000, 0) +
                                    ROUND(SUM(INAMT) / 1000, 0)) / (SUM(AMT) / 1000),
                                    4) * 100
                           END),
                           '999.90'))
      
      INTO VFD_L2
      FROM (SELECT A.BRANCH_CD,
                   CASE
                     WHEN (A.AMT - B.LIMIT) >= 0 THEN
                      B.LIMIT
                     WHEN (A.AMT - B.LIMIT) < 0 THEN
                      A.AMT
                   END AS AMT,
                   B.OUTAMT OUTAMT,
                   B.INAMT INAMT,
                   (B.OUTAMT - B.INAMT) INOUTAMT,
                   (A.AMT - B.OUTAMT + B.INAMT) / A.AMT FFF
            FROM (SELECT DAT,
                         WEEK,
                         BRANCH_CD,
                         SUM(AMT) AMT
                  FROM (SELECT substr2(SEND_DATE, 1, 6) DAT,
                               OP.SF_GETWEEKDAY(SEND_DATE) WEEK,
                               BRANCH_CD,
                               MAC_NO,
                               DECODE(LAST_SEND_TYPE,
                                      '1',
                                      PLAN_SEND_AMT,
                                      CHANGE_SEND_AMT) AMT
                        FROM OP.T_FN_SENDPLAN
                        WHERE SEND_DATE =
                              OP.SF_GETPOSTACTDATE(PDATE)
                              AND ORG_CD = '004'
                              AND CANCEL_TYPE = '0')
                  GROUP BY DAT,
                           WEEK,
                           BRANCH_CD) A,
                 (SELECT YYYYMM,
                         WEEK_NO WEEK,
                         BRANCH_CD,
                         FLOOR(SUM(SEND_AMT) / 1000000) * 1000000 LIMIT,
                         SUM(OUT_AMT) OUTAMT,
                         SUM(IN_AMT) INAMT
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND
                        WEEK_NO =
                        OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                  GROUP BY YYYYMM,
                           WEEK_NO,
                           BRANCH_CD) B
            WHERE A.DAT = B.YYYYMM(+)
                  AND A.WEEK = B.WEEK(+)
                  AND A.BRANCH_CD = B.BRANCH_CD(+));
    
      SELECT op.fc_length(GUBUN1) || ',' || GUBUN1 ||
             op.fc_length(LTRIM(TO_CHAR(SENDAMT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SENDAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTALAMT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTALAMT1, '999,999,999')) ||
             op.fc_length(VARCHAR(MACCNT1)) || ',' || MACCNT1 ||
             op.fc_length(REMARK1) || ',' || REMARK1 || op.fc_length(GUBUN2) || ',' ||
             GUBUN2 || op.fc_length(LTRIM(TO_CHAR(SENDAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SENDAMT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTALAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTALAMT2, '999,999,999')) ||
             op.fc_length(VARCHAR(MACCNT2)) || ',' || MACCNT2 ||
             op.fc_length(REMARK2) || ',' || REMARK2 || op.fc_length(GUBUN3) || ',' ||
             GUBUN3 || op.fc_length(LTRIM(TO_CHAR(SENDAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SENDAMT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTALAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTALAMT3, '999,999,999')) ||
             op.fc_length(VARCHAR(MACCNT3)) || ',' || MACCNT3 ||
             op.fc_length(REMARK3) || ',' || REMARK3 || op.fc_length(GUBUN4) || ',' ||
             GUBUN4 || op.fc_length(LTRIM(TO_CHAR(SENDAMT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SENDAMT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTALAMT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTALAMT4, '999,999,999')) ||
             op.fc_length(VARCHAR(MACCNT4)) || ',' || MACCNT4 ||
             op.fc_length(REMARK4) || ',' || REMARK4
      INTO VFD_TEMP
      FROM (SELECT '지급>입금(200초과)' GUBUN1,
                   SUM(A.SEND_AMT) / 1000 SENDAMT1,
                   SUM(A.OUT_AMT) / 1000 OUTAMT1,
                   SUM(A.IN_AMT) / 1000 INAMT1,
                   SUM(A.TOTAL_AMT) / 1000 TOTALAMT1,
                   SUM(A.MAC_CNT) || '대' MACCNT1,
                   '사용금액 * 2' REMARK1,
                   '지급>입금(200미만)' GUBUN2,
                   SUM(B.SEND_AMT) / 1000 SENDAMT2,
                   SUM(B.OUT_AMT) / 1000 OUTAMT2,
                   SUM(B.IN_AMT) / 1000 INAMT2,
                   SUM(B.TOTAL_AMT) / 1000 TOTALAMT2,
                   SUM(B.MAC_CNT) || '대' MACCNT2,
                   '현송액:대당4백만원' REMARK2,
                   '지급<입금' GUBUN3,
                   SUM(C.SEND_AMT) / 1000 SENDAMT3,
                   SUM(C.OUT_AMT) / 1000 OUTAMT3,
                   SUM(C.IN_AMT) / 1000 INAMT3,
                   SUM(C.TOTAL_AMT) / 1000 TOTALAMT3,
                   SUM(C.MAC_CNT) || '대' MACCNT3,
                   '현송액:대당4백만원' REMARK3,
                   '합  계' GUBUN4,
                   SUM(D.SEND_AMT) / 1000 SENDAMT4,
                   SUM(D.OUT_AMT) / 1000 OUTAMT4,
                   SUM(D.IN_AMT) / 1000 INAMT4,
                   SUM(D.TOTAL_AMT) / 1000 TOTALAMT4,
                   SUM(D.MAC_CNT) || '대' MACCNT4,
                   '   ' REMARK4
            
            FROM (SELECT SUM(SEND_AMT) SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(TOTAL_AMT) TOTAL_AMT,
                         COUNT(MAC_NO) MAC_CNT
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE WEEK_NO =
                        OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                        AND
                        YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND TOTAL_AMT > 2000000) A,
                 (SELECT SUM(SEND_AMT) SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(TOTAL_AMT) TOTAL_AMT,
                         COUNT(MAC_NO) MAC_CNT
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE WEEK_NO =
                        OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                        AND
                        YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND TOTAL_AMT >= 0
                        AND TOTAL_AMT <= 2000000) B,
                 (SELECT SUM(SEND_AMT) SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(TOTAL_AMT) TOTAL_AMT,
                         COUNT(MAC_NO) MAC_CNT
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE WEEK_NO =
                        OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                        AND
                        YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND OUT_AMT < IN_AMT) C,
                 
                 (SELECT SUM(SEND_AMT) SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(TOTAL_AMT) TOTAL_AMT,
                         SUM(MAC_CNT) MAC_CNT
                  FROM (SELECT SUM(SEND_AMT) SEND_AMT,
                               SUM(OUT_AMT) OUT_AMT,
                               SUM(IN_AMT) IN_AMT,
                               SUM(TOTAL_AMT) TOTAL_AMT,
                               COUNT(MAC_NO) MAC_CNT
                        FROM OP.T_FN_KB_SENDPLAN
                        WHERE WEEK_NO =
                              OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                              AND YYYYMM = substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                                  1,
                                                  6)
                              AND TOTAL_AMT > 2000000
                        UNION ALL
                        SELECT SUM(SEND_AMT) SEND_AMT,
                               SUM(OUT_AMT) OUT_AMT,
                               SUM(IN_AMT) IN_AMT,
                               SUM(TOTAL_AMT) TOTAL_AMT,
                               COUNT(MAC_NO) MAC_CNT
                        FROM OP.T_FN_KB_SENDPLAN
                        WHERE WEEK_NO =
                              OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                              AND YYYYMM = substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                                  1,
                                                  6)
                              AND TOTAL_AMT >= 0
                              AND TOTAL_AMT <= 2000000
                        UNION ALL
                        SELECT SUM(SEND_AMT) SEND_AMT,
                               SUM(OUT_AMT) OUT_AMT,
                               SUM(IN_AMT) IN_AMT,
                               SUM(TOTAL_AMT) TOTAL_AMT,
                               COUNT(MAC_NO) MAC_CNT
                        FROM OP.T_FN_KB_SENDPLAN
                        WHERE WEEK_NO =
                              OP.SF_GETWEEKDAY(OP.SF_GETPOSTACTDATE(PDATE))
                              AND YYYYMM = substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                                  1,
                                                  6)
                              AND OUT_AMT < IN_AMT)) D);
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      SELECT op.fc_length(GUOUT) || ',' || GUOUT ||
             op.fc_length(LTRIM(TO_CHAR(OUT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUT5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUT5, '999,999,999')) || op.fc_length(GUIN) || ',' || GUIN ||
             op.fc_length(LTRIM(TO_CHAR(IN1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(IN1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(IN2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(IN2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(IN3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(IN3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(IN4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(IN4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(IN5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(IN5, '999,999,999')) || op.fc_length(GUTOT) || ',' ||
             GUTOT || op.fc_length(LTRIM(TO_CHAR(TOT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOT5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOT5, '999,999,999')) || op.fc_length(GUMACCNT1) || ',' ||
             GUMACCNT1 || op.fc_length(LTRIM(TO_CHAR(MACCNT1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT5, '999,999,999')) || op.fc_length(GUMACCNT2) || ',' ||
             GUMACCNT2 || op.fc_length(LTRIM(TO_CHAR(MACCNT6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT7, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT7, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT8, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT8, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT9, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT9, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACCNT10, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACCNT10, '999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT '지급액' GUOUT,
                   SUM(OUT1) OUT1,
                   SUM(OUT2) OUT2,
                   SUM(OUT3) OUT3,
                   SUM(OUT4) OUT4,
                   SUM(OUT5) OUT5,
                   '입금액' GUIN,
                   SUM(IN1) IN1,
                   SUM(IN2) IN2,
                   SUM(IN3) IN3,
                   SUM(IN4) IN4,
                   SUM(IN5) IN5,
                   '일일사용액' GUTOT,
                   SUM(TOT1) TOT1,
                   SUM(TOT2) TOT2,
                   SUM(TOT3) TOT3,
                   SUM(TOT4) TOT4,
                   SUM(TOT5) TOT5,
                   '지급>입금(200미만)' GUMACCNT1,
                   SUM(MACCNT1) MACCNT1,
                   SUM(MACCNT2) MACCNT2,
                   SUM(MACCNT3) MACCNT3,
                   SUM(MACCNT4) MACCNT4,
                   SUM(MACCNT5) MACCNT5,
                   '지급<입금' GUMACCNT2,
                   SUM(MACCNT6) MACCNT6,
                   SUM(MACCNT7) MACCNT7,
                   SUM(MACCNT8) MACCNT8,
                   SUM(MACCNT9) MACCNT9,
                   SUM(MACCNT10) MACCNT10
            FROM (SELECT WEEK_NO WEEK,
                         DECODE(WEEK_NO, 2, SUM(OUT_AMT) / 1000, 0) OUT1,
                         DECODE(WEEK_NO, 3, SUM(OUT_AMT) / 1000, 0) OUT2,
                         DECODE(WEEK_NO, 4, SUM(OUT_AMT) / 1000, 0) OUT3,
                         DECODE(WEEK_NO, 5, SUM(OUT_AMT) / 1000, 0) OUT4,
                         DECODE(WEEK_NO, 6, SUM(OUT_AMT) / 1000, 0) OUT5,
                         DECODE(WEEK_NO, 2, SUM(IN_AMT) / 1000, 0) IN1,
                         DECODE(WEEK_NO, 3, SUM(IN_AMT) / 1000, 0) IN2,
                         DECODE(WEEK_NO, 4, SUM(IN_AMT) / 1000, 0) IN3,
                         DECODE(WEEK_NO, 5, SUM(IN_AMT) / 1000, 0) IN4,
                         DECODE(WEEK_NO, 6, SUM(IN_AMT) / 1000, 0) IN5,
                         DECODE(WEEK_NO, 2, SUM(TOTAL_AMT) / 1000, 0) TOT1,
                         DECODE(WEEK_NO, 3, SUM(TOTAL_AMT) / 1000, 0) TOT2,
                         DECODE(WEEK_NO, 4, SUM(TOTAL_AMT) / 1000, 0) TOT3,
                         DECODE(WEEK_NO, 5, SUM(TOTAL_AMT) / 1000, 0) TOT4,
                         DECODE(WEEK_NO, 6, SUM(TOTAL_AMT) / 1000, 0) TOT5
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                  GROUP BY WEEK_NO) A,
                 (SELECT WEEK_NO WEEK,
                         DECODE(WEEK_NO, 2, COUNT(MAC_NO), 0) MACCNT1,
                         DECODE(WEEK_NO, 3, COUNT(MAC_NO), 0) MACCNT2,
                         DECODE(WEEK_NO, 4, COUNT(MAC_NO), 0) MACCNT3,
                         DECODE(WEEK_NO, 5, COUNT(MAC_NO), 0) MACCNT4,
                         DECODE(WEEK_NO, 6, COUNT(MAC_NO), 0) MACCNT5
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND TOTAL_AMT >= 0
                        AND TOTAL_AMT <= 2000000
                  GROUP BY WEEK_NO) B,
                 (SELECT WEEK_NO WEEK,
                         DECODE(WEEK_NO, 2, COUNT(MAC_NO), 0) MACCNT6,
                         DECODE(WEEK_NO, 3, COUNT(MAC_NO), 0) MACCNT7,
                         DECODE(WEEK_NO, 4, COUNT(MAC_NO), 0) MACCNT8,
                         DECODE(WEEK_NO, 5, COUNT(MAC_NO), 0) MACCNT9,
                         DECODE(WEEK_NO, 6, COUNT(MAC_NO), 0) MACCNT10
                  FROM OP.T_FN_KB_SENDPLAN
                  WHERE YYYYMM =
                        substr2(OP.SF_GETPOSTACTDATE(PDATE), 1, 6)
                        AND OUT_AMT < IN_AMT
                  GROUP BY WEEK_NO) C
            WHERE A.WEEK = B.WEEK(+)
                  AND A.WEEK = C.WEEK(+));
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtSendPlanForKB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTSENDPLANFORKB;
  -- 정희성수정종료 20080521

  PROCEDURE SP_PACKOPAMTNEEDFORHANMI(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                     PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                     PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                     PFAXCD    IN VARCHAR2,
                                     PPAGENO   IN NUMBER,
                                     PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeedForHanmi      
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(PDATE),
                                     'yyyymmdd') -
                             TO_DATE((PDATE), 'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(PDATE),
                             'yyyymmdd') - TO_DATE((PDATE), 'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE((PDATE), 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE((PDATE), 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '9,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '9,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '99,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '99,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '9,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '9,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '99,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '99,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                                   SUM(DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                           SUM(DIFFER_AMT) / 1000,
                           '999,999,999'))
      
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
      SELECT op.fc_length(PACK_RCV_PART || ' ' || '정성훈차장님,양영주차장님') || ',' ||
             PACK_RCV_PART || ' ' || '정성훈차장님,양영주차장님'
      --    select op.fc_length(PACK_RCV_PART||' '||PACK_RCV_PERSON)||','||PACK_RCV_PART||' '||PACK_RCV_PERSON       
      --    select op.fc_length(PACK_RCV_PERSON)||','||PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VAMT1    := 0;
      VAMT2    := 0;
      VAMT3    := 0;
      VAMT4    := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForHanmi',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORHANMI;

  PROCEDURE SP_PACKOPAMTNEED(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                             PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                             PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                             PFAXCD    IN VARCHAR2,
                             PPAGENO   IN NUMBER,
                             PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT  NUMBER := 0;
    VAMT1 NUMBER := 0;
    VAMT2 NUMBER := 0;
    VAMT3 NUMBER := 0;
    VAMT4 NUMBER := 0;
    VAMT5 NUMBER := 0;
  
    VAMT6 NUMBER := 0;
    VAMT7 NUMBER := 0;
    VAMT8 NUMBER := 0;
  
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 PackOpAmtNeed      
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --------------------------------------------------------
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             SUM(DIFFER_AMT) / 1000,
             SUM(DEMAND_AMT) / 1000
      INTO VFD_TEMP,
           VAMT1,
           VAMT2
      FROM OP.T_FN_PACK_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000 + VAMT1,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000 + VAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CASE
                                     WHEN SUM(C.PRE_AMT) = 0 THEN
                                      0
                                     ELSE
                                      SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                                   END,
                                   '999.0'))) || ',' ||
             LTRIM(TO_CHAR(CASE
                             WHEN SUM(C.PRE_AMT) = 0 THEN
                              0
                             ELSE
                              SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                           END,
                           '999.0')) || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000 + VAMT1,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000 + VAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CASE
                                     WHEN SUM(C.PRE_AMT) = 0 THEN
                                      0
                                     ELSE
                                      SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                                   END,
                                   '999.0'))) || ',' ||
             LTRIM(TO_CHAR(CASE
                             WHEN SUM(C.PRE_AMT) = 0 THEN
                              0
                             ELSE
                              SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                           END,
                           '999.0'))
      INTO VFD_TEMP
      FROM OP.T_FN_CLOSE C,
           OP.T_CM_SITE  S
      WHERE C.ORG_CD = S.ORG_CD
            AND C.BRANCH_CD = S.BRANCH_CD
            AND C.SITE_CD = S.SITE_CD
            AND C.CLOSE_DATE BETWEEN OP.SF_GETPREACTDATE(PDATE) AND
            OP.SF_GETBEFOREDATE(PDATE)
            AND C.ORG_CD = PORGCD
      GROUP BY C.ORG_CD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                                   SUM(DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                           SUM(DIFFER_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length('0') || ',' || '0' || op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                                   SUM(DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                           SUM(DIFFER_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')),
             SUM(MAC_AMT + SAFE_AMT) / 1000 - SUM(DIFFER_AMT) / 1000
      INTO VFD_TEMP,
           VAMT3
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      BEGIN
        SELECT SUM(C.OUT_AMT) / 1000 - SUM(C.IN_AMT) / 1000
        INTO VAMT4
        FROM OP.T_FN_CLOSE C
        WHERE C.CLOSE_DATE BETWEEN
              OP.SF_GETAFTERPREACTDATE(PDATE) AND
              OP.SF_GETBEFOREDATE(PDATE)
              AND C.ORG_CD = PORGCD
        GROUP BY C.ORG_CD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT4 := 0;
      END;
    
      BEGIN
        SELECT SUM(DECODE(OP.SF_GETWEEKDAY(PDATE),
                          1,
                          COLLECT_RESPECT1_AMT,
                          2,
                          COLLECT_RESPECT2_AMT,
                          3,
                          COLLECT_RESPECT3_AMT,
                          4,
                          COLLECT_RESPECT4_AMT,
                          5,
                          COLLECT_RESPECT5_AMT,
                          6,
                          COLLECT_RESPECT6_AMT,
                          7,
                          COLLECT_RESPECT7_AMT)) / 1000 COLLECT_RESPECT_AMT
        INTO VAMT5
        FROM OP.T_FN_COLLECT_RESPECT_AMT
        WHERE START_DATE <= PDATE
              AND END_DATE >= PDATE
              AND ORG_CD = PORGCD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT5 := 0;
      END;
    
      -----------------------------------------------------------------------------
      BEGIN
        SELECT NVL(SUM(DEMAND_AMT) / 1000, 0) DEMANDAMT
        INTO VAMT6
        FROM OP.T_FN_PACK_DEMAND
        WHERE DEMAND_DATE = PDATE
              AND ORG_CD = PORGCD
              AND OPER_TYPE = '0';
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT6 := 0;
      END;
    
      SELECT NVL(SUM(MAC_AMT + SAFE_AMT) / 1000 - SUM(DIFFER_AMT) / 1000, 0)
      INTO VAMT7
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
            AND OPER_TYPE = 3;
    
      --close
      SELECT NVL(SUM(C.OUT_AMT) / 1000 - SUM(C.IN_AMT) / 1000, 0)
      INTO VAMT8
      FROM OP.T_FN_CLOSE C
      WHERE C.CLOSE_DATE BETWEEN OP.SF_GETAFTERPREACTDATE(PDATE) AND
            OP.SF_GETBEFOREDATE(PDATE)
            AND C.ORG_CD = PORGCD;
      -----------------------------------------------------------------------------          
      /*
              select   op.fc_length(ltrim(to_char(sum(ord_send_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(ord_send_amt)/1000,'999,999,999'))||
                op.fc_length(ltrim(to_char(vAmt2,'999,999,999')))||','||ltrim(to_char(vAmt2,'999,999,999'))||
                op.fc_length(ltrim(to_char(sum(plus_send_amt)/1000,'999,999,999')))||','||ltrim(to_char(sum(plus_send_amt)/1000,'999,999,999'))||
                op.fc_length(ltrim(to_char(vAmt2+vAmt3,'999,999,999')))||','||ltrim(to_char(vAmt2+vAmt3,'999,999,999'))||
                op.fc_length('0')||','||'0'||
                op.fc_length(ltrim(to_char(0,'999,999,999')))||','||ltrim(to_char(0,'999,999,999'))||
                op.fc_length('0')||','||'0'||
                op.fc_length(ltrim(to_char(vAmt5,'999,999,999')))||','||ltrim(to_char(vAmt5,'999,999,999'))
              into vFd_temp        
              from 
              OP.t_fn_pack_invent 
              where 
              close_date between OP.sf_getPreActDate(pDate) and OP.sf_getBeforeDate(pDate)
              and org_cd=pOrgCd;
      */
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT2 + VAMT6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT2 + VAMT6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
             
             op.fc_length(LTRIM(TO_CHAR(VAMT2 + VAMT3 + VAMT7 + VAMT6,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT2 + VAMT3 + VAMT7 + VAMT6, '999,999,999')) ||
             
             op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(VAMT8, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT8, '999,999,999')) || op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(VAMT5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT5, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE CLOSE_DATE BETWEEN OP.SF_GETPREACTDATE(PDATE) AND
            OP.SF_GETBEFOREDATE(PDATE)
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
      /*     
      select op.fc_length(PACK_RCV_PERSON)||','||PACK_RCV_PERSON
      into vFd_temp
      from OP.t_fn_org_info
      where 
      org_cd=pOrgCd;
       
           vFd_hd :=  vFd_hd||vFd_temp;  
      */
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VAMT1    := 0;
      VAMT2    := 0;
      VAMT3    := 0;
      VAMT4    := 0;
      VAMT5    := 0;
    
      VAMT6 := 0;
      VAMT7 := 0;
      VAMT8 := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeed',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEED;

  -- 우리은행 신규양식  2011.03.25
  PROCEDURE SP_PACKOPAMTNEEDFORWR(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT  NUMBER := 0;
    VAMT1 NUMBER := 0;
    VAMT2 NUMBER := 0;
    VAMT3 NUMBER := 0;
    VAMT4 NUMBER := 0;
    VAMT5 NUMBER := 0;
  
    VAMT6 NUMBER := 0;
    VAMT7 NUMBER := 0;
    VAMT8 NUMBER := 0;
  
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 소요명세서 sp_PackOpAmtNeedForWR      
    
      -- header  
    
      SELECT op.fc_length(NVL(substr2(PACK_RCV_PART, 1, 4), '')) || ',' ||
             NVL(substr2(PACK_RCV_PART, 1, 4), '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      /*     select 
       op.fc_length(NVL(substr2(pack_RCV_PART,5,6),'')||NVL(pack_RCV_person,''))||','
       ||NVL(substr2(pack_RCV_PART,5,6),'')||' '||NVL(pack_RCV_person,'')
      into   vFd_temp     
      from OP.t_fn_org_info
      where  org_cd=pOrgCd;
      
      vFd_hd := vFd_hd||vFd_temp;   */
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --------------------------------------------------------
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(POST_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_ADD_TRANS_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT - PRE_ADD_TRANS_AMT -
                                       PRE_RESPECT_AMT + DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_COLLECT_AMT - PRE_ADD_TRANS_AMT -
                               PRE_RESPECT_AMT + DIFFER_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CUR_RESPECT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DEMAND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd'),
             SUM(DIFFER_AMT) / 1000,
             SUM(DEMAND_AMT) / 1000
      INTO VFD_TEMP,
           VAMT1,
           VAMT2
      FROM OP.T_FN_PACK_DEMAND
      WHERE DEMAND_DATE = PDATE
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.PRE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(C.CLOSE_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CASE
                                     WHEN SUM(C.PRE_AMT) = 0 THEN
                                      0
                                     ELSE
                                      SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                                   END,
                                   '999.0'))) || ',' ||
             LTRIM(TO_CHAR(CASE
                             WHEN SUM(C.PRE_AMT) = 0 THEN
                              0
                             ELSE
                              SUM(C.OUT_AMT) / SUM(C.PRE_AMT) * 100
                           END,
                           '999.0')) ||
             op.fc_length(LTRIM(TO_CHAR(CASE
                                     WHEN SUM(C.PRE_AMT) = 0 THEN
                                      0
                                     ELSE
                                      SUM(C.CLOSE_AMT) / SUM(C.PRE_AMT) * 100
                                   END,
                                   '999.0'))) || ',' ||
             LTRIM(TO_CHAR(CASE
                             WHEN SUM(C.PRE_AMT) = 0 THEN
                              0
                             ELSE
                              SUM(C.CLOSE_AMT) / SUM(C.PRE_AMT) * 100
                           END,
                           '999.0'))
      INTO VFD_TEMP
      FROM OP.T_FN_CLOSE C,
           OP.T_CM_SITE  S
      WHERE C.ORG_CD = S.ORG_CD
            AND C.BRANCH_CD = S.BRANCH_CD
            AND C.SITE_CD = S.SITE_CD
            AND C.CLOSE_DATE BETWEEN OP.SF_GETPREACTDATE(PDATE) AND
            OP.SF_GETBEFOREDATE(PDATE)
            AND C.ORG_CD = PORGCD
      GROUP BY C.ORG_CD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                                   SUM(DIFFER_AMT) / 1000,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT) / 1000 -
                           SUM(DIFFER_AMT) / 1000,
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(DIFFER_AMT) / 1000, '999,999,999')),
             SUM(MAC_AMT + SAFE_AMT) / 1000 - SUM(DIFFER_AMT) / 1000
      INTO VFD_TEMP,
           VAMT3
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      BEGIN
        SELECT SUM(C.OUT_AMT) / 1000 - SUM(C.IN_AMT) / 1000
        INTO VAMT4
        FROM OP.T_FN_CLOSE C
        WHERE C.CLOSE_DATE BETWEEN
              OP.SF_GETAFTERPREACTDATE(PDATE) AND
              OP.SF_GETBEFOREDATE(PDATE)
              AND C.ORG_CD = PORGCD
        GROUP BY C.ORG_CD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT4 := 0;
      END;
    
      -----------------------------------------------------------------------------
      BEGIN
        SELECT NVL(SUM(CUR_RESPECT_AMT) / 1000, 0) CUR_RESPECT_AMT
        INTO VAMT5
        FROM OP.T_FN_PACK_DEMAND
        WHERE DEMAND_DATE = PDATE
              AND ORG_CD = PORGCD;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT5 := 0;
      END;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT) / 1000, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT2 + VAMT3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT2 + VAMT3, '999,999,999')) || op.fc_length('0') || ',' || '0' ||
             op.fc_length(LTRIM(TO_CHAR(VAMT5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT5, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(VAMT4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(VAMT4, '999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE CLOSE_DATE BETWEEN OP.SF_GETPREACTDATE(PDATE) AND
            OP.SF_GETBEFOREDATE(PDATE)
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
      /*     
      select op.fc_length(PACK_RCV_PERSON)||','||PACK_RCV_PERSON
      into vFd_temp
      from OP.t_fn_org_info
      where 
      org_cd=pOrgCd;
       
           vFd_hd :=  vFd_hd||vFd_temp;  
      */
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VAMT1    := 0;
      VAMT2    := 0;
      VAMT3    := 0;
      VAMT4    := 0;
      VAMT5    := 0;
    
      VAMT6 := 0;
      VAMT7 := 0;
      VAMT8 := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForWR',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORWR;

  PROCEDURE SP_PACKOPAMTCLOSINGTABLEKN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                       PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                       PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                       PFAXCD    IN VARCHAR2,
                                       PPAGENO   IN NUMBER,
                                       PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
    VCHARTEMP2 LONG VARCHAR;
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 마감표 PackOpAmtclosingTableKn
    
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) ||
                       op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                       LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                       op.fc_length(REPORT.BRANCH_CD || '-' || REPORT.MAC_NO) || ',' ||
                       REPORT.BRANCH_CD || '-' || REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.IN_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_CNT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                             REPORT.DIFFER_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                     REPORT.DIFFER_AMT / 1000,
                                     '999,999,999')) LIST_DATA
                
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND DEMAND_DATE = PDATE
                            AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <>
                            '0000') REPORT,
                     OP.T_CM_MAC MAC
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO
                
                ) LOOP
      -- hossong 1207 
--        VFD_L1 :=  cast(VFD_L1 as long varchar) || K.LIST_DATA;
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;

      END LOOP;
      VFD_L1 := VCHARTEMP2;  
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.DIFFER_CNT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.DIFFER_CNT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.DIFFER_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.DIFFER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000 +
                                       REPORT.DIFFER_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000 +
                               REPORT.DIFFER_AMT / 1000),
                           '999,999,999')) LIST_DATA
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
      VFD_TEMP1 := '';
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableKn',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEKN;

  PROCEDURE SP_PACKOPAMTCLOSINGTABLEFORCHB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 마감표 PackOpAmtclosingTableForCHB
    
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일' ||
                      op.fc_length(PBRANCHCD || '점') || ',' || PBRANCHCD || '점'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      --list 1
    
      FOR K IN (
                
                SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                        substr2(MAC.MAC_NM, 1, 11) || op.fc_length(REPORT.MAC_NO) || ',' ||
                        REPORT.MAC_NO ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                      '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.IN_AMT / 1000, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.DIFFER_AMT / 1000, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000, '999,999,999')) LIST_DATA
                FROM (SELECT *
                       FROM OP.T_FN_PACK_REPORT
                       WHERE ORG_CD = PORGCD
                             AND BRANCH_CD = PBRANCHCD
                             AND DEMAND_DATE = PDATE
                             AND NOT (CLOSE_AMT = '0' AND PRE_SEND_AMT = '0' AND
                              IN_AMT = '0' AND OUT_AMT = '0')) REPORT,
                      OP.T_CM_MAC MAC
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                ORDER BY REPORT.ORG_CD,
                          REPORT.BRANCH_CD,
                          REPORT.MAC_NO
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.DIFFER_CNT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.DIFFER_CNT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.DIFFER_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.DIFFER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD
                  AND DEMAND_DATE = PDATE
                  AND NOT (CLOSE_AMT = '0' AND PRE_SEND_AMT = '0' AND
                   IN_AMT = '0' AND OUT_AMT = '0')) REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableForCHB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEFORCHB;

  PROCEDURE SP_PACKCASHTRANPLANTABLEFORCHB(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 현송계획표 PackCashTranPlanTableForCHB
    
      -- header 
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일' || op.fc_length(PBRANCHCD || '점') || ',' ||
             PBRANCHCD || '점'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                     5,
                                     2) || '월' ||
                              substr2(OP.SF_GETPOSTACTDATE(PDATE),
                                     7,
                                     2) || '일') || ',' ||
                      substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
                      substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일' ||
                      op.fc_length(substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                            '1',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') - 1,
                                                    'YYYYMMDD'),
                                            '2',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 5,
                                                    'YYYYMMDD'),
                                            '3',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 4,
                                                    'YYYYMMDD'),
                                            '4',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 3,
                                                    'YYYYMMDD'),
                                            '5',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 2,
                                                    'YYYYMMDD'),
                                            '6',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 1,
                                                    'YYYYMMDD'),
                                            PDATE),
                                     5,
                                     2) || '월' ||
                              substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                            '1',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') - 1,
                                                    'YYYYMMDD'),
                                            '2',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 5,
                                                    'YYYYMMDD'),
                                            '3',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 4,
                                                    'YYYYMMDD'),
                                            '4',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 3,
                                                    'YYYYMMDD'),
                                            '5',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 2,
                                                    'YYYYMMDD'),
                                            '6',
                                            TO_CHAR(TO_DATE(PDATE,
                                                            'YYYYMMDD') + 1,
                                                    'YYYYMMDD'),
                                            PDATE),
                                     7,
                                     2) || '일') || ',' ||
                      substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                    '1',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                            'YYYYMMDD'),
                                    '2',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                            'YYYYMMDD'),
                                    '3',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                            'YYYYMMDD'),
                                    '4',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                            'YYYYMMDD'),
                                    '5',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                            'YYYYMMDD'),
                                    '6',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                            'YYYYMMDD'),
                                    PDATE),
                             5,
                             2) || '월' ||
                      substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                    '1',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                            'YYYYMMDD'),
                                    '2',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                            'YYYYMMDD'),
                                    '3',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                            'YYYYMMDD'),
                                    '4',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                            'YYYYMMDD'),
                                    '5',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                            'YYYYMMDD'),
                                    '6',
                                    TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                            'YYYYMMDD'),
                                    PDATE),
                             7,
                             2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) || op.fc_length(COMPANY.CD_NM1) || ',' ||
                       COMPANY.CD_NM1 || op.fc_length(MACHINE.CD_NM1) || ',' ||
                       MACHINE.CD_NM1 || op.fc_length(REPORT.MAC_NO) || ',' ||
                       REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT) / 1000,
                                     '999,999,999')) LIST_DATA
                
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND BRANCH_CD = PBRANCHCD
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.BRANCH_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.WKD_SENDPLAN_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.WKD_SENDPLAN_AMT / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((REPORT.POST_SENDPLAN_AMT +
                                       REPORT.WKD_SENDPLAN_AMT +
                                       REPORT.PLUS_SEND_AMT) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((REPORT.POST_SENDPLAN_AMT +
                               REPORT.WKD_SENDPLAN_AMT +
                               REPORT.PLUS_SEND_AMT) / 1000),
                           '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTableForCHB',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLEFORCHB;

  PROCEDURE SP_NICEACTUALRESULTREPORT(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                      PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                      PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                      PFAXCD    IN VARCHAR2,
                                      PPAGENO   IN NUMBER,
                                      PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VMAXDATE VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReport 
    
      --select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE),
                     OP.SF_GETBEFOREDATE(PDATE)) A,
           (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
            FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE),
                     OP.SF_GETBEFOREDATE(PDATE)) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      -- header  
    
      IF VCNT2 > 0 THEN
      
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(A.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(A.DEAL_DATE, 5, 2) || '월' ||
                         substr2(A.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) A,
                       (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
                        FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) B
                  WHERE A.DEAL_DATE = B.DEAL_DATE(+)) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) A,
             (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
              FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) B
        WHERE A.DEAL_DATE = B.DEAL_DATE(+);
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*  
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReport',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORT;

  -- 외환 전체수수료
  --외환브랜드실적
  PROCEDURE SP_NICEACTUALRESULTREPORTFORKE(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VMAXDATE VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReport 
    
      --select /*+ first row */
      --        select /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */   count(*)
      /*        into  vCnt
      from    OP.t_Fn_nice_tran_notend 
      where org_cd=pOrgCd and deal_date<= to_char(to_date(pDate,'yyyymmdd')-1,'yyyymmdd')
      and deal_status='2'
      and deal_type = '0'
      and deal_date>=
                     (select 
                             max(demand_date) demand_date 
                      from   OP.t_fn_nice_demand 
                      where 
                            demand_date<pDate
                      and org_cd=pOrgCd);
                      --and rownum =1  ;  */
    
      VCNT := 0;
    
      -- 신규전체 수수료구하기
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_DEAL_CNT,
                              0)) TIMECNT,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_CUST_FEE,
                              0)) TIMECUST,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_CUST_FEE + TIME_BANK_FEE,
                              0)) TIMENICE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_BANK_FEE,
                              0)) * -1 TIMEBANK,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_DEAL_CNT,
                              0)) OTCNT,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_CUST_FEE,
                              0)) OTCUST,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_CUST_FEE + OT_BANK_FEE,
                              0)) OTNICE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_BANK_FEE,
                              0)) * -1 OTBANK,
                   /* 외환은행 통장이체 43004 추가로 인해 수수료가 틀려짐->전체 이체건으로 집계처리 by bhj 2013.04.04
                   sum(decode(deal_type||deal_clss,'40000',time_deal_cnt+ot_deal_cnt,0)) acccnt,
                   sum(decode(deal_type||deal_clss,'40000',time_cust_fee+ot_cust_fee,0)) acccust,
                   sum(decode(deal_type||deal_clss,'40000',time_cust_fee+time_bank_fee+ot_cust_fee+ot_bank_fee,0)) accnice,
                   sum(decode(deal_type||deal_clss,'40000',time_bank_fee+ot_bank_fee,0))*-1 accbank
                   */
                   SUM(DECODE(DEAL_TYPE, '4', TIME_DEAL_CNT + OT_DEAL_CNT, 0)) ACCCNT,
                   SUM(DECODE(DEAL_TYPE, '4', TIME_CUST_FEE + OT_CUST_FEE, 0)) ACCCUST,
                   SUM(DECODE(DEAL_TYPE,
                              '4',
                              TIME_CUST_FEE + TIME_BANK_FEE + OT_CUST_FEE +
                              OT_BANK_FEE,
                              0)) ACCNICE,
                   SUM(DECODE(DEAL_TYPE, '4', TIME_BANK_FEE + OT_BANK_FEE, 0)) * -1 ACCBANK
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_STATUS = '0'
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            GROUP BY DEAL_DATE);
    
      /*  - 기존브랜드 수수료구하기
          select  count(*)
           into vCnt2
            from
                (select deal_date,
                          sum(decode(deal_type||deal_clss,'01000',time_deal_cnt,0)) timecnt,
                          sum(decode(deal_type||deal_clss,'01000',time_cust_fee,0)) timecust,
                          sum(decode(deal_type||deal_clss,'01000',time_cust_fee+time_bank_fee,0)) timenice,
                          sum(decode(deal_type||deal_clss,'01000',time_bank_fee,0))*-1 timebank,
                          sum(decode(deal_type||deal_clss,'01000',ot_deal_cnt,0)) otcnt,
                          sum(decode(deal_type||deal_clss,'01000',ot_cust_fee,0)) otcust,
                          sum(decode(deal_type||deal_clss,'01000',ot_cust_fee+ot_bank_fee,0)) otnice,
                          sum(decode(deal_type||deal_clss,'01000',ot_bank_fee,0))*-1 otbank,
                          sum(decode(deal_type||deal_clss,'40000',time_deal_cnt+ot_deal_cnt,0)) acccnt,
                          sum(decode(deal_type||deal_clss,'40000',time_cust_fee+ot_cust_fee,0)) acccust,
                          sum(decode(deal_type||deal_clss,'40000',time_cust_fee+time_bank_fee+ot_cust_fee+ot_bank_fee,0)) accnice,
                          sum(decode(deal_type||deal_clss,'40000',time_bank_fee+ot_bank_fee,0))*-1 accbank
                          from OP.t_fn_nice_brand_mac_dsum 
                          where brand_org_cd = pOrgCd
                          and deal_status='0'
                          and deal_date >= OP.sf_getPreActDate(pDate)
                          and deal_date <= to_char(to_date(pDate,'yyyymmdd')-1,'yyyymmdd') 
                          group by deal_date
                      );                        
      */
      -- header  
    
      IF VCNT2 > 0 THEN
      
        /*   select 
         op.fc_length(NVL(NICE_RCV_PART,''))||','|| NVL(NICE_RCV_PART,'') 
        into   vFd_temp     
        from OP.t_fn_org_info
        where  org_cd=pOrgCd;
        
        vFd_hd :=  vFd_temp;             */
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
        VFD_HD := VFD_TEMP;
        --         vFd_hd :=  vFd_hd||vFd_temp;
      
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(DEAL_DATE, 5, 2) || '월' ||
                                 substr2(DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(DEAL_DATE, 5, 2) || '월' ||
                         substr2(DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMECUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMECUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMENICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMENICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMEBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMEBANK, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTCUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTCUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTNICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTNICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTBANK, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCCUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCCUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCNICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCNICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCBANK, '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_DEAL_CNT,
                                          0)) TIMECNT,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_CUST_FEE,
                                          0)) TIMECUST,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_CUST_FEE + TIME_BANK_FEE,
                                          0)) TIMENICE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_BANK_FEE,
                                          0)) * -1 TIMEBANK,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_DEAL_CNT,
                                          0)) OTCNT,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_CUST_FEE,
                                          0)) OTCUST,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_CUST_FEE + OT_BANK_FEE,
                                          0)) OTNICE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_BANK_FEE,
                                          0)) * -1 OTBANK,
                               /* 외환은행 통장이체 43004 추가로 인해 수수료가 틀려짐->전체 이체건으로 집계처리 by bhj 2013.04.04
                               sum(decode(deal_type||deal_clss,'40000',time_deal_cnt+ot_deal_cnt,0)) acccnt,
                               sum(decode(deal_type||deal_clss,'40000',time_cust_fee+ot_cust_fee,0)) acccust,
                               sum(decode(deal_type||deal_clss,'40000',time_cust_fee+time_bank_fee+ot_cust_fee+ot_bank_fee,0)) accnice,
                               sum(decode(deal_type||deal_clss,'40000',time_bank_fee+ot_bank_fee,0))*-1 accbank
                               */
                               SUM(DECODE(DEAL_TYPE,
                                          '4',
                                          TIME_DEAL_CNT + OT_DEAL_CNT,
                                          0)) ACCCNT,
                               SUM(DECODE(DEAL_TYPE,
                                          '4',
                                          TIME_CUST_FEE + OT_CUST_FEE,
                                          0)) ACCCUST,
                               SUM(DECODE(DEAL_TYPE,
                                          '4',
                                          TIME_CUST_FEE + TIME_BANK_FEE +
                                          OT_CUST_FEE + OT_BANK_FEE,
                                          0)) ACCNICE,
                               SUM(DECODE(DEAL_TYPE,
                                          '4',
                                          TIME_BANK_FEE + OT_BANK_FEE,
                                          0)) * -1 ACCBANK
                        
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_STATUS = '0'
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                        GROUP BY DEAL_DATE)) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(TIMECNT + OTCNT + ACCCNT,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMECNT + OTCNT + ACCCNT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMECUST + OTCUST + ACCCUST,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMECUST + OTCUST + ACCCUST, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMENICE + OTNICE + ACCNICE,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMENICE + OTNICE + ACCNICE, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMEBANK + OTBANK + ACCBANK,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMEBANK + OTBANK + ACCBANK, '999,999,999'))
        
        /*         select  op.fc_length('합  계')||','||'합  계'||
              op.fc_length(ltrim(to_char(timecnt,'999,999,999')))||','||ltrim(to_char(timecnt,'999,999,999'))||
            op.fc_length(ltrim(to_char(timecust,'999,999,999')))||','||ltrim(to_char(timecust,'999,999,999'))||
            op.fc_length(ltrim(to_char(timenice,'999,999,999')))||','||ltrim(to_char(timenice,'999,999,999'))||
            op.fc_length(ltrim(to_char(timebank,'999,999,999')))||','||ltrim(to_char(timebank,'999,999,999'))||
              op.fc_length(ltrim(to_char(otcnt,'999,999,999')))||','||ltrim(to_char(otcnt,'999,999,999'))||
            op.fc_length(ltrim(to_char(otcust,'999,999,999')))||','||ltrim(to_char(otcust,'999,999,999'))||
            op.fc_length(ltrim(to_char(otnice,'999,999,999')))||','||ltrim(to_char(otnice,'999,999,999'))||
            op.fc_length(ltrim(to_char(otbank,'999,999,999')))||','||ltrim(to_char(otbank,'999,999,999'))||
            op.fc_length(ltrim(to_char(acccnt,'999,999,999')))||','||ltrim(to_char(acccnt,'999,999,999'))||
            op.fc_length(ltrim(to_char(acccust,'999,999,999')))||','||ltrim(to_char(acccust,'999,999,999'))||
            op.fc_length(ltrim(to_char(accnice,'999,999,999')))||','||ltrim(to_char(accnice,'999,999,999'))||
            op.fc_length(ltrim(to_char(accbank,'999,999,999')))||','||ltrim(to_char(accbank,'999,999,999')) 
        */
        INTO VFD_TEMP
        FROM (SELECT SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_DEAL_CNT,
                                0)) TIMECNT,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_CUST_FEE,
                                0)) TIMECUST,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_CUST_FEE + TIME_BANK_FEE,
                                0)) TIMENICE,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_BANK_FEE,
                                0)) * -1 TIMEBANK,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_DEAL_CNT,
                                0)) OTCNT,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_CUST_FEE,
                                0)) OTCUST,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_CUST_FEE + OT_BANK_FEE,
                                0)) OTNICE,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_BANK_FEE,
                                0)) * -1 OTBANK,
                     /* 외환은행 통장이체 43004 추가로 인해 수수료가 틀려짐->전체 이체건으로 집계처리 by bhj 2013.04.04
                     sum(decode(deal_type||deal_clss,'40000',time_deal_cnt+ot_deal_cnt,0)) acccnt,
                     sum(decode(deal_type||deal_clss,'40000',time_cust_fee+ot_cust_fee,0)) acccust,
                     sum(decode(deal_type||deal_clss,'40000',time_cust_fee+time_bank_fee+ot_cust_fee+ot_bank_fee,0)) accnice,
                     sum(decode(deal_type||deal_clss,'40000',time_bank_fee+ot_bank_fee,0))*-1 accbank
                     */
                     SUM(DECODE(DEAL_TYPE,
                                '4',
                                TIME_DEAL_CNT + OT_DEAL_CNT,
                                0)) ACCCNT,
                     SUM(DECODE(DEAL_TYPE,
                                '4',
                                TIME_CUST_FEE + OT_CUST_FEE,
                                0)) ACCCUST,
                     SUM(DECODE(DEAL_TYPE,
                                '4',
                                TIME_CUST_FEE + TIME_BANK_FEE + OT_CUST_FEE +
                                OT_BANK_FEE,
                                0)) ACCNICE,
                     SUM(DECODE(DEAL_TYPE,
                                '4',
                                TIME_BANK_FEE + OT_BANK_FEE,
                                0)) * -1 ACCBANK
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_STATUS = '0'
                    AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd'));
      
        --vFd_L1 :=  vFd_L1||vFd_temp;
        VFD_L2 := VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1,
             FD_L2)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1,
             VFD_L2);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*  
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportForKE',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTFORKE;

  -- 농협수수료 통보

  PROCEDURE SP_NICEACTUALRESULTREPORTFEENH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VMAXDATE VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 수수료통보서 sp_NiceActualResultReportFeeNh 
    
      VCNT := 0;
    
      -- 신규전체 수수료구하기
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_DEAL_CNT,
                              0)) TIMECNT,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_CUST_FEE,
                              0)) TIMECUST,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_CUST_FEE + TIME_BANK_FEE,
                              0)) TIMENICE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              TIME_BANK_FEE,
                              0)) * -1 TIMEBANK,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_DEAL_CNT,
                              0)) OTCNT,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_CUST_FEE,
                              0)) OTCUST,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_CUST_FEE + OT_BANK_FEE,
                              0)) OTNICE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '01000',
                              OT_BANK_FEE,
                              0)) * -1 OTBANK,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '40000',
                              TIME_DEAL_CNT + OT_DEAL_CNT,
                              0)) ACCCNT,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '40000',
                              TIME_CUST_FEE + OT_CUST_FEE,
                              0)) ACCCUST,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '40000',
                              TIME_CUST_FEE + TIME_BANK_FEE + OT_CUST_FEE +
                              OT_BANK_FEE,
                              0)) ACCNICE,
                   SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                              '40000',
                              TIME_BANK_FEE + OT_BANK_FEE,
                              0)) * -1 ACCBANK
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_STATUS = '0'
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            GROUP BY DEAL_DATE);
    
      IF VCNT2 > 0 THEN
      
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
        VFD_HD := VFD_HD || VFD_TEMP;
      
        FOR K IN (SELECT op.fc_length(substr2(DEAL_DATE, 5, 2) || '월' ||
                                 substr2(DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(DEAL_DATE, 5, 2) || '월' ||
                         substr2(DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMECUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMECUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMENICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMENICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(TIMEBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(TIMEBANK, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTCUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTCUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTNICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTNICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(OTBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(OTBANK, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCCUST, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCCUST, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCNICE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCNICE, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(ACCBANK, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(ACCBANK, '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_DEAL_CNT,
                                          0)) TIMECNT,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_CUST_FEE,
                                          0)) TIMECUST,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_CUST_FEE + TIME_BANK_FEE,
                                          0)) TIMENICE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          TIME_BANK_FEE,
                                          0)) * -1 TIMEBANK,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_DEAL_CNT,
                                          0)) OTCNT,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_CUST_FEE,
                                          0)) OTCUST,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_CUST_FEE + OT_BANK_FEE,
                                          0)) OTNICE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '01000',
                                          OT_BANK_FEE,
                                          0)) * -1 OTBANK,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '40000',
                                          TIME_DEAL_CNT + OT_DEAL_CNT,
                                          0)) ACCCNT,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '40000',
                                          TIME_CUST_FEE + OT_CUST_FEE,
                                          0)) ACCCUST,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '40000',
                                          TIME_CUST_FEE + TIME_BANK_FEE +
                                          OT_CUST_FEE + OT_BANK_FEE,
                                          0)) ACCNICE,
                               SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                          '40000',
                                          TIME_BANK_FEE + OT_BANK_FEE,
                                          0)) * -1 ACCBANK
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_STATUS = '0'
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                        GROUP BY DEAL_DATE)) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(TIMECNT + OTCNT + ACCCNT,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMECNT + OTCNT + ACCCNT, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMECUST + OTCUST + ACCCUST,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMECUST + OTCUST + ACCCUST, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMENICE + OTNICE + ACCNICE,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMENICE + OTNICE + ACCNICE, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(TIMEBANK + OTBANK + ACCBANK,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(TIMEBANK + OTBANK + ACCBANK, '999,999,999'))
        
        INTO VFD_TEMP
        FROM (SELECT SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_DEAL_CNT,
                                0)) TIMECNT,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_CUST_FEE,
                                0)) TIMECUST,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_CUST_FEE + TIME_BANK_FEE,
                                0)) TIMENICE,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                TIME_BANK_FEE,
                                0)) * -1 TIMEBANK,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_DEAL_CNT,
                                0)) OTCNT,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_CUST_FEE,
                                0)) OTCUST,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_CUST_FEE + OT_BANK_FEE,
                                0)) OTNICE,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '01000',
                                OT_BANK_FEE,
                                0)) * -1 OTBANK,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '40000',
                                TIME_DEAL_CNT + OT_DEAL_CNT,
                                0)) ACCCNT,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '40000',
                                TIME_CUST_FEE + OT_CUST_FEE,
                                0)) ACCCUST,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '40000',
                                TIME_CUST_FEE + TIME_BANK_FEE + OT_CUST_FEE +
                                OT_BANK_FEE,
                                0)) ACCNICE,
                     SUM(DECODE(DEAL_TYPE || DEAL_CLSS,
                                '40000',
                                TIME_BANK_FEE + OT_BANK_FEE,
                                0)) * -1 ACCBANK
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_STATUS = '0'
                    AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd'));
      
        VFD_L2 := VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1,
             FD_L2)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1,
             VFD_L2);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*  
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportFeeNh',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTFEENH;

  PROCEDURE SP_NICEACTUALRESULTREPORTDJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                        PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                        PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                        PFAXCD    IN VARCHAR2,
                                        PPAGENO   IN NUMBER,
                                        PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VMAXDATE VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReportDJ
    
      --select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) A,
           (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
            FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      -- header  
    
      IF VCNT2 > 0 THEN
      
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(A.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(A.DEAL_DATE, 5, 2) || '월' ||
                         substr2(A.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.TIMECNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.TIMECNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.OTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.OTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.TOTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.TIMEAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.TIMEAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.OTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.OTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.TOTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.TOTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) A,
                       (SELECT DEAL_DATE,
                               SUM(TIME_DEAL_CNT) TIMECNT,
                               SUM(TIME_DEAL_AMT) / 1000 TIMEAMT,
                               SUM(OT_DEAL_CNT) + SUM(NIGHT_DEAL_CNT) OTCNT,
                               SUM(OT_DEAL_AMT) / 1000 +
                               SUM(NIGHT_DEAL_AMT) / 1000 OTAMT,
                               SUM(TIME_DEAL_CNT) + SUM(OT_DEAL_CNT) +
                               SUM(NIGHT_DEAL_CNT) TOTCNT,
                               SUM(TIME_DEAL_AMT) / 1000 +
                               SUM(OT_DEAL_AMT) / 1000 +
                               SUM(NIGHT_DEAL_AMT) / 1000 TOTAMT
                        FROM OP.T_FN_DJ_BRAND_DSUM3
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND DEAL_STATUS = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) B
                  WHERE A.DEAL_DATE = B.DEAL_DATE(+)
                  ORDER BY A.DEAL_DATE) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TIMECNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.TIMECNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.OTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.TOTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TIMEAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.TIMEAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.OTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.TOTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) A,
             (SELECT DEAL_DATE,
                     SUM(TIME_DEAL_CNT) TIMECNT,
                     SUM(TIME_DEAL_AMT) / 1000 TIMEAMT,
                     SUM(OT_DEAL_CNT) + SUM(NIGHT_DEAL_CNT) OTCNT,
                     SUM(OT_DEAL_AMT) / 1000 + SUM(NIGHT_DEAL_AMT) / 1000 OTAMT,
                     SUM(TIME_DEAL_CNT) + SUM(OT_DEAL_CNT) +
                     SUM(NIGHT_DEAL_CNT) TOTCNT,
                     SUM(TIME_DEAL_AMT) / 1000 + SUM(OT_DEAL_AMT) / 1000 +
                     SUM(NIGHT_DEAL_AMT) / 1000 TOTAMT
              FROM OP.T_FN_DJ_BRAND_DSUM3
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_STATUS = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) B
        WHERE A.DEAL_DATE = B.DEAL_DATE(+);
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*   
                             (select 
                             max(demand_date) demand_date 
                              from 
                             OP.t_fn_nice_demand 
                              where 
                             demand_date<pDate
                             and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /* 
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportDJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTDJ;

  PROCEDURE SP_NICEACTUALRESULTREPORTFORFI(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VMAXDATE VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서(제일브랜드) NiceActualResultReportForFI 
    
      --select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) A,
           (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
            FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      -- header  
    
      IF VCNT2 > 0 THEN
      
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(A.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(A.DEAL_DATE, 5, 2) || '월' ||
                         substr2(A.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FITIMECNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FITIMECNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FIOTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FIOTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FITOTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FITOTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FITIMEAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FITIMEAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FIOTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FIOTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.FITOTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.FITOTAMT, 0), '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) A,
                       (SELECT DEAL_DATE,
                               NVL(SUM(TIME_DEAL_CNT), 0) FITIMECNT,
                               NVL(SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT), 0) FIOTCNT,
                               NVL(SUM(TIME_DEAL_AMT), 0) / 1000 FITIMEAMT,
                               NVL(SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT), 0) / 1000 FIOTAMT,
                               NVL(SUM(TIME_DEAL_CNT + OT_DEAL_CNT +
                                       NIGHT_DEAL_CNT),
                                   0) FITOTCNT,
                               NVL(SUM(TIME_DEAL_AMT + OT_DEAL_AMT +
                                       NIGHT_DEAL_AMT),
                                   0) / 1000 FITOTAMT
                        FROM OP.T_FN_NICE_JEIL_BRADN_DSUM
                        WHERE DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                              AND DEAL_DATE <=
                              OP.SF_GETBEFOREDATE(PDATE)
                              AND DEAL_TYPE = '0'
                        GROUP BY DEAL_DATE) B
                  WHERE A.DEAL_DATE = B.DEAL_DATE(+)
                  ORDER BY A.DEAL_DATE) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FITIMECNT), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FITIMECNT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FIOTCNT), 0), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FIOTCNT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FITOTCNT), 0), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FITOTCNT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FITIMEAMT), 0),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FITIMEAMT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FIOTAMT), 0), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FIOTAMT), 0), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(NVL(SUM(B.FITOTAMT), 0), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(NVL(SUM(B.FITOTAMT), 0), '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) A,
             (SELECT DEAL_DATE,
                     NVL(SUM(TIME_DEAL_CNT), 0) FITIMECNT,
                     NVL(SUM(OT_DEAL_CNT + NIGHT_DEAL_CNT), 0) FIOTCNT,
                     NVL(SUM(TIME_DEAL_AMT), 0) / 1000 FITIMEAMT,
                     NVL(SUM(OT_DEAL_AMT + NIGHT_DEAL_AMT), 0) / 1000 FIOTAMT,
                     NVL(SUM(TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT),
                         0) FITOTCNT,
                     NVL(SUM(TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT),
                         0) / 1000 FITOTAMT
              FROM OP.T_FN_NICE_JEIL_BRADN_DSUM
              WHERE DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
                    AND DEAL_DATE <= OP.SF_GETBEFOREDATE(PDATE)
                    AND DEAL_TYPE = '0'
              GROUP BY DEAL_DATE) B
        WHERE A.DEAL_DATE = B.DEAL_DATE(+);
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR4FI_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportForFI',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTFORFI;

  PROCEDURE SP_APPOPINOUTOFFICECENTERFORKN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리지사별 시재내역 AppOpInOutOfficeCenterForKn
    
      -- header  
    
      SELECT op.fc_length(substr2(OP.SF_GETPREACTDATE(PDATE), 1, 4) || '년' ||
                     substr2(OP.SF_GETPREACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPREACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 1, 4) || '년' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 7, 2) || '일' ||
             op.fc_length(substr2(OP.SF_GETBEFOREDATE(PDATE), 1, 4) || '년' ||
                     substr2(OP.SF_GETBEFOREDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETBEFOREDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 1, 4) || '년' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCHARTEMP := 'a';
    
      FOR K IN (SELECT DISTINCT SAFE.DEPT_CD,
                                SAFE.OFFICE_CD
                FROM (SELECT
                      --                A.OFFICE_MAC_DATE,
                      --                             A.PREACTDATE,
                       A.DEPT_CD,
                       A.OFFICE_CD,
                             A.ORG_CD
                             --, a.pre_safe_amt+b.plus_send_amt  pre_safe_amt
                            ,
                             A.PRE_SAFE_AMT PRE_SAFE_AMT,
                       A.OPER_AMT OPER_AMT,
                             A.ORD_SEND_AMT ORD_SEND_AMT
                             --, b.plus_send_Amt                 pre_plus_Send_Amt
                            ,
                             A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
                       A.CLOSE_AMT CLOSE_AMT,
                       A.DIFFER_AMT DIFFER_AMT,
                             A.TRANS_AMT     TRANS_AMT
                             --, a.safe_amt+a.plus_Send_amt      safe_Amt                     
                            ,
                             A.SAFE_AMT SAFE_AMT
                             --, a.plus_send_amt                 plus_Send_Amt
                            ,
                             0          PLUS_SEND_AMT,
                       A.SAFE_AMT NICE_SAFE_AMT
                      FROM (SELECT
                            --                      OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                            --                                   OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                             DEPT_CD,
                             OFFICE_CD,
                             ORG_CD,
                             SUM(PRE_SAFE_AMT) PRE_SAFE_AMT,
                             SUM(OPER_AMT) OPER_AMT,
                             SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                             SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                             SUM(CLOSE_AMT) CLOSE_AMT,
                             SUM(DIFFER_AMT) DIFFER_AMT,
                             SUM(TRANS_AMT) TRANS_AMT,
                             SUM(SAFE_AMT) SAFE_AMT
                            --from OP.t_fn_pack_invent 
                            FROM OP.T_FN_PACK_INVENT_KN
                            WHERE ORG_CD = PORGCD
                                  AND CLOSE_DATE =
                                  OP.SF_GETPREACTDATE(PDATE)
                            GROUP BY ORG_CD,
                                     DEPT_CD,
                                     OFFICE_CD) A,
                           (SELECT DEPT_CD,
                                   OFFICE_CD,
                                   ORG_CD,
                                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                            --from OP.t_fn_pack_invent 
                            FROM OP.T_FN_PACK_INVENT_KN
                            WHERE ORG_CD = PORGCD
                                  AND
                                  CLOSE_DATE =
                                  OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                            GROUP BY ORG_CD,
                                     DEPT_CD,
                                     OFFICE_CD) B
                      WHERE A.ORG_CD = B.ORG_CD(+)
                            AND A.DEPT_CD = B.DEPT_CD(+)
                            AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
                     OP.T_CM_DEPT DEPT,
                     OP.T_CM_ORG ORG,
                     OP.T_CM_OFFICE OFFICE
                WHERE SAFE.ORG_CD = ORG.ORG_CD
                      AND SAFE.DEPT_CD = DEPT.DEPT_CD
                      AND OFFICE.DEPT_CD = SAFE.DEPT_CD
                      AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
                      AND SAFE.DEPT_CD <> '20'
                ORDER BY DEPT_CD,
                         OFFICE_CD) LOOP
        IF (VCHARTEMP <> 'a') THEN
          IF (VCHARTEMP <> K.DEPT_CD) THEN
            SELECT op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$' ||
                   op.fc_length('소 계') || ',' || '소 계' ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                 '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) +
                                             (DIFFER_AMT / 1000)),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) +
                                     (DIFFER_AMT / 1000)),
                                 '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000), '999,999,999'))
            
            INTO VFD_TEMP
            FROM (SELECT
                  --            A.OFFICE_MAC_DATE,
                  --                         A.PREACTDATE,
                   A.DEPT_CD,
                   A.OFFICE_CD,
                         A.ORG_CD
                         --, a.pre_safe_amt+b.plus_send_amt  pre_safe_amt
                        ,
                         A.PRE_SAFE_AMT PRE_SAFE_AMT,
                   A.OPER_AMT OPER_AMT,
                         A.ORD_SEND_AMT ORD_SEND_AMT
                         --, b.plus_send_Amt                 pre_plus_Send_Amt
                        ,
                         A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
                   A.CLOSE_AMT CLOSE_AMT,
                   A.DIFFER_AMT DIFFER_AMT,
                         A.TRANS_AMT     TRANS_AMT
                         --, a.safe_amt+a.plus_Send_amt      safe_Amt                     
                        ,
                         A.SAFE_AMT SAFE_AMT
                         --, a.plus_send_amt                 plus_Send_Amt
                        ,
                         0          PLUS_SEND_AMT,
                   A.SAFE_AMT NICE_SAFE_AMT
                  FROM (SELECT
                        --                  OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                        --                               OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                         DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PRE_SAFE_AMT) PRE_SAFE_AMT,
                         SUM(OPER_AMT) OPER_AMT,
                         SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                         SUM(CLOSE_AMT) CLOSE_AMT,
                         SUM(DIFFER_AMT) DIFFER_AMT,
                         SUM(TRANS_AMT) TRANS_AMT,
                         SUM(SAFE_AMT) SAFE_AMT
                        --from OP.t_fn_pack_invent 
                        FROM OP.T_FN_PACK_INVENT_KN
                        WHERE ORG_CD = PORGCD
                              AND CLOSE_DATE =
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY ORG_CD,
                                 DEPT_CD,
                                 OFFICE_CD) A,
                       
                       (SELECT DEPT_CD,
                               OFFICE_CD,
                               ORG_CD,
                               SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                        --from OP.t_fn_pack_invent 
                        FROM OP.T_FN_PACK_INVENT_KN
                        WHERE ORG_CD = PORGCD
                              AND
                              CLOSE_DATE =
                              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                        GROUP BY ORG_CD,
                                 DEPT_CD,
                                 OFFICE_CD) B
                  WHERE A.ORG_CD = B.ORG_CD(+)
                        AND A.DEPT_CD = B.DEPT_CD(+)
                        AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
                 OP.T_CM_DEPT DEPT,
                 OP.T_CM_ORG ORG,
                 OP.T_CM_OFFICE OFFICE
            WHERE SAFE.ORG_CD = ORG.ORG_CD
                  AND SAFE.DEPT_CD = DEPT.DEPT_CD
                  AND OFFICE.DEPT_CD = SAFE.DEPT_CD
                  AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
                  AND SAFE.DEPT_CD <> '20'
                  AND OFFICE.DEPT_CD = VCHARTEMP;
          
            VFD_L1 :=  VFD_L1 || VFD_TEMP;
          END IF;
        END IF;
      
        SELECT --op.fc_length(decode(rownum, 1, dept.dept_nm, '$MERGE_TOP$'))||','||decode(rownum, 1, dept.dept_nm, '$MERGE_TOP$')||
         CASE
           WHEN VCHARTEMP = K.DEPT_CD THEN
            op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$'
           ELSE
            op.fc_length(substr2(DEPT.DEPT_NM, 1, 2)) || ',' ||
            substr2(DEPT.DEPT_NM, 1, 2)
         END || op.fc_length(substr2(OFFICE.OFFICE_NM, 1, 2)) || ',' ||
         substr2(OFFICE.OFFICE_NM, 1, 2) ||
         op.fc_length(LTRIM(TO_CHAR(PRE_SAFE_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PRE_SAFE_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(OPER_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(ORD_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(ORD_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(PRE_PLUS_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PRE_PLUS_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR((CLOSE_AMT / 1000) + (DIFFER_AMT / 1000),
                               '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR((CLOSE_AMT / 1000) + (DIFFER_AMT / 1000),
                       '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(TRANS_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(TRANS_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(SAFE_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(SAFE_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(PLUS_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PLUS_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(NICE_SAFE_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(NICE_SAFE_AMT / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT A.OFFICE_MAC_DATE,
                     A.PREACTDATE,
                     A.DEPT_CD,
                     A.OFFICE_CD,
                     A.ORG_CD
                     --, sum(a.pre_safe_amt)+sum(b.plus_send_amt)  pre_safe_amt
                    ,
                     SUM(A.PRE_SAFE_AMT) PRE_SAFE_AMT,
                     SUM(A.OPER_AMT) OPER_AMT,
                     SUM(A.ORD_SEND_AMT) ORD_SEND_AMT
                     --, sum(b.plus_send_Amt)                 pre_plus_Send_Amt
                    ,
                     SUM(A.PLUS_SEND_AMT) PRE_PLUS_SEND_AMT,
                     SUM(A.CLOSE_AMT) CLOSE_AMT,
                     SUM(A.DIFFER_AMT) DIFFER_AMT,
                     SUM(A.TRANS_AMT) TRANS_AMT
                     --, sum(a.safe_amt)+sum(a.plus_Send_amt)      safe_Amt                     
                    ,
                     SUM(A.SAFE_AMT) SAFE_AMT
                     --, sum(a.plus_send_amt)                 plus_Send_Amt
                    ,
                     0 PLUS_SEND_AMT,
                     SUM(A.SAFE_AMT) NICE_SAFE_AMT
              FROM (SELECT OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                           OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                           DEPT_CD,
                           OFFICE_CD,
                           ORG_CD,
                           SUM(PRE_SAFE_AMT) PRE_SAFE_AMT,
                           SUM(OPER_AMT) OPER_AMT,
                           SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                           SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                           SUM(CLOSE_AMT) CLOSE_AMT,
                           SUM(DIFFER_AMT) DIFFER_AMT,
                           SUM(TRANS_AMT) TRANS_AMT,
                           SUM(SAFE_AMT) SAFE_AMT
                    --from OP.t_fn_pack_invent 
                    FROM OP.T_FN_PACK_INVENT_KN
                    WHERE ORG_CD = PORGCD
                          AND
                          CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                    GROUP BY ORG_CD,
                             DEPT_CD,
                             OFFICE_CD) A,
                   
                   (SELECT DEPT_CD,
                           OFFICE_CD,
                           ORG_CD,
                           SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                    --from OP.t_fn_pack_invent 
                    FROM OP.T_FN_PACK_INVENT_KN
                    WHERE ORG_CD = PORGCD
                          AND
                          CLOSE_DATE =
                          OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                    GROUP BY ORG_CD,
                             DEPT_CD,
                             OFFICE_CD) B
              WHERE A.ORG_CD = B.ORG_CD(+)
                    AND A.DEPT_CD = B.DEPT_CD(+)
                    AND A.OFFICE_CD = B.OFFICE_CD(+)
              GROUP BY A.OFFICE_MAC_DATE,
                       A.PREACTDATE,
                       A.DEPT_CD,
                       A.OFFICE_CD,
                       A.ORG_CD) SAFE,
             OP.T_CM_DEPT DEPT,
             OP.T_CM_ORG ORG,
             OP.T_CM_OFFICE OFFICE
        WHERE SAFE.ORG_CD = ORG.ORG_CD
              AND SAFE.DEPT_CD = DEPT.DEPT_CD
              AND OFFICE.DEPT_CD = SAFE.DEPT_CD
              AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
              AND SAFE.DEPT_CD <> '20'
              AND OFFICE.DEPT_CD = K.DEPT_CD
              AND OFFICE.OFFICE_CD = K.OFFICE_CD;
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        VCHARTEMP := K.DEPT_CD;
      
      END LOOP;
    
      SELECT op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$' ||
             op.fc_length('소 계') || ',' || '소 계' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) +
                                       (DIFFER_AMT / 1000)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) + (DIFFER_AMT / 1000)),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT
            --      A.OFFICE_MAC_DATE,
            --                   A.PREACTDATE,
             A.DEPT_CD,
             A.OFFICE_CD,
                   A.ORG_CD
                   --, a.pre_safe_amt+b.plus_send_amt  pre_safe_amt
                  ,
                   A.PRE_SAFE_AMT PRE_SAFE_AMT,
             A.OPER_AMT OPER_AMT,
                   A.ORD_SEND_AMT ORD_SEND_AMT
                   --, b.plus_send_Amt                 pre_plus_Send_Amt
                  ,
                   A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
             A.CLOSE_AMT CLOSE_AMT,
             A.DIFFER_AMT DIFFER_AMT,
                   A.TRANS_AMT     TRANS_AMT
                   --, a.safe_amt+a.plus_Send_amt      safe_Amt                     
                  ,
                   A.SAFE_AMT SAFE_AMT
                   --, a.plus_send_amt                 plus_Send_Amt
                  ,
                   0          PLUS_SEND_AMT,
             A.SAFE_AMT NICE_SAFE_AMT
            FROM (SELECT
                  --            OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                  --                         OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                   DEPT_CD,
                   OFFICE_CD,
                   ORG_CD,
                   SUM(PRE_SAFE_AMT) PRE_SAFE_AMT,
                   SUM(OPER_AMT) OPER_AMT,
                   SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                   SUM(CLOSE_AMT) CLOSE_AMT,
                   SUM(DIFFER_AMT) DIFFER_AMT,
                   SUM(TRANS_AMT) TRANS_AMT,
                   SUM(SAFE_AMT) SAFE_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) A,
                 
                 (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE =
                        OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) B
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      WHERE SAFE.ORG_CD = ORG.ORG_CD
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20'
            AND OFFICE.DEPT_CD = VCHARTEMP;
    
      VFD_L1 :=  VFD_L1 || VFD_TEMP;
    
      SELECT op.fc_length('합 계') || ',' || '합 계' || op.fc_length('$MERGE_LEFT$') || ',' ||
             '$MERGE_LEFT$' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_SAFE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) +
                                       (DIFFER_AMT / 1000)),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((CLOSE_AMT / 1000) + (DIFFER_AMT / 1000)),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(TRANS_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(SAFE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NICE_SAFE_AMT / 1000), '999,999,999')),
             SUM(SAFE_AMT / 1000),
             SUM(NICE_SAFE_AMT / 1000)
      INTO VFD_TEMP,
           VAMT1,
           VAMT2
      FROM (SELECT
            --      A.OFFICE_MAC_DATE,
            --                   A.PREACTDATE,
             A.DEPT_CD,
             A.OFFICE_CD,
                   A.ORG_CD
                   --, a.pre_safe_amt+b.plus_send_amt  pre_safe_amt
                  ,
                   A.PRE_SAFE_AMT PRE_SAFE_AMT,
             A.OPER_AMT OPER_AMT,
                   A.ORD_SEND_AMT ORD_SEND_AMT
                   --, b.plus_send_Amt                 pre_plus_Send_Amt
                  ,
                   A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
             A.CLOSE_AMT CLOSE_AMT,
             A.DIFFER_AMT DIFFER_AMT,
                   A.TRANS_AMT     TRANS_AMT
                   --, a.safe_amt+a.plus_Send_amt      safe_Amt                     
                  ,
                   A.SAFE_AMT SAFE_AMT
                   --, a.plus_send_amt                 plus_Send_Amt
                  ,
                   0          PLUS_SEND_AMT,
             A.SAFE_AMT NICE_SAFE_AMT
            FROM (SELECT
                  --            OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                  --                         OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                   DEPT_CD,
                   OFFICE_CD,
                   ORG_CD,
                   SUM(PRE_SAFE_AMT) PRE_SAFE_AMT,
                   SUM(OPER_AMT) OPER_AMT,
                   SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                   SUM(CLOSE_AMT) CLOSE_AMT,
                   SUM(DIFFER_AMT) DIFFER_AMT,
                   SUM(TRANS_AMT) TRANS_AMT,
                   SUM(SAFE_AMT) SAFE_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) A,
                 
                 (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE =
                        OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) B
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      WHERE SAFE.ORG_CD = ORG.ORG_CD
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20';
    
      VFD_L1 :=  VFD_L1 || VFD_TEMP;
      /*      
      select op.fc_length(ltrim(to_char(sum(mac_amt/1000) + vAmt1,'999,999,999')))||','||ltrim(to_char(sum(mac_amt/1000) + vAmt1,'999,999,999'))||
             op.fc_length(ltrim(to_char(sum(Nice_mac_Amt/1000) + vAmt2,'999,999,999')))||','||ltrim(to_char(sum(Nice_mac_Amt/1000) + vAmt2,'999,999,999'))
      INTO VFD_L2
      from 
       (
        select a.office_mac_date
                   , a.preActDate
                   , a.dept_Cd
                   , a.office_Cd
                   , a.org_Cd
                   , a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                   , b.plus_send_Amt                 pre_plus_Send_Amt
                   , a.ord_send_amt                  ord_send_amt
                   , a.out_amt                       out_Amt
                   , a.in_Amt                        in_Amt
                   , a.close_amt                     close_amt
                   , a.mac_amt-a.plus_Send_amt       mac_amt
                   , a.plus_send_amt                 plus_Send_Amt
                   , a.mac_amt                       Nice_mac_Amt
             from      
            (select OP.sf_getBeforeDate(pDate) office_mac_date
                  ,OP.sf_getPreActDate(pDate) preActDate
                  ,dept_cd
                  ,office_cd
                  ,org_cd
                  ,sum(pre_mac_amt) pre_mac_amt
                  ,sum(plus_send_amt) plus_send_amt
                  ,sum(ord_send_amt) ord_send_amt
                  ,sum(out_amt) out_amt
                  ,sum(in_amt) in_amt
                  ,sum(close_amt) close_amt
                  ,sum(mac_amt) mac_amt
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
            and close_date = OP.sf_getPreActDate(pDate)
            group by org_cd,dept_cd,office_cd) A,
          (select dept_cd
                          ,office_cd
                       ,org_cd
                       ,sum(plus_send_amt) plus_send_amt
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
              and close_date = OP.sf_getPreActDate(OP.sf_getPreActDate(pDate))
              group by org_cd,dept_cd,office_cd) B
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)
            
            ) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      where 
       safe.org_cd=org.org_cd 
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20';
          */
    
      ----------------------------------------------------------------------
    
      SELECT op.fc_length(substr2(OP.SF_GETPREACTDATE(PDATE), 1, 4) || '년' ||
                     substr2(OP.SF_GETPREACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPREACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 1, 4) || '년' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPREACTDATE(PDATE), 7, 2) || '일' ||
             op.fc_length(substr2(OP.SF_GETBEFOREDATE(PDATE), 1, 4) || '년' ||
                     substr2(OP.SF_GETBEFOREDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETBEFOREDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 1, 4) || '년' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETBEFOREDATE(PDATE), 7, 2) || '일'
      --into   vFd_temp     
      INTO VFD_L2
      FROM DUAL;
    
      --vFd_L2 :=   vFd_L2||vFd_temp;  --HOSSONG 20141022
    
      VCHARTEMP := 'a';
    
      FOR L IN (SELECT DISTINCT SAFE.DEPT_CD,
                                SAFE.OFFICE_CD
                FROM (SELECT
                      --                A.OFFICE_MAC_DATE,
                      --                             A.PREACTDATE,
                       A.DEPT_CD,
                       A.OFFICE_CD,
                             A.ORG_CD
                             --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                            ,
                             A.PRE_MAC_AMT PRE_MAC_AMT
                             --, b.plus_send_Amt                 pre_plus_Send_Amt
                            ,
                             A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
                       A.ORD_SEND_AMT ORD_SEND_AMT,
                       A.OUT_AMT OUT_AMT,
                       A.IN_AMT IN_AMT,
                             A.CLOSE_AMT     CLOSE_AMT
                             --, a.mac_amt-a.plus_Send_amt       mac_amt
                            ,
                             A.MAC_AMT MAC_AMT
                             --, a.plus_send_amt                 plus_Send_Amt
                            ,
                             0         PLUS_SEND_AMT,
                       A.MAC_AMT NICE_MAC_AMT
                      FROM (SELECT
                            --                      OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                            --                                   OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                             DEPT_CD,
                             OFFICE_CD,
                             ORG_CD,
                             SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                             SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                             SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                             SUM(OUT_AMT) OUT_AMT,
                             SUM(IN_AMT) IN_AMT,
                             SUM(CLOSE_AMT) CLOSE_AMT,
                             SUM(MAC_AMT) MAC_AMT
                            --from OP.t_fn_pack_invent 
                            FROM OP.T_FN_PACK_INVENT_KN
                            WHERE ORG_CD = PORGCD
                                  AND CLOSE_DATE =
                                  OP.SF_GETPREACTDATE(PDATE)
                            GROUP BY ORG_CD,
                                     DEPT_CD,
                                     OFFICE_CD) A,
                           (SELECT DEPT_CD,
                                   OFFICE_CD,
                                   ORG_CD,
                                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                            --from OP.t_fn_pack_invent 
                            FROM OP.T_FN_PACK_INVENT_KN
                            WHERE ORG_CD = PORGCD
                                  AND
                                  CLOSE_DATE =
                                  OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                            GROUP BY ORG_CD,
                                     DEPT_CD,
                                     OFFICE_CD) B
                      WHERE A.ORG_CD = B.ORG_CD(+)
                            AND A.DEPT_CD = B.DEPT_CD(+)
                            AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
                     OP.T_CM_DEPT DEPT,
                     OP.T_CM_ORG ORG,
                     OP.T_CM_OFFICE OFFICE
                WHERE SAFE.ORG_CD = ORG.ORG_CD
                      AND SAFE.DEPT_CD = DEPT.DEPT_CD
                      AND OFFICE.DEPT_CD = SAFE.DEPT_CD
                      AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
                      AND SAFE.DEPT_CD <> '20'
                ORDER BY SAFE.DEPT_CD,
                         SAFE.OFFICE_CD) LOOP
        IF (VCHARTEMP <> 'a') THEN
          IF (VCHARTEMP <> L.DEPT_CD) THEN
            SELECT op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$' ||
                   op.fc_length('소 계') || ',' || '소 계' ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                 '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
                   op.fc_length(LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000), '999,999,999'))
            INTO VFD_TEMP
            FROM (SELECT
                  --            A.OFFICE_MAC_DATE,
                  --                         A.PREACTDATE,
                   A.DEPT_CD,
                   A.OFFICE_CD,
                         A.ORG_CD
                         --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                        ,
                         A.PRE_MAC_AMT PRE_MAC_AMT
                         --, b.plus_send_Amt                 pre_plus_Send_Amt
                        ,
                         A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
                   A.ORD_SEND_AMT ORD_SEND_AMT,
                   A.OUT_AMT OUT_AMT,
                   A.IN_AMT IN_AMT,
                         A.CLOSE_AMT     CLOSE_AMT
                         --, a.mac_amt-a.plus_Send_amt       mac_amt
                        ,
                         A.MAC_AMT MAC_AMT
                         --, a.plus_send_amt                 plus_Send_Amt
                        ,
                         0         PLUS_SEND_AMT,
                   A.MAC_AMT NICE_MAC_AMT
                  FROM (SELECT
                        --                  OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                        --                               OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                         DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                         SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(CLOSE_AMT) CLOSE_AMT,
                         SUM(MAC_AMT) MAC_AMT
                        --from OP.t_fn_pack_invent 
                        FROM OP.T_FN_PACK_INVENT_KN
                        WHERE ORG_CD = PORGCD
                              AND CLOSE_DATE =
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY ORG_CD,
                                 DEPT_CD,
                                 OFFICE_CD) A,
                       (SELECT DEPT_CD,
                               OFFICE_CD,
                               ORG_CD,
                               SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                        --from OP.t_fn_pack_invent 
                        FROM OP.T_FN_PACK_INVENT_KN
                        WHERE ORG_CD = PORGCD
                              AND
                              CLOSE_DATE =
                              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                        GROUP BY ORG_CD,
                                 DEPT_CD,
                                 OFFICE_CD) B
                  
                  WHERE A.ORG_CD = B.ORG_CD(+)
                        AND A.DEPT_CD = B.DEPT_CD(+)
                        AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
                 OP.T_CM_DEPT DEPT,
                 OP.T_CM_ORG ORG,
                 OP.T_CM_OFFICE OFFICE
            WHERE SAFE.ORG_CD = ORG.ORG_CD
                  AND SAFE.DEPT_CD = DEPT.DEPT_CD
                  AND OFFICE.DEPT_CD = SAFE.DEPT_CD
                  AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
                  AND SAFE.DEPT_CD <> '20'
                  AND OFFICE.DEPT_CD = VCHARTEMP;
          
            VFD_L2 := VFD_L2 || VFD_TEMP;
          END IF;
        END IF;
      
        SELECT --op.fc_length(decode(rownum, 1, dept.dept_nm, '$MERGE_TOP$'))||','||decode(rownum, 1, dept.dept_nm, '$MERGE_TOP$')||
         CASE
           WHEN VCHARTEMP = L.DEPT_CD THEN
            op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$'
           ELSE
            op.fc_length(substr2(DEPT.DEPT_NM, 1, 2)) || ',' ||
            substr2(DEPT.DEPT_NM, 1, 2)
         END || op.fc_length(substr2(OFFICE.OFFICE_NM, 1, 2)) || ',' ||
         substr2(OFFICE.OFFICE_NM, 1, 2) ||
         op.fc_length(LTRIM(TO_CHAR(PRE_MAC_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PRE_MAC_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(ORD_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(ORD_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(PRE_PLUS_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PRE_PLUS_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(OUT_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(OUT_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(IN_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(IN_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(CLOSE_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(CLOSE_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(MAC_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(MAC_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(PLUS_SEND_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(PLUS_SEND_AMT / 1000, '999,999,999')) ||
         op.fc_length(LTRIM(TO_CHAR(NICE_MAC_AMT / 1000, '999,999,999'))) || ',' ||
         LTRIM(TO_CHAR(NICE_MAC_AMT / 1000, '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT
              --        A.OFFICE_MAC_DATE,
              --                     A.PREACTDATE,
               A.DEPT_CD,
               A.OFFICE_CD,
                     A.ORG_CD
                     --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                    ,
                     A.PRE_MAC_AMT PRE_MAC_AMT
                     --, b.plus_send_Amt                 pre_plus_Send_Amt
                    ,
                     A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
               A.ORD_SEND_AMT ORD_SEND_AMT,
               A.OUT_AMT OUT_AMT,
               A.IN_AMT IN_AMT,
                     A.CLOSE_AMT     CLOSE_AMT
                     --, a.mac_amt-a.plus_Send_amt       mac_amt
                    ,
                     A.MAC_AMT MAC_AMT
                     --, a.plus_send_amt                 plus_Send_Amt
                    ,
                     0         PLUS_SEND_AMT,
               A.MAC_AMT NICE_MAC_AMT
              FROM (SELECT
                    --              OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                    --                           OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                     DEPT_CD,
                     OFFICE_CD,
                     ORG_CD,
                     SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                     SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                     SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                     SUM(OUT_AMT) OUT_AMT,
                     SUM(IN_AMT) IN_AMT,
                     SUM(CLOSE_AMT) CLOSE_AMT,
                     SUM(MAC_AMT) MAC_AMT
                    --from OP.t_fn_pack_invent 
                    FROM OP.T_FN_PACK_INVENT_KN
                    WHERE ORG_CD = PORGCD
                          AND
                          CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                    GROUP BY ORG_CD,
                             DEPT_CD,
                             OFFICE_CD) A,
                   (SELECT DEPT_CD,
                           OFFICE_CD,
                           ORG_CD,
                           SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                    --from OP.t_fn_pack_invent 
                    FROM OP.T_FN_PACK_INVENT_KN
                    WHERE ORG_CD = PORGCD
                          AND
                          CLOSE_DATE =
                          OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                    GROUP BY ORG_CD,
                             DEPT_CD,
                             OFFICE_CD) B
              
              WHERE A.ORG_CD = B.ORG_CD(+)
                    AND A.DEPT_CD = B.DEPT_CD(+)
                    AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
             OP.T_CM_DEPT DEPT,
             OP.T_CM_ORG ORG,
             OP.T_CM_OFFICE OFFICE
        WHERE SAFE.ORG_CD = ORG.ORG_CD
              AND SAFE.DEPT_CD = DEPT.DEPT_CD
              AND OFFICE.DEPT_CD = SAFE.DEPT_CD
              AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
              AND SAFE.DEPT_CD <> '20'
              AND OFFICE.DEPT_CD = L.DEPT_CD
              AND OFFICE.OFFICE_CD = L.OFFICE_CD;
        VFD_L2 := VFD_L2 || VFD_TEMP;
      
        VCHARTEMP := L.DEPT_CD;
      
      END LOOP;
    
      SELECT op.fc_length('$MERGE_TOP$') || ',' || '$MERGE_TOP$' ||
             op.fc_length('소 계') || ',' || '소 계' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT
            --      A.OFFICE_MAC_DATE,
            --                   A.PREACTDATE,
             A.DEPT_CD,
             A.OFFICE_CD,
                   A.ORG_CD
                   --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                  ,
                   A.PRE_MAC_AMT PRE_MAC_AMT
                   --, b.plus_send_Amt                 pre_plus_Send_Amt
                  ,
                   A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
             A.ORD_SEND_AMT ORD_SEND_AMT,
             A.OUT_AMT OUT_AMT,
             A.IN_AMT IN_AMT,
                   A.CLOSE_AMT     CLOSE_AMT
                   --, a.mac_amt-a.plus_Send_amt       mac_amt
                  ,
                   A.MAC_AMT MAC_AMT
                   --, a.plus_send_amt                 plus_Send_Amt
                  ,
                   0         PLUS_SEND_AMT,
             A.MAC_AMT NICE_MAC_AMT
            FROM (SELECT
                  --            OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                  --                         OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                   DEPT_CD,
                   OFFICE_CD,
                   ORG_CD,
                   SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                   SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                   SUM(OUT_AMT) OUT_AMT,
                   SUM(IN_AMT) IN_AMT,
                   SUM(CLOSE_AMT) CLOSE_AMT,
                   SUM(MAC_AMT) MAC_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) A,
                 (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE =
                        OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) B
            
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      WHERE SAFE.ORG_CD = ORG.ORG_CD
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20'
            AND OFFICE.DEPT_CD = VCHARTEMP;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      SELECT op.fc_length('합 계') || ',' || '합 계' || op.fc_length('$MERGE_LEFT$') || ',' ||
             '$MERGE_LEFT$' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_MAC_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(ORD_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PRE_PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OUT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(IN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(CLOSE_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT
            --      A.OFFICE_MAC_DATE,
            --                   A.PREACTDATE,
             A.DEPT_CD,
             A.OFFICE_CD,
                   A.ORG_CD
                   --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                  ,
                   A.PRE_MAC_AMT PRE_MAC_AMT
                   --, b.plus_send_Amt                 pre_plus_Send_Amt
                  ,
                   A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
             A.ORD_SEND_AMT ORD_SEND_AMT,
             A.OUT_AMT OUT_AMT,
             A.IN_AMT IN_AMT,
                   A.CLOSE_AMT     CLOSE_AMT
                   --, a.mac_amt-a.plus_Send_amt       mac_amt
                  ,
                   A.MAC_AMT MAC_AMT
                   --, a.plus_send_amt                 plus_Send_Amt
                  ,
                   0         PLUS_SEND_AMT,
             A.MAC_AMT NICE_MAC_AMT
            FROM (SELECT
                  --            OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                  --                         OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                   DEPT_CD,
                   OFFICE_CD,
                   ORG_CD,
                   SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                   SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                   SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                   SUM(OUT_AMT) OUT_AMT,
                   SUM(IN_AMT) IN_AMT,
                   SUM(CLOSE_AMT) CLOSE_AMT,
                   SUM(MAC_AMT) MAC_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) A,
                 (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE =
                        OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) B
            
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      WHERE SAFE.ORG_CD = ORG.ORG_CD
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20';
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --------------------------------------------------------------------------------------
      -- TOTAL 위치변경 HOSSONG 20141022
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT / 1000) + VAMT1,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT / 1000) + VAMT1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000) + VAMT2,
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(NICE_MAC_AMT / 1000) + VAMT2, '999,999,999'))
      INTO VFD_L3
      FROM (SELECT A.OFFICE_MAC_DATE,
                   A.PREACTDATE,
                   A.DEPT_CD,
                   A.OFFICE_CD,
                   A.ORG_CD
                   --, a.pre_mac_amt-b.plus_send_amt   pre_mac_amt
                  ,
                   A.PRE_MAC_AMT PRE_MAC_AMT
                   --, b.plus_send_Amt                 pre_plus_Send_Amt
                  ,
                   A.PLUS_SEND_AMT PRE_PLUS_SEND_AMT,
                   A.ORD_SEND_AMT  ORD_SEND_AMT,
                   A.OUT_AMT       OUT_AMT,
                   A.IN_AMT        IN_AMT,
                   A.CLOSE_AMT     CLOSE_AMT
                   --, a.mac_amt-a.plus_Send_amt       mac_amt
                  ,
                   A.MAC_AMT MAC_AMT
                   --, a.plus_send_amt                 plus_Send_Amt
                  ,
                   0         PLUS_SEND_AMT,
                   A.MAC_AMT NICE_MAC_AMT
            FROM (SELECT OP.SF_GETBEFOREDATE(PDATE) OFFICE_MAC_DATE,
                         OP.SF_GETPREACTDATE(PDATE) PREACTDATE,
                         DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PRE_MAC_AMT) PRE_MAC_AMT,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT,
                         SUM(ORD_SEND_AMT) ORD_SEND_AMT,
                         SUM(OUT_AMT) OUT_AMT,
                         SUM(IN_AMT) IN_AMT,
                         SUM(CLOSE_AMT) CLOSE_AMT,
                         SUM(MAC_AMT) MAC_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) A,
                 (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         SUM(PLUS_SEND_AMT) PLUS_SEND_AMT
                  --from OP.t_fn_pack_invent 
                  FROM OP.T_FN_PACK_INVENT_KN
                  WHERE ORG_CD = PORGCD
                        AND
                        CLOSE_DATE =
                        OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  GROUP BY ORG_CD,
                           DEPT_CD,
                           OFFICE_CD) B
            WHERE A.ORG_CD = B.ORG_CD(+)
                  AND A.DEPT_CD = B.DEPT_CD(+)
                  AND A.OFFICE_CD = B.OFFICE_CD(+)
            
            ) SAFE,
           OP.T_CM_DEPT DEPT,
           OP.T_CM_ORG ORG,
           OP.T_CM_OFFICE OFFICE
      WHERE SAFE.ORG_CD = ORG.ORG_CD
            AND SAFE.DEPT_CD = DEPT.DEPT_CD
            AND OFFICE.DEPT_CD = SAFE.DEPT_CD
            AND OFFICE.OFFICE_CD = SAFE.OFFICE_CD
            AND SAFE.DEPT_CD <> '20';
    
      --------------------------------------------------------------------------------------
    
      SELECT DISTINCT op.fc_length(substr2(OPER.OPER_DATE, 1, 4) || '년' ||
                              substr2(OPER.OPER_DATE, 5, 2) || '월' ||
                              substr2(OPER.OPER_DATE, 7, 2) || '일') || ',' ||
                      substr2(OPER.OPER_DATE, 1, 4) || '년' ||
                      substr2(OPER.OPER_DATE, 5, 2) || '월' ||
                      substr2(OPER.OPER_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM OP.T_FN_OPER   OPER,
           OP.T_CM_OFFICE OFF
      WHERE OPER.OPER_DATE = PDATE
            AND OPER.ORG_CD = PORGCD
            AND OPER.DEPT_CD = OFF.DEPT_CD
            AND OPER.OFFICE_CD = OFF.OFFICE_CD;
    
      VFD_L3 := VFD_L3 || VFD_TEMP;
    
      FOR M IN (SELECT op.fc_length(substr2(OFF.OFFICE_NM, 1, 2)) || ',' ||
                       substr2(OFF.OFFICE_NM, 1, 2) ||
                       op.fc_length(LTRIM(TO_CHAR(OPER.OPER_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OPER.OPER_AMT / 1000, '999,999,999')) ||
                       lengthb(' ') || ',' || ' ' LIST_DATA
                FROM OP.T_FN_OPER   OPER,
                     OP.T_CM_OFFICE OFF
                WHERE OPER.OPER_DATE = PDATE
                      AND OPER.ORG_CD = PORGCD
                      AND OPER.DEPT_CD = OFF.DEPT_CD
                      AND OPER.OFFICE_CD = OFF.OFFICE_CD
                
                ) LOOP
      
        VFD_L3 := VFD_L3 || M.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length('합 계') || ',' || '합 계' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(OPER.OPER_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(OPER.OPER_AMT / 1000), '999,999,999')) ||
             lengthb(' ') || ',' || ' '
      INTO VFD_TEMP
      FROM OP.T_FN_OPER   OPER,
           OP.T_CM_OFFICE OFF
      WHERE OPER.OPER_DATE = PDATE
            AND OPER.ORG_CD = PORGCD
            AND OPER.DEPT_CD = OFF.DEPT_CD
            AND OPER.OFFICE_CD = OFF.OFFICE_CD;
    
      VFD_L3 := VFD_L3 || VFD_TEMP;
      --------------------------------------------------------------------------------------         
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2,
         FD_L3,
         FD_L4)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2,
         VFD_L3,
         VFD_L4);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_L3    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_AppOpInOutOfficeCenterForKn',
                                          VRESULT,
                                          PDATE);
  
  END SP_APPOPINOUTOFFICECENTERFORKN;

  PROCEDURE SP_NICEOPAMTREQFORKB1(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqForKB1
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      --------------------------------------------------   
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(DAT1, 5, 2)) || ',' ||
                       substr2(DAT1, 5, 2) || op.fc_length(substr2(DAT1, 7, 2)) || ',' ||
                       substr2(DAT1, 7, 2) || op.fc_length(NVL(TITEL1, '')) || ',' ||
                       NVL(TITEL1, '') ||
                       op.fc_length(LTRIM(TO_CHAR(OUTCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OUTCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(OUTAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(INCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(INCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(INAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(FEE, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(FEE, '999,999,999,999')) ||
                       op.fc_length(substr2(DAT2, 5, 2)) || ',' ||
                       substr2(DAT2, 5, 2) || op.fc_length(substr2(DAT2, 7, 2)) || ',' ||
                       substr2(DAT2, 7, 2) || op.fc_length(NVL(TITEL2, '')) || ',' ||
                       NVL(TITEL2, '') ||
                       op.fc_length(LTRIM(TO_CHAR(KBOUTCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(KBOUTCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(KBOUTAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(KBOUTAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(KBINCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(KBINCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(KBINAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(KBINAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(KBFEE, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(KBFEE, '999,999,999,999')) ||
                       op.fc_length(NVL(TITEL3, '')) || ',' || NVL(TITEL3, '') ||
                       op.fc_length(LTRIM(TO_CHAR(TOTOUTCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TOTOUTCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TOTOUTAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TOTOUTAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TOTINCNT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TOTINCNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TOTINAMT, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TOTINAMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(TOTFEE, '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(TOTFEE, '999,999,999,999')) LIST_DATA
                FROM (SELECT S.STD_DATE DAT1,
                             '일반제휴' TITEL1,
                             NVL(A.CNT, 0) - NVL(C.CNT, 0) OUTCNT,
                             NVL(A.AMT, 0) - NVL(C.AMT, 0) OUTAMT,
                             NVL(B.CNT, 0) - NVL(D.CNT, 0) INCNT,
                             NVL(B.AMT, 0) - NVL(D.AMT, 0) INAMT,
                             NVL(AB.FEE, 0) - NVL(CD.FEE, 0) FEE,
                             S.STD_DATE DAT2,
                             '브랜드' TITEL2,
                             NVL(C.CNT, 0) KBOUTCNT,
                             NVL(C.AMT, 0) KBOUTAMT,
                             NVL(D.CNT, 0) KBINCNT,
                             NVL(D.AMT, 0) KBINAMT,
                             NVL(CD.FEE, 0) KBFEE,
                             '합 계' TITEL3,
                             NVL(A.CNT, 0) TOTOUTCNT,
                             NVL(A.AMT, 0) TOTOUTAMT,
                             NVL(B.CNT, 0) TOTINCNT,
                             NVL(B.AMT, 0) TOTINAMT,
                             NVL(AB.FEE, 0) TOTFEE
                      
                      FROM (SELECT STD_DATE
                            FROM OP.T_FN_CALENDAR
                            WHERE STD_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND STD_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)) S,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT +
                                       NIGHT_DEAL_CNT) CNT,
                                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT +
                                       NIGHT_DEAL_AMT) AMT
                            FROM OP.T_FN_NICE_ORG_DSUM
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND ORG_CD IN ('004', '029')
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) A,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT +
                                       NIGHT_DEAL_CNT) CNT,
                                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT +
                                       NIGHT_DEAL_AMT) AMT
                            FROM OP.T_FN_NICE_ORG_DSUM
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND ORG_CD IN ('004', '029')
                                  AND DEAL_TYPE = '1'
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) B,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_CUST_FEE + OT_CUST_FEE +
                                       NIGHT_CUST_FEE + TIME_BANK_FEE +
                                       OT_BANK_FEE + NIGHT_BANK_FEE) FEE
                            FROM OP.T_FN_NICE_ORG_DSUM
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND ORG_CD IN ('004', '029')
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) AB,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT +
                                       NIGHT_DEAL_CNT) CNT,
                                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT +
                                       NIGHT_DEAL_AMT) AMT
                            FROM OP.T_FN_KB_BRAND_DSUM4
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) C,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT +
                                       NIGHT_DEAL_CNT) CNT,
                                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT +
                                       NIGHT_DEAL_AMT) AMT
                            FROM OP.T_FN_KB_BRAND_DSUM4
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND DEAL_TYPE = '1'
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) D,
                           
                           (SELECT DEAL_DATE,
                                   SUM(TIME_CUST_FEE + OT_CUST_FEE +
                                       NIGHT_CUST_FEE + TIME_BANK_FEE +
                                       OT_BANK_FEE + NIGHT_BANK_FEE) FEE
                            FROM OP.T_FN_KB_BRAND_DSUM4
                            WHERE DEAL_DATE >=
                                  OP.SF_GETPREACTDATE(PDATE)
                                  AND DEAL_DATE <=
                                  OP.SF_GETBEFOREDATE(PDATE)
                                  AND DEAL_STATUS = '0'
                            GROUP BY DEAL_DATE) CD
                      
                      WHERE S.STD_DATE = A.DEAL_DATE(+)
                            AND S.STD_DATE = B.DEAL_DATE(+)
                            AND S.STD_DATE = AB.DEAL_DATE(+)
                            AND S.STD_DATE = C.DEAL_DATE(+)
                            AND S.STD_DATE = D.DEAL_DATE(+)
                            AND S.STD_DATE = CD.DEAL_DATE(+)
                      ORDER BY S.STD_DATE)) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1);
      --------------------------------------------------------------------------------------
      /*    insert into OP.t_cm_fax_data 
       (index_key, page_index, fax_file_cd, fd_hd, fd_L1)--, fd_L2 , fd_L3, fd_L4, fd_L5) 
       values(pIndexKey, pPageNo, 'NOAR4KB_H' , vFd_hd, vFd_L1)--, vFd_L2, vFd_L3, vFd_L4, vFd_L5);      
      */
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_L3   := '';
      VFD_L4   := '';
      VFD_FT   := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForKB1',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORKB1;

  PROCEDURE SP_PACKAMTINSAFEBYOFFICE(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                     PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                     PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                     PFAXCD    IN VARCHAR2,
                                     PPAGENO   IN NUMBER,
                                     PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄 지사별 시재내역 PackAmtInSafeByOffice
    
      -- header  
    
      SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
             NVL(PACK_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') || op.fc_length('일괄관리 운영자금 담당') || ',' ||
             '일괄관리 운영자금 담당' || op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                                       'yyyymmdd') -
                                               TO_DATE(OP.SF_GETAFTERPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                                                       'yyyymmdd') + 1,
                                               '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETAFTERPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                             'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETAFTERPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETAFTERPREACTDATE(OP.SF_GETPREACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
      --------------------------------------------------   
    
      --list 1
    
      FOR K IN (SELECT
                --op.fc_length(amt.jijum_cd||' '||  substr2(office.office_nm,1,2))||','||amt.jijum_cd||' '||  substr2(office.office_nm,1,2)||
                --op.fc_length('8202'||' '||  substr2(office.office_nm,1,2))||','||'8202'||' '||  substr2(office.office_nm,1,2)||
                 op.fc_length('' || ' ' || substr2(OFFICE.OFFICE_NM, 1, 2)) || ',' || '' || ' ' ||
                 substr2(OFFICE.OFFICE_NM, 1, 2) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PRESAFEAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PRESAFEAMT, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.ORDSENDAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.ORDSENDAMT, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PREPLUS, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PREPLUS, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PLUSSENDAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PLUSSENDAMT, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT,
                                       '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT - AMT.PREPLUS -
                               AMT.PLUSSENDAMT,
                               '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.OPERAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.OPERAMT, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.CLOSEAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.CLOSEAMT, '999,999,999')) LIST_DATA
                
                FROM (SELECT DEPT_CD,
                             OFFICE_CD,
                             SUM(PRE_SAFE_AMT) / 1000 PRESAFEAMT,
                             SUM(ORD_SEND_AMT) / 1000 ORDSENDAMT,
                             SUM(PLUS_SEND_AMT) / 1000 PLUSSENDAMT,
                             SUM(PRE_PLUS_WK_SEND_AMT) / 1000 PREPLUS,
                             SUM(OPER_AMT) / 1000 OPERAMT,
                             SUM(CLOSE_AMT) / 1000 CLOSEAMT,
                             SUM(DIFFER_AMT) / 1000 DIFFERAMT
                      FROM --OP.t_fn_pack_invent_ofcjjm 
                           OP.T_FN_PACK_INVENT_SH
                      WHERE CLOSE_DATE =
                            OP.SF_GETPREACTDATE(PDATE)
                            AND ORG_CD = '088'
                      GROUP BY DEPT_CD,
                               OFFICE_CD) AMT,
                     (SELECT DEPT_CD,
                             OFFICE_CD,
                             SUM(DIFFER_AMT) / 1000 DIFFERAMT
                      FROM --OP.t_fn_pack_invent_ofcjjm  
                           OP.T_FN_PACK_INVENT
                      WHERE CLOSE_DATE =
                            OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                            AND ORG_CD = '088'
                      GROUP BY DEPT_CD,
                               OFFICE_CD) AMTPRE,
                     /*      (
                       SELECT 
                         ORG_CD, BRANCH_CD,BRANCH_NM 
                       FROM 
                         OP.T_CM_BRANCH 
                       WHERE 
                       ORG_CD='088'
                     ) BRANCH,*/
                     OP.T_CM_OFFICE OFFICE
                --      where 
                --      jijum.jijum_cd=amt.jijum_cd
                --      and jijum.jijum_cd=amtpre.jijum_cd
                WHERE OFFICE.DEPT_CD = AMT.DEPT_CD
                      AND OFFICE.DEPT_CD = AMTPRE.DEPT_CD
                      AND OFFICE.OFFICE_CD = AMT.OFFICE_CD
                      AND OFFICE.OFFICE_CD = AMTPRE.OFFICE_CD
                ORDER BY OFFICE.DEPT_CD,
                         OFFICE.OFFICE_CD) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length('합 계') || ',' || '합 계' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.ORDSENDAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.ORDSENDAMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PREPLUS), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PREPLUS), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PLUSSENDAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PLUSSENDAMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                               AMT.PREPLUS - AMT.PLUSSENDAMT),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.OPERAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.OPERAMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.CLOSEAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.CLOSEAMT), '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT
            --jijum_cd,
             DEPT_CD,
             OFFICE_CD,
             SUM(PRE_SAFE_AMT) / 1000 PRESAFEAMT,
             SUM(ORD_SEND_AMT) / 1000 ORDSENDAMT,
             SUM(PRE_PLUS_WK_SEND_AMT) / 1000 PREPLUS,
             SUM(PLUS_SEND_AMT) / 1000 PLUSSENDAMT,
             SUM(OPER_AMT) / 1000 OPERAMT,
             SUM(CLOSE_AMT) / 1000 CLOSEAMT,
             SUM(DIFFER_AMT) / 1000 DIFFERAMT
            FROM --OP.t_fn_pack_invent_ofcjjm 
                 OP.T_FN_PACK_INVENT_SH
            WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = '088'
            GROUP BY DEPT_CD,
                     OFFICE_CD) AMT,
           (SELECT
            --jijum_cd,
             DEPT_CD,
             OFFICE_CD,
             SUM(DIFFER_AMT) / 1000 DIFFERAMT
            FROM --OP.t_fn_pack_invent_ofcjjm  
                 OP.T_FN_PACK_INVENT
            WHERE CLOSE_DATE =
                  OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  AND ORG_CD = '088'
            GROUP BY --BRANCH_CD,
                     DEPT_CD,
                     OFFICE_CD) AMTPRE,
           /*      (
           SELECT 
             ORG_CD, BRANCH_CD,BRANCH_NM 
           FROM 
             OP.T_CM_BRANCH 
           WHERE 
           ORG_CD='088'
           ) BRANCH, */
           OP.T_CM_OFFICE OFFICE
      --      where 
      --      jijum.jijum_cd=amt.jijum_cd
      --      and jijum.jijum_cd=amtpre.jijum_cd
      WHERE OFFICE.DEPT_CD = AMT.DEPT_CD
            AND OFFICE.DEPT_CD = AMTPRE.DEPT_CD
            AND OFFICE.OFFICE_CD = AMT.OFFICE_CD
            AND OFFICE.OFFICE_CD = AMTPRE.OFFICE_CD;
      --      ORDER BY OFFICE.DEPT_CD,
      --               OFFICE.OFFICE_CD;
    
      VFD_L1 :=  VFD_L1 || VFD_TEMP;
    
      --list 2
    
      FOR L IN (SELECT
                --      op.fc_length(amt.jijum_cd||' '||  substr2(office.office_nm,1,2))||','||amt.jijum_cd||' '||  substr2(office.office_nm,1,2)||
                --      op.fc_length('8202'||' '||  substr2(office.office_nm,1,2))||','||'8202'||' '||  substr2(office.office_nm,1,2)||
                 op.fc_length('' || ' ' || substr2(OFFICE.OFFICE_NM, 1, 2)) || ',' || '' || ' ' ||
                 substr2(OFFICE.OFFICE_NM, 1, 2) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT +
                                       AMT.OPERAMT + AMT.CLOSEAMT,
                                       '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT - AMT.PREPLUS -
                               AMT.PLUSSENDAMT + AMT.OPERAMT + AMT.CLOSEAMT,
                               '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.DIFFERAMT, '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.DIFFERAMT, '999,999,999')) ||
                 op.fc_length(LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT +
                                       AMT.OPERAMT + AMT.CLOSEAMT +
                                       AMT.DIFFERAMT,
                                       '999,999,999'))) || ',' ||
                 LTRIM(TO_CHAR(AMT.PRESAFEAMT - AMT.ORDSENDAMT - AMT.PREPLUS -
                               AMT.PLUSSENDAMT + AMT.OPERAMT + AMT.CLOSEAMT +
                               AMT.DIFFERAMT,
                               '999,999,999')) || lengthb(' ') || ',' || ' ' LIST_DATA
                
                FROM (SELECT
                      --jijum_cd,
                       DEPT_CD,
                       OFFICE_CD,
                       SUM(PRE_SAFE_AMT) / 1000 PRESAFEAMT,
                       SUM(ORD_SEND_AMT) / 1000 ORDSENDAMT,
                       SUM(PRE_PLUS_WK_SEND_AMT) / 1000 PREPLUS,
                       SUM(PLUS_SEND_AMT) / 1000 PLUSSENDAMT,
                       SUM(OPER_AMT) / 1000 OPERAMT,
                       SUM(CLOSE_AMT) / 1000 CLOSEAMT,
                       SUM(DIFFER_AMT) / 1000 DIFFERAMT
                      FROM --OP.t_fn_pack_invent_ofcjjm 
                           OP.T_FN_PACK_INVENT_SH
                      WHERE CLOSE_DATE =
                            OP.SF_GETPREACTDATE(PDATE)
                            AND ORG_CD = '088'
                      GROUP BY --BRANCH_CD,
                               DEPT_CD,
                               OFFICE_CD) AMT,
                     (SELECT
                      --jijum_cd,
                       DEPT_CD,
                       OFFICE_CD,
                       SUM(DIFFER_AMT) / 1000 DIFFERAMT
                      FROM --OP.t_fn_pack_invent_ofcjjm  
                           OP.T_FN_PACK_INVENT
                      WHERE CLOSE_DATE =
                            OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                            AND ORG_CD = '088'
                      GROUP BY --BRANCH_CD,
                               DEPT_CD,
                               OFFICE_CD) AMTPRE,
                     /*      (
                       SELECT 
                         ORG_CD, BRANCH_CD,BRANCH_NM 
                       FROM 
                         OP.T_CM_BRANCH 
                       WHERE 
                       ORG_CD='088'
                     ) BRANCH, */
                     OP.T_CM_OFFICE OFFICE
                --      where 
                --      jijum.jijum_cd=amt.jijum_cd
                --      and jijum.jijum_cd=amtpre.jijum_cd
                WHERE OFFICE.DEPT_CD = AMT.DEPT_CD
                      AND OFFICE.DEPT_CD = AMTPRE.DEPT_CD
                      AND OFFICE.OFFICE_CD = AMT.OFFICE_CD
                      AND OFFICE.OFFICE_CD = AMTPRE.OFFICE_CD
                ORDER BY OFFICE.DEPT_CD,
                         OFFICE.OFFICE_CD) LOOP
      
        VFD_L2 := VFD_L2 || L.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length('합 계') || ',' || '합 계' ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT +
                                       AMT.OPERAMT + AMT.CLOSEAMT),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                               AMT.PREPLUS - AMT.PLUSSENDAMT + AMT.OPERAMT +
                               AMT.CLOSEAMT),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.DIFFERAMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.DIFFERAMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                                       AMT.PREPLUS - AMT.PLUSSENDAMT +
                                       AMT.OPERAMT + AMT.CLOSEAMT +
                                       AMT.DIFFERAMT),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(AMT.PRESAFEAMT - AMT.ORDSENDAMT -
                               AMT.PREPLUS - AMT.PLUSSENDAMT + AMT.OPERAMT +
                               AMT.CLOSEAMT + AMT.DIFFERAMT),
                           '999,999,999')) || lengthb(' ') || ',' || ' '
      INTO VFD_TEMP
      FROM (SELECT
            --jijum_cd,
             DEPT_CD,
             OFFICE_CD,
             SUM(PRE_SAFE_AMT) / 1000 PRESAFEAMT,
             SUM(ORD_SEND_AMT) / 1000 ORDSENDAMT,
             SUM(PLUS_SEND_AMT) / 1000 PLUSSENDAMT,
             SUM(PRE_PLUS_WK_SEND_AMT) / 1000 PREPLUS,
             SUM(OPER_AMT) / 1000 OPERAMT,
             SUM(CLOSE_AMT) / 1000 CLOSEAMT,
             SUM(DIFFER_AMT) / 1000 DIFFERAMT
            FROM --OP.t_fn_pack_invent_ofcjjm 
                 OP.T_FN_PACK_INVENT_SH
            WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND ORG_CD = '088'
            GROUP BY --BRANCH_CD,
                     DEPT_CD,
                     OFFICE_CD) AMT,
           (SELECT
            --jijum_cd,
             DEPT_CD,
             OFFICE_CD,
             SUM(DIFFER_AMT) / 1000 DIFFERAMT
            FROM --OP.t_fn_pack_invent_ofcjjm  
                 OP.T_FN_PACK_INVENT
            WHERE CLOSE_DATE =
                  OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE))
                  AND ORG_CD = '088'
            GROUP BY --BRANCH_CD,
                     DEPT_CD,
                     OFFICE_CD) AMTPRE,
           /*      (
             SELECT 
               ORG_CD, BRANCH_CD,BRANCH_NM 
             FROM 
               OP.T_CM_BRANCH 
             WHERE 
             ORG_CD='088'
           ) BRANCH, */
           OP.T_CM_OFFICE OFFICE
      --      where 
      --      jijum.jijum_cd=amt.jijum_cd
      --      and jijum.jijum_cd=amtpre.jijum_cd
      WHERE OFFICE.DEPT_CD = AMT.DEPT_CD
            AND OFFICE.DEPT_CD = AMTPRE.DEPT_CD
            AND OFFICE.OFFICE_CD = AMT.OFFICE_CD
            AND OFFICE.OFFICE_CD = AMTPRE.OFFICE_CD;
      --      ORDER BY OFFICE.DEPT_CD,
      --               OFFICE.OFFICE_CD;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      --------------------------------------------------------------------------------------
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VFD_L1   := '';
      VFD_L2   := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackAmtInSafeByOffice',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKAMTINSAFEBYOFFICE;

  PROCEDURE SP_PACKCASHTRANSPLANTABLEFORKN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리현송계획표 PackCashTransPlanTableForKn
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일' ||
             op.fc_length(substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                   '1',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                           'YYYYMMDD'),
                                   '2',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                           'YYYYMMDD'),
                                   '3',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                           'YYYYMMDD'),
                                   '4',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                           'YYYYMMDD'),
                                   '5',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                           'YYYYMMDD'),
                                   '6',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                           'YYYYMMDD'),
                                   PDATE),
                            5,
                            2) || '월' ||
                     substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                                   '1',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                           'YYYYMMDD'),
                                   '2',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                           'YYYYMMDD'),
                                   '3',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                           'YYYYMMDD'),
                                   '4',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                           'YYYYMMDD'),
                                   '5',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                           'YYYYMMDD'),
                                   '6',
                                   TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                           'YYYYMMDD'),
                                   PDATE),
                            7,
                            2) || '일') || ',' ||
             substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                           '1',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                   'YYYYMMDD'),
                           '2',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                   'YYYYMMDD'),
                           '3',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                   'YYYYMMDD'),
                           '4',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                   'YYYYMMDD'),
                           '5',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                   'YYYYMMDD'),
                           '6',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                   'YYYYMMDD'),
                           PDATE),
                    5,
                    2) || '월' ||
             substr2(DECODE(OP.SF_GETWEEKDAY(PDATE),
                           '1',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') - 1,
                                   'YYYYMMDD'),
                           '2',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 5,
                                   'YYYYMMDD'),
                           '3',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 4,
                                   'YYYYMMDD'),
                           '4',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 3,
                                   'YYYYMMDD'),
                           '5',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 2,
                                   'YYYYMMDD'),
                           '6',
                           TO_CHAR(TO_DATE(PDATE, 'YYYYMMDD') + 1,
                                   'YYYYMMDD'),
                           PDATE),
                    7,
                    2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) ||
                       op.fc_length(LTRIM(TO_CHAR(ROWNUM, '9,999'))) || ',' ||
                       LTRIM(TO_CHAR(ROWNUM, '9,999')) ||
                       op.fc_length(REPORT.BRANCH_CD) || ',' || REPORT.BRANCH_CD ||
                       op.fc_length(REPORT.MAC_NO) || ',' || REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.WKD_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT) / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.WKD_SENDPLAN_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.WKD_SENDPLAN_AMT / 1000),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.PLUS_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.PLUS_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM((REPORT.POST_SENDPLAN_AMT +
                                       REPORT.WKD_SENDPLAN_AMT +
                                       REPORT.PLUS_SEND_AMT) / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM((REPORT.POST_SENDPLAN_AMT +
                               REPORT.WKD_SENDPLAN_AMT +
                               REPORT.PLUS_SEND_AMT) / 1000),
                           '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
      --      ORDER BY REPORT.ORG_CD,
      --               REPORT.BRANCH_CD,
      --               REPORT.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTransPlanTableForKn',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANSPLANTABLEFORKN;

  PROCEDURE SP_NICEOPAMTREQFORHD(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 NiceOpAmtReqForHd
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.START_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd') ||
                      op.fc_length(TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'),
                                      'yyyy-mm-dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.END_DATE, 'yyyymmdd'),
                              'yyyy-mm-dd') || op.fc_length(DE.USE_DAYS) || ',' ||
                      DE.USE_DAYS ||
                      op.fc_length(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.MAC_CNT, '999,999')) ||
                      
                      op.fc_length(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                            DECODE(DE.USE_DAYS,
                                                                 1,
                                                                 RA.ORD_CNT_RATE,
                                                                 WKD_CNT_RATE) / 100),
                                            '9,990.90'))) || ',' ||
                      LTRIM(TO_CHAR(OP.AVG_CNT *
                                    (1 + DECODE(DE.USE_DAYS,
                                                1,
                                                RA.ORD_CNT_RATE,
                                                WKD_CNT_RATE) / 100),
                                    '9,990.90')) ||
                      op.fc_length(LTRIM(TO_CHAR(int(ROUND(OP.AVG_CNT, 2)),
                                            '999,990.90'))) || ',' ||
                      LTRIM(TO_CHAR(int(ROUND(OP.AVG_CNT, 2)), '999,990.90')) ||
                      op.fc_length(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                   1,
                                                   RA.ORD_CNT_RATE,
                                                   WKD_CNT_RATE),
                                            '999,990.0'))) || ',' ||
                      LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                           1,
                                           RA.ORD_CNT_RATE,
                                           WKD_CNT_RATE),
                                    '999,990.0')) ||
                      op.fc_length(LTRIM(TO_CHAR(int(ROUND(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3) * (1 +
                                                              DECODE(DE.USE_DAYS,
                                                                     1,
                                                                     RA.ORD_AMT_RATE,
                                                                     RA.WKD_AMT_RATE) / 100),
                                                  0)),
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(int(ROUND(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3) * (1 +
                                                      DECODE(DE.USE_DAYS,
                                                             1,
                                                             RA.ORD_AMT_RATE,
                                                             RA.WKD_AMT_RATE) / 100),
                                          0)),
                                    '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                  3)),
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000), 3)),
                                    '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(int(ROUND(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_AMT_RATE,
                                                         RA.WKD_AMT_RATE),
                                                  1)),
                                            '999,999.0'))) || ',' ||
                      LTRIM(TO_CHAR(int(ROUND(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_AMT_RATE,
                                                 RA.WKD_AMT_RATE),
                                          1)),
                                    '999,999.0')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.USE_DAYS, '999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.USE_DAYS, '999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_START_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(TMR_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(YST_RESULT_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(YST_RESULT_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(YST_IN_RESULT_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(YST_IN_RESULT_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(RETURN_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(RETURN_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DEMAND_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DEMAND_AMT / 1000, '999,999,999')) ||
                      op.fc_length(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                            YST_RESULT_AMT / 1000 +
                                            YST_IN_RESULT_AMT / 1000,
                                            '999,999,999'))) || ',' ||
                      LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                    YST_RESULT_AMT / 1000 +
                                    YST_IN_RESULT_AMT / 1000,
                                    '999,999,999')) ||
                      op.fc_length(TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd')) || ',' ||
                      TO_CHAR(TO_DATE(DE.DEMAND_DATE, 'yyyymmdd') - 1,
                              'yyyy.mm.dd')
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT COUNT(*)
      INTO VCNT
      FROM OP.T_CM_ORG
      WHERE ORG_CD = KFTC_ORG_CD
            AND TRAN_YN = '1'
            AND ORG_CD = PORGCD;
    
      IF VCNT > 0 THEN
        SELECT op.fc_length('마. 입금계좌') || ',' || '마. 입금계좌' ||
               op.fc_length('- 은  행  명 :') || ',' || '- 은  행  명 :' ||
               op.fc_length(O.ORG_NM) || ',' || O.ORG_NM ||
               op.fc_length('- 예  금  주 :') || ',' || '- 예  금  주 :' ||
               op.fc_length(A.ACCOUNT_PERSON) || ',' || A.ACCOUNT_PERSON ||
               op.fc_length('- 계좌번호  :') || ',' || '- 계좌번호  :' ||
               op.fc_length(OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')) || ',' ||
               OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_ACCOUNT A,
             OP.T_CM_ORG          O
        WHERE A.ORG_CD = O.ORG_CD;
      
      ELSE
        SELECT lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' '
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(NICE_RCV_PART || ' ' || NICE_RCV_PERSON) || ',' ||
             NICE_RCV_PART || ' ' || NICE_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
      VCNT     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForHd',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORHD;

  PROCEDURE SP_NICEACTUALRESULTREPORTFORHD(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
    VMAXDATE   VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과        
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReportForHd 
    
      --select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                   OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE),
                     OP.SF_GETBEFOREDATE(PDATE)) A,
           (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
            FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) B,
           (SELECT DEAL_DATE,
                   OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                   OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '1'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE),
                     OP.SF_GETBEFOREDATE(PDATE)) C,
           (SELECT STD_DATE DEAL_DATE
            FROM OP.T_FN_CALENDAR
            WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                  AND STD_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')) D
      
      WHERE D.DEAL_DATE = A.DEAL_DATE(+)
            AND D.DEAL_DATE = B.DEAL_DATE(+)
            AND D.DEAL_DATE = C.DEAL_DATE(+);
    
      -- header  
      IF VCNT2 > 0 THEN
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        ------------------------------------------------------------------         
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(D.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(D.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(D.DEAL_DATE, 5, 2) || '월' ||
                         substr2(D.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.TIMECNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.TIMECNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.OTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.OTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.TOTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.TIMECNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.TIMECNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.OTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.OTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.TOTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.TOTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.REJECTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.REJECTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.TIMEAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.TIMEAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.OTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.OTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.TOTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.TOTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.TIMEAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.TIMEAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.OTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.OTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(C.TOTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(C.TOTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(A.REJECTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(A.REJECTAMT, 0), '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               BEFOREOPERDATE,
                               BEFOREDATE,
                               --                               OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                               --                               OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM (SELECT T1.*,
                                     OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                                     OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE
                              FROM OP.T_FN_NICE_ORG_DSUM T1) S1
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE,
                                 BEFOREOPERDATE,
                                 BEFOREDATE
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) A,
                       (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
                        FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) B,
                       (SELECT DEAL_DATE,
                               BEFOREOPERDATE,
                               BEFOREDATE,
                               --                               OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                               --                               OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM (SELECT T1.*,
                                     OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                                     OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE
                              FROM OP.T_FN_NICE_ORG_DSUM T1) S1
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '1'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE,
                                 BEFOREOPERDATE,
                                 BEFOREDATE
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) C,
                       (SELECT STD_DATE DEAL_DATE
                        FROM OP.T_FN_CALENDAR
                        WHERE STD_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                              AND
                              STD_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                  'yyyymmdd')) D
                  WHERE D.DEAL_DATE = A.DEAL_DATE(+)
                        AND D.DEAL_DATE = B.DEAL_DATE(+)
                        AND D.DEAL_DATE = C.DEAL_DATE(+)) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합 계') || ',' || '합 계' ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TIMECNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.TIMECNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.OTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.TOTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.TIMECNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.TIMECNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.OTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.OTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.TOTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.TOTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.REJECTCNT, 0)),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.REJECTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TIMEAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.TIMEAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.OTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.TOTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.TIMEAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.TIMEAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.OTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.OTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(C.TOTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(C.TOTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(A.REJECTAMT, 0)),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(A.REJECTAMT, 0)), '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                     OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE,
                       OP.SF_GETPREACTDATE(PDATE),
                       OP.SF_GETBEFOREDATE(PDATE)) A,
             (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
              FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) B,
             (SELECT DEAL_DATE,
                     OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                     OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '1'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE,
                       OP.SF_GETPREACTDATE(PDATE),
                       OP.SF_GETBEFOREDATE(PDATE)) C,
             (SELECT STD_DATE DEAL_DATE
              FROM OP.T_FN_CALENDAR
              WHERE STD_DATE >= OP.SF_GETPREACTDATE(PDATE)
                    AND STD_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')) D
        
        WHERE D.DEAL_DATE = A.DEAL_DATE(+)
              AND D.DEAL_DATE = B.DEAL_DATE(+)
              AND D.DEAL_DATE = C.DEAL_DATE(+);
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
            --list 2
            FOR L IN (SELECT op.fc_length(TO_CHAR(ROWNUM, '999')) || ',' ||
                             TO_CHAR(ROWNUM, '999') ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(TO_CHAR(DEAL_AMT, '999')) || ',' ||
                             TO_CHAR(DEAL_AMT, '999') LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(TO_CHAR(SUM(DEAL_AMT / 1000), '99,999')) || ',' ||
                   TO_CHAR(SUM(DEAL_AMT / 1000), '99,999')
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd) */
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR4HD_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportForHd',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTFORHD;

  -- 수수료용 실적표
  PROCEDURE SP_NICEACTUALRESULTREPORTFORFE(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
    VMAXDATE  VARCHAR2(30);
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReportForFe 
    
      --select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                   SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                   (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                   (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                              0)) REJECTCNT,
                   SUM(DECODE(DEAL_STATUS,
                              2,
                              TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                              0)) / 1000 REJECTAMT
            FROM OP.T_FN_NICE_ORG_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) A,
           (SELECT DEAL_DATE,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                   SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
            FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
            WHERE ORG_CD = PORGCD
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE
            --            ,
            --                     OP.SF_GETPREACTDATE(PDATE),
            --                     OP.SF_GETBEFOREDATE(PDATE)
            ) B
      WHERE A.DEAL_DATE = B.DEAL_DATE(+);
    
      -- header  
    
      IF VCNT2 > 0 THEN
      
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(A.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(A.DEAL_DATE, 5, 2) || '월' ||
                         substr2(A.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMECNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMECNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTCNT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTCNT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTCNT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TIMEAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.OTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.OTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(NVL(B.NIGHTAMT, 0), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.REJECTAMT, '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(A.TOTFEE, '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(A.TOTFEE, '999,999,999')) LIST_DATA
                  FROM (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                               SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                               (SUM(DECODE(DEAL_STATUS, 0, TIME_CUST_FEE, 0))) +
                               (SUM(DECODE(DEAL_STATUS, 0, OT_CUST_FEE, 0)) +
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_CUST_FEE, 0))) TOTFEE,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_CNT + OT_DEAL_CNT +
                                          NIGHT_DEAL_CNT,
                                          0)) REJECTCNT,
                               SUM(DECODE(DEAL_STATUS,
                                          2,
                                          TIME_DEAL_AMT + OT_DEAL_AMT +
                                          NIGHT_DEAL_AMT,
                                          0)) / 1000 REJECTAMT
                        FROM OP.T_FN_NICE_ORG_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) A,
                       (SELECT DEAL_DATE,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                               SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
                        FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
                        WHERE ORG_CD = PORGCD
                              AND DEAL_TYPE = '0'
                              AND
                              DEAL_DATE <= TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                                   'yyyymmdd')
                              AND DEAL_DATE >=
                              OP.SF_GETPREACTDATE(PDATE)
                        GROUP BY DEAL_DATE
                        --                        ,
                        --                                 OP.SF_GETPREACTDATE(PDATE),
                        --                                 OP.SF_GETBEFOREDATE(PDATE)
                        ) B
                  WHERE A.DEAL_DATE = B.DEAL_DATE(+)
                  ORDER BY A.DEAL_DATE) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length('합  계') || ',' || '합  계' ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMECNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTCNT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTCNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TIMEAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.OTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(NVL(B.NIGHTAMT, 0)), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.REJECTAMT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(A.TOTFEE), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(A.TOTFEE), '999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) TIMECNT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000 TIMEAMT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) OTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 OTAMT,
                     SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_CNT, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) TOTCNT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_DEAL_AMT, 0)) / 1000) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_DEAL_AMT, 0)) / 1000 +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000) TOTAMT,
                     (SUM(DECODE(DEAL_STATUS, 0, TIME_CUST_FEE, 0))) +
                     (SUM(DECODE(DEAL_STATUS, 0, OT_CUST_FEE, 0)) +
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_CUST_FEE, 0))) TOTFEE,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_CNT + OT_DEAL_CNT + NIGHT_DEAL_CNT,
                                0)) REJECTCNT,
                     SUM(DECODE(DEAL_STATUS,
                                2,
                                TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                                0)) / 1000 REJECTAMT
              FROM OP.T_FN_NICE_ORG_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) A,
             (SELECT DEAL_DATE,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_CNT, 0)) NIGHTCNT,
                     SUM(DECODE(DEAL_STATUS, 0, NIGHT_DEAL_AMT, 0)) / 1000 NIGHTAMT
              FROM OP.T_FN_NICE_ORG_NIGHT_DSUM
              WHERE ORG_CD = PORGCD
                    AND DEAL_TYPE = '0'
                    AND DEAL_DATE <=
                    TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                    AND
                    DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
              GROUP BY DEAL_DATE
              --              ,
              --                       OP.SF_GETPREACTDATE(PDATE),
              --                       OP.SF_GETBEFOREDATE(PDATE)
              ) B
        WHERE A.DEAL_DATE = B.DEAL_DATE(+);
      
        VFD_L1 :=  VFD_L1 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(LTRIM(TO_CHAR(ROWNUM, '999,999'))) || ',' ||
                             LTRIM(TO_CHAR(ROWNUM, '999,999')) ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(LTRIM(TO_CHAR(DEAL_AMT, '999,999,999'))) || ',' ||
                             LTRIM(TO_CHAR(DEAL_AMT, '999,999,999')) LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /*
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L2 := VFD_L2 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000),
                                         '999,999,999'))) || ',' ||
                   LTRIM(TO_CHAR(SUM(DEAL_AMT / 1000), '999,999,999'))
            INTO VFD_L3
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd)*/
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR4FE_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportForFe',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTFORFE;

  PROCEDURE SP_ORGOPAMTREPORTFORSH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                   PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                   PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                   PFAXCD    IN VARCHAR2,
                                   PPAGENO   IN NUMBER,
                                   PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      -- header  
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(A.DAT, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(A.DAT, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd') -
                             TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd') -
                     TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(LTRIM(TO_CHAR((A.AMT - C.AMT), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR((A.AMT - C.AMT), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(C.AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(C.AMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(A.AMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(A.AMT, '999,999,999'))
      INTO VFD_TEMP
      FROM (SELECT OPER_DATE DAT,
                   SUM(OPER_AMT) / 1000 AMT
            FROM OP.T_FN_OPER
            WHERE OPER_DATE = PDATE
                  AND ORG_CD = '088'
            GROUP BY OPER_DATE) A,
           
           (SELECT CARRY_DATE DAT,
                   SUM(CASH_AMT) / 1000 AMT
            FROM OP.T_FN_CARRY
            WHERE CARRY_DATE = PDATE
                  AND CARRY_ORG_CD = '1030401'
            GROUP BY CARRY_DATE) C
      
      WHERE A.DAT = C.DAT(+);
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(NVL(B_NAME, '')) || ',' || NVL(B_NAME, '') ||
             --           op.fc_length(NVL(B_TELNO,''))||','|| NVL(B_TELNO,'')|| 
             --             op.fc_length(substr2(NVL(B_TELNO,''),1,6)||'-'||substr2(NVL(B_TELNO,''),7,4)||'***')||','||
             --                     substr2(NVL(B_TELNO,''),1,6)||'-'||substr2(NVL(B_TELNO,''),7,4)||'***'|| 
              op.fc_length(NVL(B_CARNUM, '')) || ',' || NVL(B_CARNUM, '') ||
              op.fc_length(NVL(C_NAME, '')) || ',' || NVL(C_NAME, '') ||
             --           op.fc_length(NVL(C_TELNO,''))||','|| NVL(C_TELNO,'')||
              op.fc_length(NVL(C_CARNUM, '')) || ',' || NVL(C_CARNUM, '')
      INTO VFD_TEMP
      --JOB_DATE,B_NAME,B_TELNO,B_CARNUM,C_NAME,C_TELNO,C_CARNUM 
      FROM OP.T_FN_SH_SENDCAR_REG
      WHERE JOB_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_OrgOpAmtReportForSh',
                                          VRESULT,
                                          PDATE);
  
  END SP_ORGOPAMTREPORTFORSH;

  PROCEDURE SP_NICEACTUALRESULTREPORTSC(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                        PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                        PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                        PFAXCD    IN VARCHAR2,
                                        PPAGENO   IN NUMBER,
                                        PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
    VMAXDATE  VARCHAR2(30);
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT2      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과        
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --나이스 실적통보서 NiceActualResultReportSC
    
      -- select /*+ first row */
      SELECT /*+ index_desc (t_Fn_nice_tran_notend ix_t_Fn_nice_tran_notend_02) */
       COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_TRAN_NOTEND
      WHERE ORG_CD = PORGCD
            AND DEAL_DATE <=
            TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
            AND DEAL_STATUS = '2'
            AND DEAL_TYPE = '0'
            AND DEAL_DATE >= (SELECT MAX(DEMAND_DATE) DEMAND_DATE
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE < PDATE
                                    AND ORG_CD = PORGCD);
      --and rownum =1  ;
    
      SELECT COUNT(*)
      INTO VCNT2
      FROM (SELECT DEAL_DATE,
                   OP.SF_GETPREACTDATE(PDATE) BEFOREOPERDATE,
                   OP.SF_GETBEFOREDATE(PDATE) BEFOREDATE,
                   CARD_NM,
                   SUM(TIME_DEAL_CNT) TIMECNT,
                   SUM(TIME_DEAL_AMT) / 1000 TIMEAMT,
                   SUM(OT_DEAL_CNT) OTCNT,
                   SUM(OT_DEAL_AMT) / 1000 OTAMT,
                   SUM(TIME_DEAL_CNT + OT_DEAL_CNT) TOTCNT,
                   SUM(TIME_DEAL_AMT + OT_DEAL_AMT) / 1000 TOTAMT
            FROM OP.T_FN_NICE_CARD_DSUM
            WHERE ORG_CD = '0SC'
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE)
            GROUP BY DEAL_DATE,
                     CARD_NM,
                     OP.SF_GETPREACTDATE(PDATE),
                     OP.SF_GETBEFOREDATE(PDATE));
    
      -- header  
      IF VCNT2 > 0 THEN
        SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
               NVL(NICE_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      
        VFD_HD := VFD_TEMP;
      
        SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') || op.fc_length(' ~ ') || ',' || ' ~ ' ||
               op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                       'yyyymmdd'),
                               'yyyy-mm-dd')) || ',' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd'),
                       'yyyy-mm-dd') ||
               op.fc_length('(' || TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                              'yyyymmdd') -
                                      TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                              'yyyymmdd') + 1,
                                      '99') || '일간)') || ',' || '(' ||
               TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                               'yyyymmdd') -
                       TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                               'yyyymmdd') + 1,
                       '99') || '일간)'
        INTO VFD_TEMP
        FROM DUAL;
      
        VFD_HD := VFD_HD || VFD_TEMP;
      
        ------------------------------------------------------------------         
        --list 1
      
        FOR K IN (SELECT op.fc_length(substr2(A.DEAL_DATE, 5, 2) || '월' ||
                                 substr2(A.DEAL_DATE, 7, 2) || '일') || ',' ||
                         substr2(A.DEAL_DATE, 5, 2) || '월' ||
                         substr2(A.DEAL_DATE, 7, 2) || '일' ||
                         op.fc_length(CARD_NM) || ',' || CARD_NM ||
                         op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(SUM(OT_DEAL_CNT),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(OT_DEAL_CNT), '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT +
                                                   OT_DEAL_CNT),
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT + OT_DEAL_CNT),
                                       '999,999,999')) ||
                         
                         op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT) / 1000,
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT) / 1000,
                                       '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(SUM(OT_DEAL_AMT) / 1000,
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(OT_DEAL_AMT) / 1000,
                                       '999,999,999')) ||
                         op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT +
                                                   OT_DEAL_AMT) / 1000,
                                               '999,999,999'))) || ',' ||
                         LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT + OT_DEAL_AMT) / 1000,
                                       '999,999,999')) LIST_DATA
                  FROM OP.T_FN_NICE_CARD_DSUM A
                  WHERE ORG_CD = '0SC'
                        AND
                        DEAL_DATE <=
                        TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                        AND DEAL_DATE >=
                        OP.SF_GETPREACTDATE(PDATE)
                  GROUP BY DEAL_DATE,
                           CARD_NM
                  --                           ,
                  --                           OP.SF_GETPREACTDATE(PDATE),
                  --                           OP.SF_GETBEFOREDATE(PDATE)
                  ) LOOP
        
          VFD_L1 :=  VFD_L1 || K.LIST_DATA;
        
        END LOOP;
      
        SELECT op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(OT_DEAL_CNT), '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(OT_DEAL_CNT), '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT + OT_DEAL_CNT),
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(TIME_DEAL_CNT + OT_DEAL_CNT),
                             '999,999,999')) ||
               
               op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT) / 1000,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT) / 1000, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(OT_DEAL_AMT) / 1000, '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(OT_DEAL_AMT) / 1000, '999,999,999')) ||
               op.fc_length(LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT + OT_DEAL_AMT) / 1000,
                                     '999,999,999'))) || ',' ||
               LTRIM(TO_CHAR(SUM(TIME_DEAL_AMT + OT_DEAL_AMT) / 1000,
                             '999,999,999'))
        
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_CARD_DSUM A
        WHERE ORG_CD = '0SC'
              AND DEAL_DATE <=
              TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
              AND DEAL_DATE >= OP.SF_GETPREACTDATE(PDATE);
      
        VFD_L2 := VFD_L2 || VFD_TEMP;
      
        ---------------------------------------------------------------------------        
      
        IF VCNT = 0 THEN
          -- hidden없는것
          INSERT INTO OP.T_CM_FAX_DATA
            (INDEX_KEY,
             PAGE_INDEX,
             FAX_FILE_CD,
             FD_HD,
             FD_L1,
             FD_L2)
          VALUES
            (PINDEXKEY,
             PPAGENO,
             PFAXCD,
             VFD_HD,
             VFD_L1,
             VFD_L2);
        
        ELSE
          -- hidden 있는것
          BEGIN
          
            SELECT MAX(DEMAND_DATE) DEMAND_DATE
            INTO VMAXDATE
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE < PDATE
                  AND ORG_CD = PORGCD;
          
            --list 2
            FOR L IN (SELECT op.fc_length(TO_CHAR(ROWNUM, '999')) || ',' ||
                             TO_CHAR(ROWNUM, '999') ||
                             op.fc_length(substr2(DEAL_MMDD, 1, 2) || '/' ||
                                     substr2(DEAL_MMDD, 3, 2)) || ',' ||
                             substr2(DEAL_MMDD, 1, 2) || '/' ||
                             substr2(DEAL_MMDD, 3, 2) ||
                             op.fc_length(DEAL_HOUR || ':' || DEAL_MI || ':' ||
                                     DEAL_SEC) || ',' || DEAL_HOUR || ':' ||
                             DEAL_MI || ':' || DEAL_SEC || op.fc_length(DEAL_NO) || ',' ||
                             DEAL_NO || op.fc_length(ACCOUNT_NO) || ',' ||
                             ACCOUNT_NO || op.fc_length(S) || ',' || S ||
                             op.fc_length(TO_CHAR(DEAL_AMT, '999')) || ',' ||
                             TO_CHAR(DEAL_AMT, '999') LIST_DATA
                      FROM (SELECT DEAL_MMDD,
                                   DEAL_HOUR,
                                   DEAL_MI,
                                   DEAL_SEC,
                                   DEAL_NO,
                                   TRIM(OP.FC_FN_SECURITY(INST_BRANCH_CD, '2') || '-' ||
                                        OP.FC_FN_SECURITY(ACCOUNT_NO, '2')) ACCOUNT_NO,
                                   '미완료' S,
                                   DEAL_AMT / 1000 DEAL_AMT
                            FROM OP.T_FN_NICE_TRAN_NOTEND
                            WHERE ORG_CD = PORGCD
                                  AND DEAL_DATE <=
                                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                              'yyyymmdd')
                                  AND DEAL_STATUS = '2'
                                  AND DEAL_TYPE = '0'
                                  AND DEAL_DATE >= VMAXDATE
                            /* 
                            (select 
                            max(demand_date) demand_date 
                             from 
                            OP.t_fn_nice_demand 
                             where 
                            demand_date<pDate
                            and org_cd=pOrgCd)
                            */
                            ORDER BY DEAL_MMDD,
                                     DEAL_HOUR,
                                     DEAL_MI,
                                     DEAL_SEC)) LOOP
            
              VFD_L3 := VFD_L3 || L.LIST_DATA;
            
            END LOOP;
          
            SELECT op.fc_length(TO_CHAR(SUM(DEAL_AMT / 1000), '99,999')) || ',' ||
                   TO_CHAR(SUM(DEAL_AMT / 1000), '99,999')
            INTO VFD_L4
            FROM OP.T_FN_NICE_TRAN_NOTEND
            WHERE ORG_CD = PORGCD
                  AND DEAL_DATE <=
                  TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyymmdd')
                  AND DEAL_STATUS = '2'
                  AND DEAL_TYPE = '0'
                  AND DEAL_DATE >= VMAXDATE
            /*
            (select 
            max(demand_date) demand_date 
             from 
            OP.t_fn_nice_demand 
             where 
            demand_date<pDate
            and org_cd=pOrgCd)*/
            ;
          
            INSERT INTO OP.T_CM_FAX_DATA
              (INDEX_KEY,
               PAGE_INDEX,
               FAX_FILE_CD,
               FD_HD,
               FD_L1,
               FD_L2,
               FD_L3,
               FD_L4)
            VALUES
              (PINDEXKEY,
               PPAGENO,
               'NARR4SC_H',
               VFD_HD,
               VFD_L1,
               VFD_L2,
               VFD_L3,
               VFD_L4);
          
          END;
        END IF;
      
        VFD_HD   := '';
        VFD_TEMP := '';
        VFD_L1   := '';
        VFD_L2   := '';
        VFD_L3   := '';
        VFD_L4   := '';
        VCNT     := 0;
        VFD_FT   := '';
      ELSE
        IF PINDEXKEY = 1 THEN
          DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = PINDEXKEY;
        END IF;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceActualResultReportSC',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEACTUALRESULTREPORTSC;

  -- KIB 소요명세서
  PROCEDURE SP_PACKOPAMTNEEDFORKI(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금삼송생명 소요명세서 PackOpAmtNeedForKI
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                             TO_DATE(PDATE, 'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                     TO_DATE(PDATE, 'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(CASE
                       WHEN PBRANCHCD IS NULL THEN
                        ' '
                       ELSE
                        PBRANCHCD
                     END) || ',' || CASE
               WHEN PBRANCHCD IS NULL THEN
                ' '
               ELSE
                PBRANCHCD
             END || op.fc_length(LTRIM(TO_CHAR(DEMAND.BASE, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.BASE, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREBASE, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREBASE, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.REAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.REAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT SUM(BASE_AMT) BASE,
                   SUM(PRE_BASE_AMT) PREBASE,
                   SUM(PRE_OUT_AMT) OUTAMT,
                   SUM(PRE_IN_AMT) INAMT,
                   SUM(RETURN_AMT) REAMT,
                   SUM(DEMAND_AMT) DEMANDAMT
            FROM OP.T_FN_KIB_DEMAND
            WHERE DEMAND_DATE = PDATE) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      /*
       SELECT
         op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
         op.fc_length(to_char(to_date(pDate,'yyyymmdd')-to_date(pDate,'yyyymmdd')+1,'99'))||','||
           to_char(to_date(pDate,'yyyymmdd')-to_date(pDate,'yyyymmdd')+1,'99')||
         op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
         op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
         op.fc_length(case when pJijumCd is null then ' ' else pJijumCd end)||','||case when pJijumCd is null then ' ' else pJijumCd end||
         op.fc_length(ltrim(to_char(DEMAND.POSTTRAN,'999,999,999,999')))||','||ltrim(to_char(DEMAND.POSTTRAN,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.PREADD,'999,999,999,999')))||','||ltrim(to_char(DEMAND.PREADD,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.PRERESPECTAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.PRERESPECTAMT,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.CURRESPECTAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.CURRESPECTAMT,'999,999,999,999'))||
         op.fc_length(ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999,999')),
         op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')
         
       into vFd_temp, vCharTemp
       FROM
       (
            SELECT 
              DEMAND_DATE,ORG_CD,
              sum(POST_TRANS_AMT) POSTTRAN,
              sum(PRE_ADD_TRANS_AMT) PREADD,
              sum(DEMAND_AMT) DEMANDAMT, 
              sum(cur_respect_amt) CURRESPECTAMT,
              sum(pre_respect_amt) PRERESPECTAMT,
            sum(differ_amt) DIFFERAMT,
              sum(pre_collect_amt) CLOSEAMT
              
            FROM 
              OP.T_FN_PACK_BRANCH
            WHERE 
            DEMAND_DATE=pDate 
            AND ORG_CD=pOrgCd
            AND BRANCH_CD LIKE pJijumCd||'%'
            GROUP BY DEMAND_DATE,ORG_CD
       ) DEMAND ;
              
       vFd_hd :=  vFd_hd||vFd_temp;        
            
            vAmt1 :=0;
            vAmt2 :=0; 
            vAmt3 :=0; 
            
           begin 
         select sum(differ_amt) differamt
         into vAmt1   
         from OP.t_fn_pack_invent
         where org_cd=pOrgCd
         and close_date=OP.sf_getPreActDate(OP.sf_getPreActDate(pDate));
         
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            vAmt1 := 0;
           end;         
           
           begin
       select  sum(differ_amt) differamt
       into vAmt2
       from 
         OP.t_fn_pack_invent_jijum
       where
         org_cd=pOrgCd
         and jijum_cd=pJijumCd
         and close_date=OP.sf_getPreActDate(OP.sf_getPreActDate(pDate));    
       
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            vAmt2 := 0;
           end;         
      
          begin
       select sum(self_amt)  amt
       into vAmt3
           from 
             OP.t_Fn_atm_selfamt
           WHERE org_cd=pOrgCd
           and pDate BETWEEN start_Date
                     AND end_date;    
       
         EXCEPTION
            WHEN NO_DATA_FOUND THEN
            vAmt3 := 0;
           end;         
      */
      /*
              if pJijumCd is null then 
      
          select  op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt - differ_amt),'999,999,999,999')))||','||
              ltrim(to_char(sum(mac_amt + safe_amt - differ_amt),'999,999,999,999'))||
              --op.fc_length(vCharTemp)||','||vCharTemp||
                      vCharTemp||
                      op.fc_length(ltrim(to_char(vAmt3,'999,999,999,999')))||','||ltrim(to_char(vAmt3,'999,999,999,999'))||
            op.fc_length(ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) - vAmt1,'999,999,999,999')))||','||
              ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) - vAmt1,'999,999,999,999'))||
            op.fc_length(ltrim(to_char(sum(oper_amt),'999,999,999,999')))||','||ltrim(to_char(sum(oper_amt),'999,999,999,999'))||
            op.fc_length(ltrim(to_char(sum(differ_amt),'999,999,999,999')))||','||ltrim(to_char(sum(differ_amt),'999,999,999,999'))||
            op.fc_length(ltrim(to_char(sum(out_amt),'999,999,999,999')))||','||ltrim(to_char(sum(out_amt),'999,999,999,999'))||
            op.fc_length(ltrim(to_char(sum(in_amt),'999,999,999,999')))||','||ltrim(to_char(sum(in_amt),'999,999,999,999'))
          into    vFd_temp        
          from    OP.t_fn_pack_invent
          where   org_cd=pOrgCd
          and     close_date=OP.sf_getPreActDate(pDate);
      
          
            else
          select op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
                   ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))||
                 --op.fc_length(vCharTemp)||','||vCharTemp||
                      vCharTemp||
                     op.fc_length(ltrim(to_char(vAmt3,'999,999,999,999')))||','||ltrim(to_char(vAmt3,'999,999,999,999'))||
                 op.fc_length(ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) -vAmt2,'999,999,999,999')))||','||
                   ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) -vAmt2,'999,999,999,999'))||
                 op.fc_length(ltrim(to_char(sum(oper_amt),'999,999,999,999')))||','||ltrim(to_char(sum(oper_amt),'999,999,999,999'))||
                 op.fc_length(ltrim(to_char(sum(differ_amt),'999,999,999,999')))||','||ltrim(to_char(sum(differ_amt),'999,999,999,999'))||
                 op.fc_length(ltrim(to_char(sum(out_amt),'999,999,999,999')))||','||ltrim(to_char(sum(out_amt),'999,999,999,999'))||
                 op.fc_length(ltrim(to_char(sum(in_amt),'999,999,999,999')))||','||ltrim(to_char(sum(in_amt),'999,999,999,999'))
          into    vFd_temp                       
          from 
            OP.t_fn_pack_invent_jijum
          where
            org_cd=pOrgCd
            and jijum_cd=pJijumCd
            and close_date=OP.sf_getPreActDate(pDate);
            
            end if;
      */
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT),
                                    '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT), '999,999,999,999')) ||
             --op.fc_length(vCharTemp)||','||vCharTemp||
              VCHARTEMP ||
              op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT),
                                    '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT),
                            '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
      VAMT3     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForKI',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORKI;

  -- 삼성생명 소요명세서(20120815 수정)
  PROCEDURE SP_PACKOPAMTNEEDFORSL(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금삼송생명 소요명세서 PackOpAmtNeedForSL
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                             TO_DATE(PDATE, 'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                     TO_DATE(PDATE, 'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(CASE
                       WHEN PBRANCHCD IS NULL THEN
                        ' '
                       ELSE
                        PBRANCHCD
                     END) || ',' || CASE
               WHEN PBRANCHCD IS NULL THEN
                ' '
               ELSE
                PBRANCHCD
             END || op.fc_length(LTRIM(TO_CHAR(DEMAND.BASE, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.BASE, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREBASE, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREBASE, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.OUTAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.INAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.REAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.REAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT SUM(BASE_AMT) BASE,
                   SUM(PRE_BASE_AMT) PREBASE,
                   SUM(PRE_OUT_AMT) OUTAMT,
                   SUM(PRE_IN_AMT) INAMT,
                   SUM(RETURN_AMT) REAMT,
                   SUM(DEMAND_AMT) DEMANDAMT
            FROM OP.T_FN_SSLIFE_DEMAND
            WHERE DEMAND_DATE = PDATE) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT), '999,999,999,999')) ||
             VCHARTEMP
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(690000000, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(690000000, '999,999,999,999'))
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT --op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
      --ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))||
      --op.fc_length(vCharTemp)||','||vCharTemp||
      --vCharTemp||
      --                op.fc_length(vAmt5)||','||vAmt5||
       op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT),
                             '999,999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT), '999,999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999')) ||
       op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))) || ',' ||
       LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
            AND ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
      VAMT3     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForSL',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORSL;

  /*
  -- 삼성생명 소요명세서(20091204 수정)
  PROCEDURE sp_PackOpAmtNeedForSL(
          pDate  IN OP.t_fn_pack_demand.demand_date%TYPE   DEFAULT TO_CHAR(SYSDATE, 'YYYYMMDD'),
          pOrgCd  IN  OP.T_FN_SEND.org_cd%TYPE,
          pJijumCd IN  OP.T_FN_SEND.branch_cd%TYPE,
          pFaxCd   IN      VARCHAR2,      
          pPageNo  IN      NUMBER,
          pIndexKey  IN    OP.t_cm_fax_master.index_key%TYPE
      ) 
      IS
      -- master 값  
        vTargetNo            OP.t_cm_fax_master.target_no%TYPE;
        
      --data 값  
        vFd_hd               clob := EMPTY_CLOB;
        vFd_ft               clob := EMPTY_CLOB;
        vFd_L1               clob := EMPTY_CLOB;        
        vFd_L2               clob := EMPTY_CLOB;        
        vFd_L3               clob := EMPTY_CLOB;        
        vFd_L4               clob := EMPTY_CLOB;        
        vFd_L5               clob := EMPTY_CLOB;        
        vFd_L6               clob := EMPTY_CLOB;        
        vFd_L7               clob := EMPTY_CLOB;        
        vFd_L8               clob := EMPTY_CLOB;        
        vFd_L9               clob := EMPTY_CLOB;                                        
        vFd_L10               clob := EMPTY_CLOB;                                            
        
        vFd_temp             clob := EMPTY_CLOB;                               
        vFd_temp1             clob := EMPTY_CLOB;                               
          
        vFaxCd               OP.t_cm_fax_org_jijum.fax_cd%TYPE;
        vFaxNm               OP.t_cm_fax_org_jijum.fax_nm%TYPE;
        vOrgCd               OP.t_cm_fax_org_jijum.org_cd%TYPE;
        vjijumCd             OP.t_cm_fax_org_jijum.jijum_cd%TYPE;
        
        vCnt                 number :=0;    
        vCnt1                 number :=0;          
        vAmt1                 number :=0;    
        vAmt2                 number :=0;            
        vAmt3                 number :=0;
        vAmt4                 number :=0;        
        vAmt5                 number :=0;             
        vCharTemp             varchar2(30);       
        vCharTemp1             varchar2(30);       
        
        vT_Pt number :=0;  vT_T number :=0;  vT_Op number :=0;  vT_Ou number :=0;  vT_In number :=0; 
        vTJ_Pt number :=0;  vTJ_T number :=0; vTJ_Op number :=0; vTJ_Ou number :=0; vTJ_In number :=0;
        vTB_D number :=0;
        vTJB_D number :=0;
        vA_S number :=0; vA_C number :=0;
         vResult     OP.t_cm_batch_result.pgm_result%TYPE  := 'OK';  -- 처리결과    
  begin
     
     begin 
  
    --일괄관리운영자금삼송생명 소요명세서 PackOpAmtNeedForSL
    
   
         -- header  
      
       if pJijumCd is null then
           select op.fc_length(NVL(PACK_RCV_PART,''))||','|| NVL(PACK_RCV_PART,'') 
           into   vFd_temp     
           from OP.t_fn_org_info
           where  org_cd=pOrgCd;
      else
           select op.fc_length(org.org_nm||' '||jijum.jijum_nm)||','||org.org_nm||' '||jijum.jijum_nm
           into   vFd_temp     
           from   OP.t_cm_org org, t_cm_jijum jijum
           where org.org_cd = jijum.org_cd
           and org.org_cd = pOrgCd
           and jijum.jijum_cd = pJijumCd;
      end if;                  
  
      vFd_hd :=  vFd_temp;
  
      vFd_temp1 := '';
      SELECT
        op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
        op.fc_length(to_char(to_date(pDate,'yyyymmdd')-to_date(pDate,'yyyymmdd')+1,'99'))||','||
          to_char(to_date(pDate,'yyyymmdd')-to_date(pDate,'yyyymmdd')+1,'99')||
        op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
        op.fc_length(to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(pDate,'yyyymmdd'),'yyyy-mm-dd')||
        op.fc_length(case when pJijumCd is null then ' ' else pJijumCd end)||','||case when pJijumCd is null then ' ' else pJijumCd end||
        op.fc_length(ltrim(to_char(DEMAND.POSTTRAN,'999,999,999,999')))||','||ltrim(to_char(DEMAND.POSTTRAN,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.PREADD,'999,999,999,999')))||','||ltrim(to_char(DEMAND.PREADD,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.CLOSEAMT,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.DIFFERAMT,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.PRERESPECTAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.PRERESPECTAMT,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.CURRESPECTAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.CURRESPECTAMT,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999,999')))||','||ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999,999')),
        op.fc_length(to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd'))||','||to_char(to_date(OP.sf_getPreActDate(pDate),'yyyymmdd'),'yyyy-mm-dd')
        
      into vFd_temp, vCharTemp
      FROM
      (
           SELECT 
             DEMAND_DATE,ORG_CD,
             sum(POST_TRANS_AMT) POSTTRAN,
             sum(PRE_ADD_TRANS_AMT) PREADD,
             sum(DEMAND_AMT) DEMANDAMT, 
             sum(cur_respect_amt) CURRESPECTAMT,
             sum(pre_respect_amt) PRERESPECTAMT,
           sum(differ_amt) DIFFERAMT,
             sum(pre_collect_amt) CLOSEAMT
             
           FROM 
             OP.T_FN_PACK_BRANCH
           WHERE 
           DEMAND_DATE=pDate 
           AND ORG_CD=pOrgCd
           AND BRANCH_CD LIKE pJijumCd||'%'
           GROUP BY DEMAND_DATE,ORG_CD
      ) DEMAND ;
             
      vFd_hd :=  vFd_hd||vFd_temp;        
           
           vAmt1 :=0;
           vAmt2 :=0; 
           vAmt3 :=0; 
           
          begin 
        select sum(differ_amt) differamt
        into vAmt1   
        from OP.t_fn_pack_invent
        where org_cd=pOrgCd
        and close_date=OP.sf_getPreActDate(OP.sf_getPreActDate(pDate));
        
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
           vAmt1 := 0;
          end;         
          
          begin
      select  sum(differ_amt) differamt
      into vAmt2
      from 
        OP.t_fn_pack_invent_jijum
      where
        org_cd=pOrgCd
        and jijum_cd=pJijumCd
        and close_date=OP.sf_getPreActDate(OP.sf_getPreActDate(pDate));    
      
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
           vAmt2 := 0;
          end;         
     
         begin
      select sum(self_amt)  amt
      into vAmt3
          from 
            OP.t_Fn_atm_selfamt
          WHERE org_cd=pOrgCd
          and pDate BETWEEN start_Date
                    AND end_date;    
      
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
           vAmt3 := 0;
          end;         
     
      
          if pJijumCd is null then 
  
      select  op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
          ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))||
          --op.fc_length(vCharTemp)||','||vCharTemp||
                  vCharTemp||
                  --op.fc_length(ltrim(to_char(vAmt3,'999,999,999,999')))||','||ltrim(to_char(vAmt3,'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(pre_mac_amt + pre_safe_amt),'999,999,999,999')))||','||
          ltrim(to_char(sum(pre_mac_amt + pre_safe_amt),'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(oper_amt),'999,999,999,999')))||','||ltrim(to_char(sum(oper_amt),'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(differ_amt),'999,999,999,999')))||','||ltrim(to_char(sum(differ_amt),'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(out_amt),'999,999,999,999')))||','||ltrim(to_char(sum(out_amt),'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(in_amt),'999,999,999,999')))||','||ltrim(to_char(sum(in_amt),'999,999,999,999'))||
        op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
          ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))
      into    vFd_temp        
      from    OP.t_fn_pack_invent
      where   org_cd=pOrgCd
      and     close_date=OP.sf_getPreActDate(pDate);
  
      
        else
      select op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
               ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))||
             --op.fc_length(vCharTemp)||','||vCharTemp||
                  vCharTemp||
                 --op.fc_length(ltrim(to_char(vAmt3,'999,999,999,999')))||','||ltrim(to_char(vAmt3,'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(pre_mac_amt + pre_safe_amt),'999,999,999,999')))||','||
               ltrim(to_char(sum(pre_mac_amt + pre_safe_amt),'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(oper_amt),'999,999,999,999')))||','||ltrim(to_char(sum(oper_amt),'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(differ_amt),'999,999,999,999')))||','||ltrim(to_char(sum(differ_amt),'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(out_amt),'999,999,999,999')))||','||ltrim(to_char(sum(out_amt),'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(in_amt),'999,999,999,999')))||','||ltrim(to_char(sum(in_amt),'999,999,999,999'))||
             op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999')))||','||
          ltrim(to_char(sum(mac_amt + safe_amt),'999,999,999,999'))
      into    vFd_temp                       
      from 
        OP.t_fn_pack_invent_jijum
      where
        org_cd=pOrgCd
        and jijum_cd=pJijumCd
        and close_date=OP.sf_getPreActDate(pDate);
        
        end if;
      
         vFd_hd :=  vFd_hd||vFd_temp;                
            
         
           select  vCharTemp||
                   op.fc_length(ltrim(to_char(sum(a.closeamt),'999,999,999,999')))||','||ltrim(to_char(sum(a.closeamt),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.difamt),'999,999,999,999')))||','||ltrim(to_char(sum(a.difamt),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.plus),'999,999,999,999')))||','||ltrim(to_char(sum(a.plus),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(c.selfamt),'999,999,999,999')))||','||ltrim(to_char(sum(c.selfamt),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(b.respect),'999,999,999,999')))||','||ltrim(to_char(sum(b.respect),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.safeamt),'999,999,999,999')))||','||ltrim(to_char(sum(a.safeamt),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.ord),'999,999,999,999')))||','||ltrim(to_char(sum(a.ord),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.macamt-a.ord ),'999,999,999,999')))||','||ltrim(to_char(sum(a.macamt-a.ord ),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.macamt),'999,999,999,999')))||','||ltrim(to_char(sum(a.macamt),'999,999,999,999'))||
                   op.fc_length(ltrim(to_char(sum(a.safeamt+a.macamt),'999,999,999,999')))||','||ltrim(to_char(sum(a.safeamt+a.macamt),'999,999,999,999'))
          into    vFd_temp         
          from
              (select sum(OPER_AMT) oper,sum(ORD_SEND_AMT) ord,sum(PLUS_SEND_AMT) plus
              ,sum(OUT_AMT) outamt,sum(IN_AMT) inamt, sum(CLOse_AMT) closeamt 
              ,sum(differ_amt) difamt, sum(MAC_AMT) macamt ,sum(SAFE_AMT) safeamt
              From OP.t_Fn_pack_invent
              where close_date=OP.sf_getPreActDate(pDate)
              and org_cd=pOrgCd) A,
              (select sum(cur_respect_Amt) respect
              From OP.t_Fn_pack_demand
              where demand_date=OP.sf_getPreActDate(pDate)
              and org_cd=pOrgCd) B,
              (select sum(self_amt)  selfamt
              from 
              OP.t_Fn_atm_selfamt
              WHERE org_cd=pOrgCd
              and OP.sf_getPreActDate(pDate) BETWEEN start_Date AND end_date) C;
         vFd_hd :=  vFd_hd||vFd_temp;                
                
           
       select  op.fc_length(PACK_RCV_PART||' '||PACK_RCV_PERSON)||','||PACK_RCV_PART||' '||PACK_RCV_PERSON
       into   vFd_temp     
       from OP.t_fn_org_info
       where  org_cd=pOrgCd;
         vFd_hd :=  vFd_hd||vFd_temp;                  
       
       
       insert into OP.t_cm_fax_data 
       (index_key, page_index, fax_file_cd, fd_hd) 
       values(pIndexKey, pPageNo, pFaxCd , vFd_hd);       
           
        
       vFd_hd := ''; 
       vFd_temp := ''; 
       vCharTemp := ''; 
       vAmt1 :=0;
       vAmt2 :=0;          
       vAmt3 :=0;          
    
      EXCEPTION
    WHEN OTHERS THEN
    -- ROLLBACK;
    vResult := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForSL', 
               vResult, 
               pDate);
  
    END sp_PackOpAmtNeedForSL;
  */

  -- 공항키오스크 현송계획표
  PROCEDURE SP_PACKCASHTRANPLANTABLEFORGH(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리현송계획표공항키오 PackCashTranPlanTableForGH
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 6)) || ',' ||
                        substr2(MAC.MAC_NM, 1, 6) ||
                       --op.fc_length(REPORT.BRANCH_CD||'-'||REPORT.MAC_NO)||','||REPORT.BRANCH_CD||'-'||REPORT.MAC_NO||
                        op.fc_length(REPORT.MAC_NO) || ',' || REPORT.MAC_NO ||
                        op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW14_AMT, 0),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NVL(SEND.SEND_CW14_AMT, 0),
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW53_AMT, 0),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NVL(SEND.SEND_CW53_AMT, 0),
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW13_AMT, 0),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NVL(SEND.SEND_CW13_AMT, 0),
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW52_AMT, 0),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NVL(SEND.SEND_CW52_AMT, 0),
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW12_AMT, 0),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(NVL(SEND.SEND_CW12_AMT, 0),
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT,
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT,
                                      '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT,
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT, '999,999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                              REPORT.WKD_SENDPLAN_AMT +
                                              REPORT.PLUS_SEND_AMT),
                                              '999,999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                      REPORT.WKD_SENDPLAN_AMT +
                                      REPORT.PLUS_SEND_AMT),
                                      '999,999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT *
                      FROM OP.T_FN_SEND
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND SEND_DATE =
                            OP.SF_GETPOSTACTDATE(PDATE)
                           --AND SEND_DATE=pDate
                            AND SEND_TYPE = '1') SEND
                
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND REPORT.ORG_CD = SEND.ORG_CD(+)
                      AND REPORT.BRANCH_CD = SEND.BRANCH_CD(+)
                      AND REPORT.MAC_NO = SEND.MAC_NO(+)
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW14_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW14_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW53_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW53_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW13_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW13_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW52_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW52_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW12_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW12_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT +
                                           REPORT.WKD_SENDPLAN_AMT +
                                           REPORT.PLUS_SEND_AMT),
                                       0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT +
                                   REPORT.WKD_SENDPLAN_AMT +
                                   REPORT.PLUS_SEND_AMT),
                               0),
                           '999,999,999,999'))
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT *
            FROM OP.T_FN_SEND
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND SEND_DATE = OP.SF_GETPOSTACTDATE(PDATE)
                 --AND SEND_DATE=pDate
                  AND SEND_TYPE = '1') SEND
      
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND REPORT.ORG_CD = SEND.ORG_CD(+)
            AND REPORT.BRANCH_CD = SEND.BRANCH_CD(+)
            AND REPORT.MAC_NO = SEND.MAC_NO(+);
      --      ORDER BY REPORT.ORG_CD,
      --               REPORT.BRANCH_CD,
      --               REPORT.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTableForGH',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLEFORGH;

  -- 삼성생명 현송계획표
  PROCEDURE SP_PACKCASHTRANPLANTABLEFORSL(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리현송계획표삼성생명 PackCashTranPlanTableSL
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(PDATE, 5, 2) || '월' || substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 5, 2) || '월' || substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 5, 5)) || ',' ||
                       substr2(MAC.MAC_NM, 5, 5) ||
                       op.fc_length(REPORT.BRANCH_CD || '-' || REPORT.MAC_NO) || ',' ||
                       REPORT.BRANCH_CD || '-' || REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CHECK_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CHECK_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW14_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CW14_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW13_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CW13_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW52_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CW52_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW12_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CW12_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(NVL(SEND.SEND_CW11_AMT, 0),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(NVL(SEND.SEND_CW11_AMT, 0),
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT,
                                     '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT),
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT),
                                     '999,999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT *
                      FROM OP.T_FN_SEND
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                           --AND SEND_DATE=(OP.sf_getPreActDate(pDate)
                            AND SEND_DATE = PDATE
                            AND SEND_TYPE = '1') SEND
                
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND REPORT.ORG_CD = SEND.ORG_CD(+)
                      AND REPORT.BRANCH_CD = SEND.BRANCH_CD(+)
                      AND REPORT.MAC_NO = SEND.MAC_NO(+)
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CHECK_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CHECK_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW14_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW14_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW13_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW13_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW52_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW52_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW12_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW12_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW11_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(SEND.SEND_CW11_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT +
                                           REPORT.WKD_SENDPLAN_AMT +
                                           REPORT.PLUS_SEND_AMT),
                                       0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT +
                                   REPORT.WKD_SENDPLAN_AMT +
                                   REPORT.PLUS_SEND_AMT),
                               0),
                           '999,999,999,999'))
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT *
            FROM OP.T_FN_SEND
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                 --AND SEND_DATE=(OP.sf_getPreActDate(pDate)
                  AND SEND_DATE = PDATE
                  AND SEND_TYPE = '1') SEND
      
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND REPORT.ORG_CD = SEND.ORG_CD(+)
            AND REPORT.BRANCH_CD = SEND.BRANCH_CD(+)
            AND REPORT.MAC_NO = SEND.MAC_NO(+);
      --      ORDER BY REPORT.ORG_CD,
      --               REPORT.BRANCH_CD,
      --               REPORT.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTableForSL',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLEFORSL;

  --일괄관리마감표표삼성생명 PackOpAmtclosingTableForSL
  PROCEDURE SP_PACKOPAMTCLOSINGTABLEFORSL(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금삼성생명 마감표 PackOpAmtclosingTableForSL
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(PDATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 5)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 5) ||
                       op.fc_length(REPORT.BRANCH_CD || '-' || REPORT.MAC_NO) || ',' ||
                       REPORT.BRANCH_CD || '-' || REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.OUT_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.IN_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_CNT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT +
                                             REPORT.DIFFER_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT + REPORT.DIFFER_AMT,
                                     '999,999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND BRANCH_CD LIKE PBRANCHCD || '%'
                            AND DEMAND_DATE = PDATE
                            AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <>
                            '0000') REPORT,
                     OP.T_CM_MAC MAC
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0),
                                   '999,999,,999999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT +
                                           REPORT.DIFFER_AMT),
                                       0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT + REPORT.DIFFER_AMT), 0),
                           '999,999,999,999')) LIST_DATA
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableForSL',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEFORSL;

  -- 요넷 소요명세서  (공항키오)
  PROCEDURE SP_PACKOPAMTNEEDFORYN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금요넷 소요명세서 PackOpAmtNeedForYN
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                             TO_DATE(PDATE, 'yyyymmdd') + 1,
                             '99')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') -
                     TO_DATE(PDATE, 'yyyymmdd') + 1,
                     '99') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(CASE
                       WHEN PBRANCHCD IS NULL THEN
                        ' '
                       ELSE
                        PBRANCHCD
                     END) || ',' || CASE
               WHEN PBRANCHCD IS NULL THEN
                ' '
               ELSE
                PBRANCHCD
             END ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PREADD, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CLOSEAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DIFFERAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.PRERESPECTAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.PRERESPECTAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.CURRESPECTAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.CURRESPECTAMT, '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT DEMAND_DATE,
                   ORG_CD,
                   SUM(POST_TRANS_AMT) POSTTRAN,
                   SUM(PRE_ADD_TRANS_AMT) PREADD,
                   SUM(DEMAND_AMT) DEMANDAMT,
                   SUM(CUR_RESPECT_AMT) CURRESPECTAMT,
                   SUM(PRE_RESPECT_AMT) PRERESPECTAMT,
                   SUM(DIFFER_AMT) DIFFERAMT,
                   SUM(PRE_COLLECT_AMT) CLOSEAMT
            
            FROM OP.T_FN_PACK_DEMAND
            WHERE DEMAND_DATE = PDATE
                  AND ORG_CD = PORGCD
            --         AND BRANCH_CD LIKE pJijumCd||'%'
            GROUP BY DEMAND_DATE,
                     ORG_CD) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
      VAMT3 := 0;
    
      BEGIN
        --select sum(differ_amt) differamt
        --into vAmt1   
        SELECT SUM(SAFE_AMT + MAC_AMT) TOTAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) DIFFERAMT
        INTO VAMT2
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
      /*
        select  op.fc_length(ltrim(to_char(sum(mac_amt + safe_amt - differ_amt),'999,999,999,999')))||','||
            ltrim(to_char(sum(mac_amt + safe_amt - differ_amt),'999,999,999,999'))||
            --op.fc_length(vCharTemp)||','||vCharTemp||
                    vCharTemp||
            op.fc_length(ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) - vAmt1,'999,999,999,999')))||','||
            ltrim(to_char(sum(pre_mac_amt + pre_safe_amt) - vAmt1,'999,999,999,999'))||
      */
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT),
                                    '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT), '999,999,999,999')) ||
             --op.fc_length(vCharTemp)||','||vCharTemp||
              VCHARTEMP ||
              op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT),
                                    '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT),
                            '999,999,999,999')) ||
             
              op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))
      INTO VFD_TEMP
      FROM OP.T_FN_PACK_INVENT
      WHERE ORG_CD = PORGCD
            AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
      VAMT3     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForYN',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORYN;

  -- 요넷 현송계획표
  PROCEDURE SP_PACKCASHTRANPLANTABLEFORYN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --요넷현송계획표 PackCashTranPlanTableForYN
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(PDATE, 5, 2) || '월' || substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 5, 2) || '월' || substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) ||
                       op.fc_length(REPORT.BRANCH_CD) || ',' || REPORT.BRANCH_CD ||
                       op.fc_length(REPORT.MAC_NO) || ',' || REPORT.MAC_NO ||
                       op.fc_length(MACHINE.CD_NM1) || ',' || MACHINE.CD_NM1 ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT),
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT),
                                     '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                      --        AND POST_SENDPLAN_AMT||PLUS_SEND_AMT||WKD_SENDPLAN_AMT <> 000
                      ) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                           REPORT.WKD_SENDPLAN_AMT +
                                           REPORT.PLUS_SEND_AMT)),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                   REPORT.WKD_SENDPLAN_AMT +
                                   REPORT.PLUS_SEND_AMT)),
                               0),
                           '999,999,999'))
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
            --        AND POST_SENDPLAN_AMT||PLUS_SEND_AMT||WKD_SENDPLAN_AMT <> 000
            ) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTableForYN',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLEFORYN;

  --일괄관리마감표요넷 PackOpAmtclosingTableForYN
  PROCEDURE SP_PACKOPAMTCLOSINGTABLEFORYN(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금요넷 마감표 PackOpAmtclosingTableForYN
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(PDATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
            --              AND OUT_AMT||IN_AMT||CLOSE_AMT||DIFFER_AMT <> '0000'
            ) REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 7)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 7) ||
                       op.fc_length(REPORT.BRANCH_CD || '-' || REPORT.MAC_NO) || ',' ||
                       REPORT.BRANCH_CD || '-' || REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.OUT_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.IN_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_CNT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_CNT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.DIFFER_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.DIFFER_AMT, '999,999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT +
                                             REPORT.DIFFER_AMT,
                                             '999,999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT + REPORT.DIFFER_AMT,
                                     '999,999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND BRANCH_CD LIKE PBRANCHCD || '%'
                            AND DEMAND_DATE = PDATE
                      --            AND OUT_AMT||IN_AMT||CLOSE_AMT||DIFFER_AMT <> '0000'
                      ) REPORT,
                     OP.T_CM_MAC MAC
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.OUT_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.IN_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT), 0), '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0),
                                   '999,999,,999999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_CNT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT), 0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.DIFFER_AMT), 0),
                           '999,999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT +
                                           REPORT.DIFFER_AMT),
                                       0),
                                   '999,999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT + REPORT.DIFFER_AMT), 0),
                           '999,999,999,999')) LIST_DATA
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
            --            AND OUT_AMT||IN_AMT||CLOSE_AMT||DIFFER_AMT <> '0000'
            ) REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableForYN',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEFORYN;

  -- 부산은행 소요명세서
  PROCEDURE SP_PACKOPAMTNEEDFORBS(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                  PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                  PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                  PFAXCD    IN VARCHAR2,
                                  PPAGENO   IN NUMBER,
                                  PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금부산은행 소요명세서 PackOpAmtNeedForBS
    
      -- header  
    
      IF PBRANCHCD IS NULL THEN
        SELECT op.fc_length(NVL(PACK_RCV_PART, '')) || ',' ||
               NVL(PACK_RCV_PART, '')
        INTO VFD_TEMP
        FROM OP.T_FN_ORG_INFO
        WHERE ORG_CD = PORGCD;
      ELSE
        SELECT op.fc_length(ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM) || ',' ||
               ORG.ORG_NM || ' ' || BRANCH.BRANCH_NM
        INTO VFD_TEMP
        FROM OP.T_CM_ORG    ORG,
             OP.T_CM_BRANCH BRANCH
        WHERE ORG.ORG_CD = BRANCH.ORG_CD
              AND ORG.ORG_CD = PORGCD
              AND BRANCH.BRANCH_CD = PBRANCHCD;
      END IF;
    
      VFD_HD := VFD_TEMP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(PDATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
              op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                      'yyyymmdd') -
                              TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                      'yyyymmdd') + 1,
                              '99')) || ',' ||
              TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                              'yyyymmdd') -
                      TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                              'yyyymmdd') + 1,
                      '99') ||
             
              op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                                      'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(OP.SF_GETPOSTACTDATE(PDATE),
                              'yyyymmdd'),
                      'yyyy-mm-dd') ||
              op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                                      'yyyymmdd'),
                              'yyyy-mm-dd')) || ',' ||
              TO_CHAR(TO_DATE(OP.SF_GETBEFOREPOSTACTDATE(OP.SF_GETPOSTACTDATE(PDATE)),
                              'yyyymmdd'),
                      'yyyy-mm-dd') ||
             --        op.fc_length(nvl(pJijumCd,' '))||','||nvl(pJijumCd,' ')||
             --        op.fc_length(ltrim(to_char(DEMAND.POSTTRAN,'999,999,999')))||','||ltrim(to_char(DEMAND.POSTTRAN,'999,999,999'))||
             --        op.fc_length(ltrim(to_char(DEMAND.PREAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.PREAMT,'999,999,999'))||
             --        op.fc_length(ltrim(to_char(DEMAND.OPERAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.OPERAMT,'999,999,999'))||
             --        op.fc_length(ltrim(to_char(DEMAND.SENDAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.SENDAMT,'999,999,999'))||
             --        op.fc_length(ltrim(to_char(DEMAND.CLOAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.CLOAMT,'999,999,999'))||   
             --        op.fc_length(ltrim(to_char(DEMAND.SAFEAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.SAFEAMT,'999,999,999'))||                     
             --        op.fc_length(ltrim(to_char(DEMAND.ORDSEND,'999,999,999')))||','||ltrim(to_char(DEMAND.ORDSEND,'999,999,999'))||    
             --        op.fc_length(ltrim(to_char(DEMAND.BALAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.BALAMT,'999,999,999'))||                
             --        op.fc_length(ltrim(to_char(DEMAND.CURAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.CURAMT,'999,999,999'))||                
             --        op.fc_length(ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999')))||','||ltrim(to_char(DEMAND.DEMANDAMT,'999,999,999'))||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.POSTTRAN, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.SAFEAMT, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.SAFEAMT, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.ORDSEND, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.ORDSEND, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.BALAMT, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.BALAMT, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.CLOSEND, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.CLOSEND, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.CURAMT, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.CURAMT, '999,999,999')) ||
              op.fc_length(LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999'))) || ',' ||
              LTRIM(TO_CHAR(DEMAND.DEMANDAMT, '999,999,999')),
             op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd')
      
      INTO VFD_TEMP,
           VCHARTEMP
      FROM (SELECT A.POSTTRAN,
                   C.PREAMT,
                   C.OPERAMT,
                   C.SENDAMT,
                   C.CLOAMT,
                   C.SAFEAMT,
                   B.ORDSEND,
                   C.SAFEAMT - B.ORDSEND BALAMT,
                   CASE
                     WHEN A.CURAMT < 0 THEN
                      0
                     WHEN A.CURAMT >= 0 THEN
                      INT(ROUND(A.CURAMT * 0.3, -4))
                   END AS CLOSEND,
                   (A.CURAMT - CASE
                     WHEN A.CURAMT < 0 THEN
                      0
                     WHEN A.CURAMT >= 0 THEN
                      INT(ROUND(A.CURAMT * 0.3, -4))
                   END) CURAMT,
                   A.DEMANDAMT
            FROM (SELECT SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                         SUM(DEMAND_AMT) / 1000 DEMANDAMT,
                         SUM(CUR_RESPECT_AMT) / 1000 CURAMT
                  FROM OP.T_FN_PACK_DEMAND
                  WHERE DEMAND_DATE = PDATE
                        AND ORG_CD = PORGCD) A,
                 
                 (SELECT SUM(POST_TRANS_AMT) / 1000 ORDSEND
                  FROM OP.T_FN_PACK_DEMAND
                  WHERE DEMAND_DATE =
                        OP.SF_GETPREACTDATE(PDATE)
                        AND ORG_CD = PORGCD) B,
                 
                 (SELECT SUM(PRE_SAFE_AMT) / 1000 PREAMT,
                         SUM(OPER_AMT) / 1000 OPERAMT,
                         SUM(ORD_SEND_AMT + PLUS_SEND_AMT) / 1000 SENDAMT,
                         SUM(CLOSE_AMT) / 1000 CLOAMT,
                         SUM(SAFE_AMT) / 1000 SAFEAMT
                  FROM OP.T_FN_PACK_INVENT
                  WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                        AND ORG_CD = PORGCD) C) DEMAND;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) DIFFERAMT
        INTO VAMT1
        FROM OP.T_FN_PACK_INVENT
        WHERE ORG_CD = PORGCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT1 := 0;
      END;
    
      BEGIN
        SELECT SUM(DIFFER_AMT) DIFFERAMT
        INTO VAMT2
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND
              CLOSE_DATE =
              OP.SF_GETPREACTDATE(OP.SF_GETPREACTDATE(PDATE));
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VAMT2 := 0;
      END;
    
      IF PBRANCHCD IS NULL THEN
      
        SELECT VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(PRESAFE, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(PRESAFE, '999,999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
                op.fc_length(LTRIM(TO_CHAR(OPER, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(OPER, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(RSEND, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(RSEND, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(PSEND, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(PSEND, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(HSEND, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(HSEND, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(0, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(0, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(CLO, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(CLO, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(DIF, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(DIF, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SAFE, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SAFE, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(PRETOTALAMT, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(PRETOTALAMT, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(OPER, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(OPER, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(OUTAMT, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(INAMT, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(TOTALAMT, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(TOTALAMT, '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(0, '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(0, '999,999,999,999'))
        INTO VFD_TEMP
        FROM (SELECT A.PRESAFE,
                     A.OPER,
                     A.RSEND,
                     A.PSEND - B.AMT PSEND,
                     B.AMT HSEND,
                     A.CLO,
                     A.DIF,
                     A.SAFE,
                     A.PRETOTALAMT,
                     A.OUTAMT,
                     A.INAMT,
                     A.TOTALAMT
              FROM (SELECT SUM(PRE_SAFE_AMT) / 1000 PRESAFE,
                           SUM(OPER_AMT) / 1000 OPER,
                           SUM(ORD_SEND_AMT) / 1000 RSEND,
                           SUM(PLUS_SEND_AMT) / 1000 PSEND,
                           SUM(CLOSE_AMT) / 1000 CLO,
                           SUM(DIFFER_AMT) / 1000 DIF,
                           SUM(SAFE_AMT) / 1000 SAFE,
                           SUM(PRE_MAC_AMT + PRE_SAFE_AMT) / 1000 PRETOTALAMT,
                           SUM(OUT_AMT) / 1000 OUTAMT,
                           SUM(IN_AMT) / 1000 INAMT,
                           SUM(MAC_AMT + SAFE_AMT) / 1000 TOTALAMT
                    FROM OP.T_FN_PACK_INVENT
                    WHERE ORG_CD = PORGCD
                          AND CLOSE_DATE =
                          OP.SF_GETPREACTDATE(PDATE)) A,
                   
                   (SELECT NVL(SUM(SEND_AMT), 0) / 1000 AMT
                    FROM OP.T_FN_SEND     S,
                         OP.T_FN_CALENDAR C
                    WHERE S.SEND_DATE >=
                          OP.SF_GETPREACTDATE(PDATE)
                          AND S.SEND_DATE <=
                          OP.SF_GETBEFOREDATE(PDATE)
                          AND S.ORG_CD = PORGCD
                          AND S.SEND_TYPE = '2'
                          AND S.SEND_STATUS = '2'
                          AND (C.HOLIDAY_YN = '1' OR C.REAL_HOLIDAY_YN = '1')
                          AND S.SEND_DATE = C.STD_DATE) B);
      
      ELSE
        SELECT VCHARTEMP ||
                op.fc_length(LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT),
                                      '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(MAC_AMT + SAFE_AMT), '999,999,999,999')) ||
               --op.fc_length(vCharTemp)||','||vCharTemp||
               
                op.fc_length(LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) -
                                      VAMT2,
                                      '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(PRE_MAC_AMT + PRE_SAFE_AMT) - VAMT2,
                              '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OPER_AMT), '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(DIFFER_AMT), '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(OUT_AMT), '999,999,999,999')) ||
                op.fc_length(LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))) || ',' ||
                LTRIM(TO_CHAR(SUM(IN_AMT), '999,999,999,999'))
        INTO VFD_TEMP
        FROM OP.T_FN_PACK_INVENT_BRANCH
        WHERE ORG_CD = PORGCD
              AND BRANCH_CD = PBRANCHCD
              AND CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE);
      
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(PACK_RCV_PART || ' ' || PACK_RCV_PERSON) || ',' ||
             PACK_RCV_PART || ' ' || PACK_RCV_PERSON
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtNeedForBS',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTNEEDFORBS;

  -- 부산은행 시재내역서
  PROCEDURE SP_APPOPINOUTOFFICECENTERFORBS(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리부산은행 시재내역서 AppOpInOutOfficeCenterForBS
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(LTRIM(TO_CHAR(PREAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PREAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PREMAC, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PREMAC, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OPERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OPERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC5, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE5, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DIFAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DIFAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC7, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC7, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE7, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE7, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC8, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC8, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRETOT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRETOT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OPERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OPERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DIFAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DIFAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRESAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRESAFEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT B.PREAMT,
                   B.PREAMT SAFE1,
                   B.PREMAC,
                   B.PREMAC MAC1,
                   (B.OSEND - A.CLOSEND) OSEND,
                   B.PREAMT - (B.OSEND - A.CLOSEND) SAFE2,
                   B.OUTAMT,
                   B.PREMAC - B.OUTAMT MAC2,
                   B.OPERAMT,
                   B.PREAMT - (B.OSEND - A.CLOSEND) + B.OPERAMT SAFE3,
                   B.INAMT,
                   B.PREMAC - B.OUTAMT + B.INAMT MAC3,
                   B.CLOAMT,
                   B.PREMAC - B.OUTAMT + B.INAMT - B.CLOAMT MAC4,
                   (B.CLOAMT - A.CLOSEND) CLOAMT2,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT SAFE4,
                   A.CLOSEND,
                   B.PREMAC - B.OUTAMT + B.INAMT - B.CLOAMT + A.CLOSEND MAC5,
                   B.PSEND,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT - B.PSEND SAFE5,
                   B.PREMAC - B.OUTAMT + B.INAMT - B.CLOAMT + B.OSEND MAC6,
                   B.DIFAMT,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT - B.PSEND +
                   B.DIFAMT SAFE6,
                   B.PREMAC - B.OUTAMT + B.INAMT - B.CLOAMT + B.OSEND +
                   B.PSEND MAC7,
                   B.SAFEAMT,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT - B.PSEND +
                   B.DIFAMT SAFE7,
                   B.MACAMT,
                   B.PREMAC - B.OUTAMT + B.INAMT - B.CLOAMT + B.OSEND +
                   B.PSEND MAC8,
                   B.SAFEAMT + B.MACAMT TOTAMT,
                   B.PREAMT + B.PREMAC PRETOT,
                   A.POSTTRAN POSTTRAN,
                   B.SAFEAMT - A.POSTTRAN PRESAFEAMT
            FROM (SELECT SUM(POST_TRANS_AMT) / 1000 POSTTRAN,
                         CASE
                           WHEN SUM(CUR_RESPECT_AMT) / 1000 < 0 THEN
                            0
                           WHEN SUM(CUR_RESPECT_AMT) / 1000 >= 0 THEN
                            INT(ROUND(SUM(CUR_RESPECT_AMT) / 1000 * 0.3, -4))
                         END AS CLOSEND
                  FROM OP.T_FN_PACK_DEMAND
                  WHERE DEMAND_DATE =
                        OP.SF_GETPREACTDATE(PDATE)
                        AND ORG_CD = PORGCD) A,
                 (SELECT SUM(PRE_SAFE_AMT) / 1000 PREAMT,
                         SUM(ORD_SEND_AMT) / 1000 OSEND,
                         SUM(OPER_AMT) / 1000 OPERAMT,
                         SUM(CLOSE_AMT) / 1000 CLOAMT,
                         SUM(PLUS_SEND_AMT) / 1000 PSEND,
                         SUM(DIFFER_AMT) / 1000 DIFAMT,
                         SUM(SAFE_AMT) / 1000 SAFEAMT,
                         SUM(PRE_MAC_AMT) / 1000 PREMAC,
                         SUM(OUT_AMT) / 1000 OUTAMT,
                         SUM(IN_AMT) / 1000 INAMT,
                         SUM(MAC_AMT) / 1000 MACAMT
                  FROM OP.T_FN_PACK_INVENT
                  WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                        AND ORG_CD = PORGCD) B);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_AppOpInOutOfficeCenterForBS',
                                          VRESULT,
                                          PDATE);
  
  END SP_APPOPINOUTOFFICECENTERFORBS;

  -- 씨티은행 시재내역서
  PROCEDURE SP_APPOPINOUTOFFICECENTERFORCT(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                           PFAXCD    IN VARCHAR2,
                                           PPAGENO   IN NUMBER,
                                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리씨티은행 시재내역서 AppOpInOutOfficeCenterForCT
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETPREACTDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') ||
             op.fc_length(LTRIM(TO_CHAR(PREAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PREAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PREMAC, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PREMAC, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC1, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC1, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(JUNADDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(JUNADDAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC2, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC2, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OPERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OPERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC3, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC3, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC4, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC4, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT, '999,999,999')) ||
             
             op.fc_length(LTRIM(TO_CHAR(SAFE5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE5, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC5, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC5, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OSEND, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OSEND, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC6, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC6, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DIFAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DIFAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE7, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE7, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(HOOADDAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(HOOADDAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC7, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC7, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFE8, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFE8, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MACAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MACAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(MAC8, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(MAC8, '999,999,999')) ||
             
             op.fc_length(LTRIM(TO_CHAR(TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRETOT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRETOT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OPERAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OPERAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(OUTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(OUTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(INAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(INAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(CLOAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(CLOAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(DIFAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(DIFAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(TOTAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(TOTAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(POSTTRAN, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(POSTTRAN, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(PRESAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(PRESAFEAMT, '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SAFEAMT, '999,999,999'))
      
      INTO VFD_TEMP
      FROM (SELECT B.PREAMT,
                   B.PREAMT SAFE1,
                   B.PREMAC,
                   B.PREMAC MAC1,
                   B.OSEND OSEND,
                   B.PREAMT - B.OSEND SAFE2,
                   A.JUNADDAMT,
                   B.PREMAC + A.JUNADDAMT MAC2,
                   B.OPERAMT,
                   B.PREAMT - B.OSEND + B.OPERAMT SAFE3,
                   B.OUTAMT,
                   B.PREMAC + A.JUNADDAMT - B.OUTAMT MAC3,
                   B.INAMT,
                   B.PREMAC + A.JUNADDAMT - B.OUTAMT + B.INAMT MAC4,
                   B.CLOAMT CLOAMT,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT SAFE5,
                   B.CLOAMT CLOAMT2,
                   B.PREMAC + A.JUNADDAMT - B.OUTAMT + B.INAMT - B.CLOAMT MAC5,
                   B.PSEND,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT - B.PSEND SAFE6,
                   B.OSEND OSEND2,
                   B.PREMAC + A.JUNADDAMT - B.OUTAMT + B.INAMT - B.CLOAMT +
                   B.OSEND MAC6,
                   B.DIFAMT,
                   B.PREAMT - B.OSEND + B.OPERAMT + B.CLOAMT - B.PSEND +
                   B.DIFAMT SAFE7,
                   (B.PSEND - A.JUNADDAMT) HOOADDAMT,
                   B.PREMAC + A.JUNADDAMT - B.OUTAMT + B.INAMT - B.CLOAMT +
                   B.OSEND + (B.PSEND - A.JUNADDAMT) MAC7,
                   B.SAFEAMT,
                   B.SAFEAMT SAFE8,
                   B.MACAMT,
                   B.MACAMT MAC8,
                   B.SAFEAMT + B.MACAMT TOTAMT,
                   B.PREAMT + B.PREMAC PRETOT,
                   C.POSTTRAN POSTTRAN,
                   B.SAFEAMT - C.POSTTRAN PRESAFEAMT
            FROM (SELECT NVL(SUM(A.SEND_AMT), 0) / 1000 JUNADDAMT
                  FROM (SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               SEND_TIME,
                               SEND_AMT
                        FROM OP.T_FN_SEND
                        WHERE SEND_DATE =
                              OP.SF_GETPREACTDATE(PDATE)
                              AND ORG_CD = PORGCD
                              AND SEND_TYPE = '2'
                              AND SEND_STATUS = '2') A,
                       (SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               CLOSE_TIME
                        FROM OP.T_FN_CLOSE
                        WHERE CLOSE_DATE =
                              OP.SF_GETPREACTDATE(PDATE)
                              AND ORG_CD = PORGCD) B
                  WHERE A.ORG_CD = B.ORG_CD
                        AND A.BRANCH_CD = B.BRANCH_CD
                        AND A.MAC_NO = B.MAC_NO
                        AND A.SEND_TIME < B.CLOSE_TIME) A,
                 (SELECT SUM(PRE_SAFE_AMT) / 1000 PREAMT,
                         SUM(ORD_SEND_AMT) / 1000 OSEND,
                         SUM(OPER_AMT) / 1000 OPERAMT,
                         SUM(CLOSE_AMT) / 1000 CLOAMT,
                         SUM(PLUS_SEND_AMT) / 1000 PSEND,
                         SUM(DIFFER_AMT) / 1000 DIFAMT,
                         SUM(SAFE_AMT) / 1000 SAFEAMT,
                         SUM(PRE_MAC_AMT) / 1000 PREMAC,
                         --     (sum(CLOSE_AMT)-SUM(IN_AMT)+SUM(OUT_AMT)-SUM(PRE_MAC_AMT))/1000 OSEND,
                         SUM(OUT_AMT) / 1000 OUTAMT,
                         SUM(IN_AMT) / 1000 INAMT,
                         SUM(MAC_AMT) / 1000 MACAMT
                  FROM OP.T_FN_PACK_INVENT
                  WHERE CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                        AND ORG_CD = PORGCD) B,
                 (SELECT SUM(POST_TRANS_AMT) / 1000 POSTTRAN
                  FROM OP.T_FN_PACK_DEMAND
                  WHERE DEMAND_DATE = PDATE
                        AND ORG_CD = PORGCD) C);
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VAMT1 := 0;
      VAMT2 := 0;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_HD    := '';
      VFD_TEMP  := '';
      VCHARTEMP := '';
      VAMT1     := 0;
      VAMT2     := 0;
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_AppOpInOutOfficeCenterForCT',
                                          VRESULT,
                                          PDATE);
  
  END SP_APPOPINOUTOFFICECENTERFORCT;

  -- 부산은행 현송계획표
  PROCEDURE SP_PACKCASHTRANPLANTABLEFORBS(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                          PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                          PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                          PFAXCD    IN VARCHAR2,
                                          PPAGENO   IN NUMBER,
                                          PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VCNT1      NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      --일괄관리현송계획표 PackCashTranPlanTableForBS
    
      -- header  
    
      SELECT op.fc_length(substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
                     substr2(PDATE, 7, 2) || '일') || ',' ||
             substr2(PDATE, 1, 4) || '년' || substr2(PDATE, 5, 2) || '월' ||
             substr2(PDATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(CASE
                       WHEN B.BRANCH_NM IS NULL THEN
                        A.ORG_NM
                       ELSE
                        B.BRANCH_NM
                     END) || ',' || CASE
               WHEN B.BRANCH_NM IS NULL THEN
                A.ORG_NM
               ELSE
                B.BRANCH_NM
             END
      INTO VFD_TEMP
      FROM OP.T_CM_ORG A,
           (SELECT *
            FROM OP.T_CM_BRANCH
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD = PBRANCHCD) B
      WHERE A.ORG_CD = B.ORG_CD(+)
            AND A.ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT op.fc_length(substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
                     substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일') || ',' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 5, 2) || '월' ||
             substr2(OP.SF_GETPOSTACTDATE(PDATE), 7, 2) || '일'
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) ||
                       op.fc_length(REPORT.BRANCH_CD) || ',' || REPORT.BRANCH_CD ||
                       op.fc_length(REPORT.MAC_NO) || ',' || REPORT.MAC_NO ||
                       op.fc_length(MACHINE.CD_NM1) || ',' || MACHINE.CD_NM1 ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.POST_SENDPLAN_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PLUS_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                             REPORT.WKD_SENDPLAN_AMT +
                                             REPORT.PLUS_SEND_AMT) / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR((REPORT.POST_SENDPLAN_AMT +
                                     REPORT.WKD_SENDPLAN_AMT +
                                     REPORT.PLUS_SEND_AMT) / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND
                            BRANCH_CD LIKE
                            DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                            AND DEMAND_DATE = PDATE
                            AND POST_SENDPLAN_AMT || PLUS_SEND_AMT ||
                            WKD_SENDPLAN_AMT <> 000) REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.POST_SENDPLAN_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT / 1000), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PLUS_SEND_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                           REPORT.WKD_SENDPLAN_AMT +
                                           REPORT.PLUS_SEND_AMT) / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM((REPORT.POST_SENDPLAN_AMT +
                                   REPORT.WKD_SENDPLAN_AMT +
                                   REPORT.PLUS_SEND_AMT) / 1000),
                               0),
                           '999,999,999'))
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE
                  DECODE(PBRANCHCD, '000000', '', PBRANCHCD) || '%'
                  AND DEMAND_DATE = PDATE
                  AND
                  POST_SENDPLAN_AMT || PLUS_SEND_AMT || WKD_SENDPLAN_AMT <> 000) REPORT,
           OP.T_CM_MAC MAC,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2100') COMPANY,
           (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO
            AND COMPANY.SMALL_CD = MAC.MADE_COM_CD
            AND MACHINE.SMALL_CD = MAC.MAC_MODEL;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1    := '';
      VFD_L2    := '';
      VFD_HD    := '';
      VFD_TEMP  := '';
      VFD_TEMP1 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackCashTranPlanTableForBS',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKCASHTRANPLANTABLEFORBS;

  -- 부산은행 마감양식 
  PROCEDURE SP_PACKOPAMTCLOSINGTABLEBS(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                       PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                       PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                       PFAXCD    IN VARCHAR2,
                                       PPAGENO   IN NUMBER,
                                       PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 마감표 PackOpAmtclosingTableBS
    
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) ||
                       op.fc_length(REPORT.BRANCH_CD) || ',' || REPORT.BRANCH_CD ||
                       op.fc_length(REPORT.MAC_NO) || ',' || REPORT.MAC_NO ||
                       op.fc_length(MACHINE.CD_NM1) || ',' || MACHINE.CD_NM1 ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.OUT_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.IN_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.IN_AMT / 1000, '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000, '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND DEMAND_DATE = PDATE
                            AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <>
                            '0000') REPORT,
                     OP.T_CM_MAC MAC,
                     (SELECT * FROM OP.T_CM_COMMON WHERE LARGE_CD = '2110') MACHINE
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                      AND MACHINE.SMALL_CD = MAC.MAC_MODEL
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      SELECT op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.PRE_SEND_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.OUT_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.IN_AMT / 1000), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(SUM(REPORT.CLOSE_AMT / 1000), '999,999,999')) LIST_DATA
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableBS',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEBS;

  -- 광주은행 마감양식 
  PROCEDURE SP_PACKOPAMTCLOSINGTABLEKJ(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                       PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                       PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                       PFAXCD    IN VARCHAR2,
                                       PPAGENO   IN NUMBER,
                                       PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --일괄관리운영자금 마감표 PackOpAmtclosingTableKJ
    
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      /*      
            -- 광주 --
            if pOrgCd = '034' then
              
            
           
            FOR k IN
                  (
              SELECT 
            op.fc_length(substr2(MAC.MAC_NM,1,11))||','||substr2(MAC.MAC_NM,1,11)||
                op.fc_length(REPORT.MAC_NO)||','||REPORT.MAC_NO||
            op.fc_length(ltrim(to_char(REPORT.PRE_SEND_AMT/1000,'999,999,999')))||','||ltrim(to_char(REPORT.PRE_SEND_AMT/1000,'999,999,999'))||
            op.fc_length(ltrim(to_char(REPORT.CLOSE_AMT/1000+REPORT.DIFFER_AMT/1000,'999,999,999')))||','||
                  ltrim(to_char(REPORT.CLOSE_AMT/1000+REPORT.DIFFER_AMT/1000,'999,999,999')) list_data
              FROM
              (
            SELECT * 
            FROM 
              OP.T_FN_PACK_REPORT 
              WHERE 
            ORG_CD=pOrgCd 
            AND BRANCH_CD LIKE pJijumCd||'%' 
            AND DEMAND_DATE=pDate
                  AND OUT_AMT||IN_AMT||CLOSE_AMT||DIFFER_AMT <> '0000'
              ) REPORT,
              OP.T_CM_MAC MAC
              WHERE 
              REPORT.ORG_CD=MAC.ORG_CD 
              AND REPORT.BRANCH_CD=MAC.BRANCH_CD 
              AND REPORT.MAC_NO=MAC.MAC_NO
              order by REPORT.ORG_CD,REPORT.BRANCH_CD,report.mac_no
            )
            LOOP  
      
            vFd_L1 :=  vFd_L1||k.list_data;         
      
            END LOOP;             
            
            vFd_temp1 :='';
            SELECT 
            op.fc_length(ltrim(to_char(nvl(sum(REPORT.PRE_SEND_AMT/1000),0),'999,999,999')))||','||
                  ltrim(to_char(nvl(sum(REPORT.PRE_SEND_AMT/1000),0),'999,999,999'))||
            op.fc_length(ltrim(to_char(nvl(sum(REPORT.CLOSE_AMT/1000+REPORT.DIFFER_AMT/1000),0),'999,999,999')))||','||
                  ltrim(to_char(nvl(sum(REPORT.CLOSE_AMT/1000+REPORT.DIFFER_AMT/1000),0),'999,999,999')) list_data
            into vFd_temp1    
              FROM
              (
            SELECT * 
            FROM 
              OP.T_FN_PACK_REPORT 
              WHERE 
            ORG_CD=pOrgCd 
            AND BRANCH_CD LIKE pJijumCd||'%' 
            AND DEMAND_DATE=pDate
                  AND OUT_AMT||IN_AMT||CLOSE_AMT||DIFFER_AMT <> '0000'
              ) REPORT,
              OP.T_CM_MAC MAC
              WHERE 
              REPORT.ORG_CD=MAC.ORG_CD 
              AND REPORT.BRANCH_CD=MAC.BRANCH_CD 
              AND REPORT.MAC_NO=MAC.MAC_NO;
      
            vFd_L2 :=  vFd_L2||vFd_temp1;    
                  
            end if;            
            
      */
    
      --list 1
    
      FOR K IN (SELECT op.fc_length(substr2(MAC.MAC_NM, 1, 11)) || ',' ||
                       substr2(MAC.MAC_NM, 1, 11) || op.fc_length(REPORT.MAC_NO) || ',' ||
                       REPORT.MAC_NO ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.PRE_SEND_AMT / 1000,
                                     '999,999,999')) ||
                       op.fc_length(LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                             REPORT.DIFFER_AMT / 1000,
                                             '999,999,999'))) || ',' ||
                       LTRIM(TO_CHAR(REPORT.CLOSE_AMT / 1000 +
                                     REPORT.DIFFER_AMT / 1000,
                                     '999,999,999')) LIST_DATA
                FROM (SELECT *
                      FROM OP.T_FN_PACK_REPORT
                      WHERE ORG_CD = PORGCD
                            AND BRANCH_CD LIKE PBRANCHCD || '%'
                            AND DEMAND_DATE = PDATE
                            AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <>
                            '0000') REPORT,
                     OP.T_CM_MAC MAC
                WHERE REPORT.ORG_CD = MAC.ORG_CD
                      AND REPORT.BRANCH_CD = MAC.BRANCH_CD
                      AND REPORT.MAC_NO = MAC.MAC_NO
                ORDER BY REPORT.ORG_CD,
                         REPORT.BRANCH_CD,
                         REPORT.MAC_NO) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT / 1000), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.PRE_SEND_AMT / 1000), 0),
                           '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000 +
                                           REPORT.DIFFER_AMT / 1000),
                                       0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(REPORT.CLOSE_AMT / 1000 +
                                   REPORT.DIFFER_AMT / 1000),
                               0),
                           '999,999,999')) LIST_DATA
      INTO VFD_TEMP1
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND BRANCH_CD LIKE PBRANCHCD || '%'
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_PackOpAmtclosingTableKJ',
                                          VRESULT,
                                          PDATE);
  
  END SP_PACKOPAMTCLOSINGTABLEKJ;

  -- 우체국토탈 현송회수표
  PROCEDURE SP_MACSTOCK17P(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                           PFAXCD    IN VARCHAR2,
                           PPAGENO   IN NUMBER,
                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --현송회수표  sp_MacStock17P
    
      -- header 
    
      SELECT DISTINCT op.fc_length(substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                              substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                              substr2(REPORT.CLOSE_DATE, 7, 2) || '일') || ',' ||
                      substr2(REPORT.CLOSE_DATE, 1, 4) || '년' ||
                      substr2(REPORT.CLOSE_DATE, 5, 2) || '월' ||
                      substr2(REPORT.CLOSE_DATE, 7, 2) || '일'
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_PACK_REPORT
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE
                  AND OUT_AMT || IN_AMT || CLOSE_AMT || DIFFER_AMT <> '0000') REPORT,
           OP.T_CM_MAC MAC
      WHERE REPORT.ORG_CD = MAC.ORG_CD
            AND REPORT.BRANCH_CD = MAC.BRANCH_CD
            AND REPORT.MAC_NO = MAC.MAC_NO;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(ORG_NM) || ',' || ORG_NM
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      FOR K IN (
                
                SELECT op.fc_length(substr2(MAC_NM, 1, 11)) || ',' ||
                        substr2(MAC_NM, 1, 11) || op.fc_length(MAC_NO) || ',' ||
                        MAC_NO ||
                        op.fc_length(LTRIM(TO_CHAR(CASH_AMT / 1000, '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(CASH_AMT / 1000, '999,999,999')) ||
                        op.fc_length(LTRIM(TO_CHAR(COLLECT_AMT / 1000,
                                              '999,999,999'))) || ',' ||
                        LTRIM(TO_CHAR(COLLECT_AMT / 1000, '999,999,999')) LIST_DATA
                FROM (SELECT MAC.MAC_NM,
                              S.BRANCH_CD || '-' || S.MAC_NO MAC_NO,
                              S.CASH_AMT,
                              NVL(S.COLLECT_AMT, 0) COLLECT_AMT
                       FROM OP.T_FN_ATMS_CLOSE_SEND S,
                            OP.T_CM_MAC             MAC
                       WHERE S.CLOSE_DATE =
                             OP.SF_GETPREACTDATE(PDATE)
                             AND S.ORG_CD = PORGCD
                             AND S.ORG_CD = MAC.ORG_CD
                             AND S.BRANCH_CD = MAC.BRANCH_CD
                             AND S.MAC_NO = MAC.MAC_NO
                       ORDER BY S.BRANCH_CD,
                                S.MAC_NO)
                
                ) LOOP
      
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      
      END LOOP;
    
      VFD_TEMP1 := '';
      SELECT op.fc_length(LTRIM(TO_CHAR(NVL(SUM(CASH_AMT / 1000), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(CASH_AMT / 1000), 0), '999,999,999')) ||
             op.fc_length(LTRIM(TO_CHAR(NVL(SUM(COLLECT_AMT / 1000), 0),
                                   '999,999,999'))) || ',' ||
             LTRIM(TO_CHAR(NVL(SUM(COLLECT_AMT / 1000), 0), '999,999,999')) LIST_DATA
      INTO VFD_TEMP1
      FROM (SELECT MAC.MAC_NM,
                   S.BRANCH_CD || '-' || S.MAC_NO MAC_NO,
                   S.CASH_AMT,
                   NVL(S.COLLECT_AMT, 0) COLLECT_AMT
            FROM OP.T_FN_ATMS_CLOSE_SEND S,
                 OP.T_CM_MAC             MAC
            WHERE S.CLOSE_DATE = OP.SF_GETPREACTDATE(PDATE)
                  AND S.ORG_CD = PORGCD
                  AND S.ORG_CD = MAC.ORG_CD
                  AND S.BRANCH_CD = MAC.BRANCH_CD
                  AND S.MAC_NO = MAC.MAC_NO);
    
      VFD_L2 := VFD_L2 || VFD_TEMP1;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_L1   := '';
      VFD_L2   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_MacStock17P',
                                          VRESULT,
                                          PDATE);
  
  END SP_MACSTOCK17P;

  -- 삼성카드 양식
  PROCEDURE SP_NICEOPAMTREQFORSW(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                                 PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                                 PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                                 PFAXCD    IN VARCHAR2,
                                 PPAGENO   IN NUMBER,
                                 PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --운영자금 소요명세서 sp_NiceOpAmtReqForSW
    
      -- header  
    
      SELECT op.fc_length(NVL(NICE_RCV_PART, '')) || ',' ||
             NVL(NICE_RCV_PART, '')
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_TEMP;
    
      --         select op.fc_length(to_char(sysdate,'yyyy-mm-dd'))||','||to_char(sysdate,'yyyy-mm-dd')  BASE_DATE  
      --        into   vFd_temp     
      --         from dual;         
    
      --         vFd_hd :=  vFd_hd||vFd_temp;
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(DEMAND_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(START_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(END_DATE, 'yyyymmdd'), 'yyyy-mm-dd') ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(USE_DAYS, '99'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(OPER_AMT / USE_DAYS * 2 / 1000,
                                         '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(OPER_AMT / USE_DAYS * 2 / 1000,
                                 '999,999,999'))) USE_DAYS
      INTO VFD_TEMP
      FROM OP.T_FN_NICE_DEMAND
      WHERE ORG_CD = PORGCD
            AND DEMAND_DATE = PDATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      SELECT DISTINCT op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.MAC_CNT, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                                  DECODE(DE.USE_DAYS,
                                                                       1,
                                                                       RA.ORD_CNT_RATE,
                                                                       WKD_CNT_RATE) / 100),
                                                  '999,990.999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT * (1 +
                                          DECODE(DE.USE_DAYS,
                                                               1,
                                                               RA.ORD_CNT_RATE,
                                                               WKD_CNT_RATE) / 100),
                                          '999,990.999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,990.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(OP.AVG_CNT, '999,990.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_CNT_RATE,
                                                         WKD_CNT_RATE),
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_CNT_RATE,
                                                 WKD_CNT_RATE),
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3) * (1 +
                                                              (DECODE(DE.USE_DAYS,
                                                                      1,
                                                                      RA.ORD_AMT_RATE,
                                                                      RA.WKD_AMT_RATE)) / 100)),
                                                  '999,999.9999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3) * (1 +
                                                      (DECODE(DE.USE_DAYS,
                                                              1,
                                                              RA.ORD_AMT_RATE,
                                                              RA.WKD_AMT_RATE)) / 100)),
                                          '999,999.9999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                        3)),
                                                  '999,999.99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(int(ROUND(TO_NUMBER(OP.AVG_AMT / 1000),
                                                3)),
                                          '999,999.99'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                         1,
                                                         RA.ORD_AMT_RATE,
                                                         RA.WKD_AMT_RATE),
                                                  '99999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DECODE(DE.USE_DAYS,
                                                 1,
                                                 RA.ORD_AMT_RATE,
                                                 RA.WKD_AMT_RATE),
                                          '99999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.USE_DAYS, '99')))
      INTO VFD_TEMP
      FROM (SELECT *
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD = PORGCD
                  AND DEMAND_DATE = PDATE) DE,
           (SELECT * FROM OP.T_FN_NICE_MONTHLY_OPER WHERE ORG_CD = PORGCD) OP,
           (SELECT * FROM OP.T_FN_ORG_SPARE_RATE WHERE ORG_CD = PORGCD) RA
      WHERE OP.START_DATE <= PDATE
            AND PDATE <= OP.END_DATE
            AND DE.ORG_CD = OP.ORG_CD
            AND OP.ORG_CD = RA.ORG_CD
            AND RA.ORG_CD = DE.ORG_CD
            AND RA.START_DATE <= PDATE
            AND PDATE <= RA.END_DATE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT DISTINCT op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.OPER_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.TMR_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.TMR_AMT / 1000, '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.RETURN_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.RETURN_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.DEMAND_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.DEMAND_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                                  DE.YST_RESULT_AMT / 1000,
                                                  '999,999,999')))) || ',' ||
                      RTRIM(LTRIM(TO_CHAR(DE.YST_START_AMT / 1000 -
                                          DE.YST_RESULT_AMT / 1000,
                                          '999,999,999'))) ||
                      op.fc_length(TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1,
                                      'yyyy.mm.dd')) || ',' ||
                      TO_CHAR(TO_DATE(PDATE, 'yyyymmdd') - 1, 'yyyy.mm.dd')
      
      INTO VFD_TEMP
      FROM (SELECT SUM(OPER_AMT) OPER_AMT,
                   SUM(YST_START_AMT) YST_START_AMT,
                   SUM(YST_AMT) YST_AMT,
                   SUM(TMR_AMT) TMR_AMT,
                   SUM(YST_RESULT_AMT) YST_RESULT_AMT,
                   SUM(RETURN_AMT) RETURN_AMT,
                   SUM(DEMAND_AMT) DEMAND_AMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE ORG_CD IN ('0SW', '0SC')
                  AND DEMAND_DATE = PDATE) DE;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT COUNT(*)
      INTO VCNT
      FROM OP.T_CM_ORG
      WHERE ORG_CD = KFTC_ORG_CD
            AND TRAN_YN = '1'
            AND ORG_CD = PORGCD;
    
      IF VCNT > 0 THEN
        /*
          select op.fc_length(case when org_cd is null then ' '  else  '마. 입금계좌' end)||','||case when org_cd is null then ' '  else  '마. 입금계좌' end ||
          op.fc_length(case when org_cd is null then ' '  else  '- 은  행  명 :' end)||','||case when org_cd is null then ' '  else  '- 은  행  명 :' end ||
          op.fc_length(case when org_cd is null then ' '  when pOrgCd ='HM' then '한미은행' when pOrgCd='45' then '새마을금고' else org_nm end)||','||
          case when org_cd is null then ' '  when pOrgCd ='HM' then '한미은행' when pOrgCd='45' then '새마을금고' else org_nm end ||
          op.fc_length(case when org_cd is null then ' '  else  '- 예  금  주 :' end)||','||case when org_cd is null then ' '  else  '- 예  금  주 :' end                
         into vFd_temp
         from 
          OP.t_cm_org 
         where 
          org_cd = kftc_org_cd
          and tran_yn = '1'
          and org_cd=pOrgCd;
        */
        SELECT op.fc_length(CASE
                         WHEN O.ORG_CD IS NULL THEN
                          ' '
                         ELSE
                          '마. 입금계좌'
                       END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '마. 입금계좌'
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 은  행  명 :'
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 은  행  명 :'
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                WHEN PORGCD = '0HM' THEN
                                 '씨티은행'
                                WHEN PORGCD = '045' THEN
                                 '새마을금고'
                                ELSE
                                 O.ORG_NM
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 WHEN PORGCD = '0HM' THEN
                  '씨티은행'
                 WHEN PORGCD = '045' THEN
                  '새마을금고'
                 ELSE
                  O.ORG_NM
               END || op.fc_length(CASE
                                WHEN O.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 예  금  주 :'
                              END) || ',' || CASE
                 WHEN O.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 예  금  주 :'
               END
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_ACCOUNT A,
             OP.T_CM_ORG          O
        WHERE A.ORG_CD = O.ORG_CD;
      
      ELSE
        SELECT lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' '
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VCNT     := 0;
      VFD_TEMP := '';
    
      SELECT COUNT(*)
      INTO VCNT
      FROM OP.T_FN_NICE_ACCOUNT A,
           OP.T_CM_ORG O,
           (SELECT ORG_CD
            FROM OP.T_CM_ORG
            WHERE ORG_CD = KFTC_ORG_CD
                  AND TRAN_YN = '1'
                  AND ORG_CD = PORGCD) B
      WHERE A.ORG_CD = O.ORG_CD;
    
      IF VCNT > 0 THEN
        SELECT op.fc_length(CASE
                         WHEN B.ORG_CD IS NULL THEN
                          ' '
                         ELSE
                          A.ACCOUNT_PERSON
                       END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  A.ACCOUNT_PERSON
               END || op.fc_length(CASE
                                WHEN B.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 '- 계좌번호  :'
                              END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  '- 계좌번호  :'
               END || op.fc_length(CASE
                                WHEN B.ORG_CD IS NULL THEN
                                 ' '
                                ELSE
                                 CASE
                                   WHEN PORGCD = '0HM' THEN
                                    '101-52061-248'
                                   WHEN PORGCD = '045' THEN
                                    '0006-801-860001-1'
                                   ELSE
                                    OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')
                                 END
                              END) || ',' || CASE
                 WHEN B.ORG_CD IS NULL THEN
                  ' '
                 ELSE
                  CASE
                    WHEN PORGCD = 'HM' THEN
                     '101-52061-248'
                    WHEN PORGCD = '045' THEN
                     '0006-801-860001-1'
                    ELSE
                     OP.FC_FN_SECURITY(A.ACCOUNT_NO, '2')
                  END
               END END
        INTO VFD_TEMP
        FROM OP.T_FN_NICE_ACCOUNT A,
             OP.T_CM_ORG O,
             (SELECT ORG_CD
              FROM OP.T_CM_ORG
              WHERE ORG_CD = KFTC_ORG_CD
                    AND TRAN_YN = '1'
                    AND ORG_CD = PORGCD) B
        WHERE A.ORG_CD = O.ORG_CD;
      ELSE
        SELECT lengthb(' ') || ',' || ' ' || lengthb(' ') || ',' || ' ' ||
               lengthb(' ') || ',' || ' '
        INTO VFD_TEMP
        FROM DUAL;
      END IF;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      VFD_TEMP := '';
      SELECT op.fc_length(NVL(NICE_RCV_PART, '') || ' ' ||
                     NVL(NICE_RCV_PERSON, '')) || ',' ||
             NVL(NICE_RCV_PART, '') || ' ' || NVL(NICE_RCV_PERSON, '')
      
      INTO VFD_TEMP
      FROM OP.T_FN_ORG_INFO
      WHERE ORG_CD = PORGCD;
      VFD_HD := VFD_HD || VFD_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD);
    
      VFD_L1   := '';
      VFD_HD   := '';
      VFD_TEMP := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_NiceOpAmtReqForSW',
                                          VRESULT,
                                          PDATE);
  
  END SP_NICEOPAMTREQFORSW;

  -- 24시 기기내재고현황 양식  
  PROCEDURE SP_MACSTOCK24P(PDATE     IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                           PORGCD    IN OP.T_FN_SEND.ORG_CD%TYPE,
                           PBRANCHCD IN OP.T_FN_SEND.BRANCH_CD%TYPE,
                           PFAXCD    IN VARCHAR2,
                           PPAGENO   IN NUMBER,
                           PINDEXKEY IN OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE) IS
    -- master 값  
    VTARGETNO OP.T_CM_FAX_MASTER.TARGET_NO%TYPE;
  
    --data 값  
    VFD_HD  clob := EMPTY_CLOB;
    VFD_FT  clob := EMPTY_CLOB;
    VFD_L1  clob := EMPTY_CLOB;
    VFD_L2  clob := EMPTY_CLOB;
    VFD_L3  clob := EMPTY_CLOB;
    VFD_L4  clob := EMPTY_CLOB;
    VFD_L5  clob := EMPTY_CLOB;
    VFD_L6  clob := EMPTY_CLOB;
    VFD_L7  clob := EMPTY_CLOB;
    VFD_L8  clob := EMPTY_CLOB;
    VFD_L9  clob := EMPTY_CLOB;
    VFD_L10 clob := EMPTY_CLOB;
  
    VFD_TEMP  clob := EMPTY_CLOB;
    VFD_TEMP1 clob := EMPTY_CLOB;
  
    VFD_L1_TEMP clob := EMPTY_CLOB;
    VFD_L2_TEMP clob := EMPTY_CLOB;
  
    VFAXCD    OP.T_CM_FAX_ORG_BRANCH.FAX_CD%TYPE;
    VFAXNM    OP.T_CM_FAX_ORG_BRANCH.FAX_NM%TYPE;
    VORGCD    OP.T_CM_FAX_ORG_BRANCH.ORG_CD%TYPE;
    VBRANCHCD OP.T_CM_FAX_ORG_BRANCH.BRANCH_CD%TYPE;
  
    VCNT       NUMBER := 0;
    VAMT1      NUMBER := 0;
    VAMT2      NUMBER := 0;
    VAMT3      NUMBER := 0;
    VAMT4      NUMBER := 0;
    VAMT5      NUMBER := 0;
    VCHARTEMP  VARCHAR2(30);
    VCHARTEMP1 VARCHAR2(30);
  
    VT_PT   NUMBER := 0;
    VT_T    NUMBER := 0;
    VT_OP   NUMBER := 0;
    VT_OU   NUMBER := 0;
    VT_IN   NUMBER := 0;
    VTJ_PT  NUMBER := 0;
    VTJ_T   NUMBER := 0;
    VTJ_OP  NUMBER := 0;
    VTJ_OU  NUMBER := 0;
    VTJ_IN  NUMBER := 0;
    VTB_D   NUMBER := 0;
    VTJB_D  NUMBER := 0;
    VA_S    NUMBER := 0;
    VA_C    NUMBER := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과    
  BEGIN
    IF PDATE IS NULL THEN
      PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      --24시 기준 기기별 재고 현황표 
    
      -- header  
    
      SELECT op.fc_length(TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                                     'yyyymmdd'),
                             'yyyy-mm-dd')) || ',' ||
             TO_CHAR(TO_DATE(OP.SF_GETBEFOREDATE(PDATE),
                             'yyyymmdd'),
                     'yyyy-mm-dd') BASE_DATE
      INTO VFD_TEMP
      FROM DUAL;
    
      VFD_HD := VFD_TEMP;
    
      SELECT op.fc_length(NVL(ORG_NM, '')) || ',' || NVL(ORG_NM, '')
      INTO VFD_TEMP
      FROM OP.T_CM_ORG
      WHERE ORG_CD = PORGCD;
    
      VFD_HD := VFD_HD || VFD_TEMP;
    
      FOR K IN
      
       (SELECT op.fc_length(substr2(MACNAME, 1, 11)) || ',' ||
               substr2(MACNAME, 1, 11) || op.fc_length(MACNO) || ',' || MACNO ||
               op.fc_length(RTRIM(LTRIM(TO_CHAR(BEFSTOCKAMT, '999,999,999')))) || ',' ||
               RTRIM(LTRIM(TO_CHAR(BEFSTOCKAMT, '999,999,999'))) ||
               op.fc_length(RTRIM(LTRIM(TO_CHAR(REGSENDAMT, '999,999,999')))) || ',' ||
               RTRIM(LTRIM(TO_CHAR(REGSENDAMT, '999,999,999'))) ||
               op.fc_length(RTRIM(LTRIM(TO_CHAR(PLUSSENDAMT, '999,999,999')))) || ',' ||
               RTRIM(LTRIM(TO_CHAR(PLUSSENDAMT, '999,999,999'))) ||
               op.fc_length(RTRIM(LTRIM(TO_CHAR(DEALAMT, '999,999,999')))) || ',' ||
               RTRIM(LTRIM(TO_CHAR(DEALAMT, '999,999,999'))) ||
               op.fc_length(RTRIM(LTRIM(TO_CHAR(STOCKAMT, '999,999,999')))) || ',' ||
               RTRIM(LTRIM(TO_CHAR(STOCKAMT, '999,999,999'))) LIST_DATA
        
        FROM (
              
              SELECT MAC.MAC_NM MACNAME,
                      MAIN.MAC_NO MACNO,
                      (MAIN.BEF_STOCK_AMT / 1000) BEFSTOCKAMT,
                      (MAIN.REGSENDAMT / 1000) REGSENDAMT,
                      (SUM(MAIN.PLUSSENDAMT) / 1000) PLUSSENDAMT,
                      (MAIN.DEALAMT / 1000) DEALAMT,
                      (MAIN.STOCK_AMT / 1000) STOCKAMT
              FROM (SELECT STOCK_DATE,
                            ORG_CD,
                            DEPT_CD,
                            OFFICE_CD,
                            BRANCH_CD,
                            MAC_NO,
                            BEF_STOCK_AMT,
                            STOCK_AMT,
                            DECODE(ORG_CD,
                                   '096',
                                   DEAL_AMT,
                                   CASE
                                     WHEN REGSENDAMT > 0 THEN
                                      0
                                     ELSE
                                      DEAL_AMT
                                   END) DEALAMT,
                            NVL(REGSENDAMT, 0) REGSENDAMT,
                            CASE
                              WHEN NVL(REGSENDTIME, 0) < PLUSSENDTIME THEN
                               PLUSSENDAMT
                              ELSE
                               0
                            END PLUSSENDAMT
                     FROM (SELECT A.STOCK_DATE,
                                  A.ORG_CD,
                                  A.DEPT_CD,
                                  A.OFFICE_CD,
                                  A.BRANCH_CD,
                                  A.MAC_NO,
                                  A.BEF_STOCK_AMT,
                                  A.STOCK_AMT,
                                  A.DEAL_AMT,
                                  B.SEND_AMT      REGSENDAMT,
                                  B.SEND_TIME     REGSENDTIME,
                                  C.SEND_AMT      PLUSSENDAMT,
                                  C.SEND_TIME     PLUSSENDTIME
                           FROM (SELECT STOCK_DATE,
                                        ORG_CD,
                                        DEPT_CD,
                                        OFFICE_CD,
                                        BRANCH_CD,
                                        MAC_NO,
                                        BEF_STOCK_AMT,
                                        STOCK_AMT,
                                        DEAL_AMT
                                 FROM OP.T_FN_MAC_STOCK
                                 WHERE STOCK_DATE =
                                       OP.SF_GETBEFOREDATE(PDATE)
                                       AND ORG_CD = PORGCD
                                 
                                 ) A,
                                (SELECT *
                                 FROM OP.T_FN_SEND
                                 WHERE SEND_TYPE = '1'
                                       AND CANCEL_TYPE = '0'
                                       AND SEND_STATUS = '2') B,
                                (SELECT *
                                 FROM OP.T_FN_SEND
                                 WHERE SEND_TYPE = '2'
                                       AND CANCEL_TYPE = '0'
                                       AND SEND_STATUS = '2') C
                           WHERE A.STOCK_DATE = B.SEND_DATE(+)
                                 AND A.ORG_CD = B.ORG_CD(+)
                                 AND A.DEPT_CD = B.DEPT_CD(+)
                                 AND A.OFFICE_CD = B.OFFICE_CD(+)
                                 AND A.BRANCH_CD = B.BRANCH_CD(+)
                                 AND A.MAC_NO = B.MAC_NO(+)
                                 AND A.STOCK_DATE = C.SEND_DATE(+)
                                 AND A.ORG_CD = C.ORG_CD(+)
                                 AND A.DEPT_CD = C.DEPT_CD(+)
                                 AND A.OFFICE_CD = C.OFFICE_CD(+)
                                 AND A.BRANCH_CD = C.BRANCH_CD(+)
                                 AND A.MAC_NO = C.MAC_NO(+))) MAIN,
                    OP.T_CM_ORG ORG,
                    OP.T_CM_BRANCH JUM,
                    OP.T_CM_MAC MAC
              WHERE MAIN.ORG_CD = ORG.ORG_CD
                    AND MAIN.ORG_CD = JUM.ORG_CD
                    AND MAIN.BRANCH_CD = JUM.BRANCH_CD
                    AND MAIN.ORG_CD = MAC.ORG_CD
                    AND MAIN.BRANCH_CD = MAC.BRANCH_CD
                    AND MAIN.MAC_NO = MAC.MAC_NO
              GROUP BY ORG.ORG_SHORT_NM,
                        JUM.BRANCH_NM,
                        MAIN.MAC_NO,
                        MAC.MAC_NM,
                        MAIN.BEF_STOCK_AMT,
                        MAIN.REGSENDAMT,
                        MAIN.DEALAMT,
                        MAIN.STOCK_AMT)
        
        )
      
       LOOP
        VFD_L1 :=  VFD_L1 || K.LIST_DATA;
      END LOOP;
    
      SELECT op.fc_length(RTRIM(LTRIM(TO_CHAR(SUM(BEFSTOCKAMT), '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(SUM(BEFSTOCKAMT), '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(SUM(REGSENDAMT), '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(SUM(REGSENDAMT), '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(SUM(PLUSSENDAMT), '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(SUM(PLUSSENDAMT), '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(SUM(DEALAMT), '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(SUM(DEALAMT), '999,999,999'))) ||
             op.fc_length(RTRIM(LTRIM(TO_CHAR(SUM(STOCKAMT), '999,999,999')))) || ',' ||
             RTRIM(LTRIM(TO_CHAR(SUM(STOCKAMT), '999,999,999'))) LIST_DATA
      
      INTO VFD_L2_TEMP
      
      FROM (
            
            SELECT MAC.MAC_NM MACNAME,
                    MAIN.MAC_NO MACNO,
                    (MAIN.BEF_STOCK_AMT / 1000) BEFSTOCKAMT,
                    (MAIN.REGSENDAMT / 1000) REGSENDAMT,
                    (SUM(MAIN.PLUSSENDAMT) / 1000) PLUSSENDAMT,
                    (MAIN.DEALAMT / 1000) DEALAMT,
                    (MAIN.STOCK_AMT / 1000) STOCKAMT
            FROM (SELECT STOCK_DATE,
                          ORG_CD,
                          DEPT_CD,
                          OFFICE_CD,
                          BRANCH_CD,
                          MAC_NO,
                          BEF_STOCK_AMT,
                          STOCK_AMT,
                          DECODE(ORG_CD,
                                 '096',
                                 DEAL_AMT,
                                 CASE
                                   WHEN REGSENDAMT > 0 THEN
                                    0
                                   ELSE
                                    DEAL_AMT
                                 END) DEALAMT,
                          NVL(REGSENDAMT, 0) REGSENDAMT,
                          CASE
                            WHEN NVL(REGSENDTIME, 0) < PLUSSENDTIME THEN
                             PLUSSENDAMT
                            ELSE
                             0
                          END PLUSSENDAMT
                   FROM (SELECT A.STOCK_DATE,
                                A.ORG_CD,
                                A.DEPT_CD,
                                A.OFFICE_CD,
                                A.BRANCH_CD,
                                A.MAC_NO,
                                A.BEF_STOCK_AMT,
                                A.STOCK_AMT,
                                A.DEAL_AMT,
                                B.SEND_AMT      REGSENDAMT,
                                B.SEND_TIME     REGSENDTIME,
                                C.SEND_AMT      PLUSSENDAMT,
                                C.SEND_TIME     PLUSSENDTIME
                         FROM (SELECT STOCK_DATE,
                                      ORG_CD,
                                      DEPT_CD,
                                      OFFICE_CD,
                                      BRANCH_CD,
                                      MAC_NO,
                                      BEF_STOCK_AMT,
                                      STOCK_AMT,
                                      DEAL_AMT
                               FROM OP.T_FN_MAC_STOCK
                               WHERE STOCK_DATE =
                                     OP.SF_GETBEFOREDATE(PDATE)
                                     AND ORG_CD = PORGCD
                               
                               ) A,
                              (SELECT *
                               FROM OP.T_FN_SEND
                               WHERE SEND_TYPE = '1'
                                     AND CANCEL_TYPE = '0'
                                     AND SEND_STATUS = '2') B,
                              (SELECT *
                               FROM OP.T_FN_SEND
                               WHERE SEND_TYPE = '2'
                                     AND CANCEL_TYPE = '0'
                                     AND SEND_STATUS = '2') C
                         WHERE A.STOCK_DATE = B.SEND_DATE(+)
                               AND A.ORG_CD = B.ORG_CD(+)
                               AND A.DEPT_CD = B.DEPT_CD(+)
                               AND A.OFFICE_CD = B.OFFICE_CD(+)
                               AND A.BRANCH_CD = B.BRANCH_CD(+)
                               AND A.MAC_NO = B.MAC_NO(+)
                               AND A.STOCK_DATE = C.SEND_DATE(+)
                               AND A.ORG_CD = C.ORG_CD(+)
                               AND A.DEPT_CD = C.DEPT_CD(+)
                               AND A.OFFICE_CD = C.OFFICE_CD(+)
                               AND A.BRANCH_CD = C.BRANCH_CD(+)
                               AND A.MAC_NO = C.MAC_NO(+))) MAIN,
                  OP.T_CM_ORG ORG,
                  OP.T_CM_BRANCH JUM,
                  OP.T_CM_MAC MAC
            WHERE MAIN.ORG_CD = ORG.ORG_CD
                  AND MAIN.ORG_CD = JUM.ORG_CD
                  AND MAIN.BRANCH_CD = JUM.BRANCH_CD
                  AND MAIN.ORG_CD = MAC.ORG_CD
                  AND MAIN.BRANCH_CD = MAC.BRANCH_CD
                  AND MAIN.MAC_NO = MAC.MAC_NO
            GROUP BY ORG.ORG_SHORT_NM,
                      JUM.BRANCH_NM,
                      MAIN.MAC_NO,
                      MAC.MAC_NM,
                      MAIN.BEF_STOCK_AMT,
                      MAIN.REGSENDAMT,
                      MAIN.DEALAMT,
                      MAIN.STOCK_AMT);
      VFD_L2 := VFD_L2 || VFD_L2_TEMP;
    
      INSERT INTO OP.T_CM_FAX_DATA
        (INDEX_KEY,
         PAGE_INDEX,
         FAX_FILE_CD,
         FD_HD,
         FD_L1,
         FD_L2)
      VALUES
        (PINDEXKEY,
         PPAGENO,
         PFAXCD,
         VFD_HD,
         VFD_L1,
         VFD_L2);
    
      VFD_HD := '';
      VFD_L1 := '';
      VFD_L2 := '';
    
    EXCEPTION
      WHEN OTHERS THEN
        -- ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxDetail.sp_MacStock24P',
                                          VRESULT,
                                          PDATE);
  
  END SP_MACSTOCK24P;

END OP.PKG_CM_FAXDETAIL;

CREATE OR REPLACE PACKAGE BODY OP.PKG_CM_FAXMASTER AS

  PROCEDURE SP_BATCHPROCESS(PDATE   IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT NULL,
                            PRECVCD IN VARCHAR DEFAULT '') IS
    VISHOLIDAY OP.T_FN_CALENDAR.HOLIDAY_YN%TYPE := 0;
    DSUMYN     VARCHAR(1) := 0;
    VINDEXKEY  OP.T_CM_FAX_MASTER.INDEX_KEY%TYPE;
    V_STATUS   OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE;
    VCNT1      NUMBER := 0;
  
    /* 예외 정의 */
    BATCH_FAILED EXCEPTION;
  
    /* 에러메세지 */
    VERRMSG VARCHAR(1000);
  
  BEGIN
  	IF PDATE IS NULL THEN
  		PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
  	END IF;
  
    BEGIN
      SELECT HOLIDAY_YN
        INTO VISHOLIDAY
        FROM OP.T_FN_CALENDAR
       WHERE STD_DATE = PDATE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(2008, '카렌다 정보가 없습니다.');
    END;
  
    IF VISHOLIDAY = '0' THEN
    
      FOR J IN (SELECT RECV_CD,
                       RECV_NO,
                       RECV_NM,
                       CASE
                         WHEN DT_INSERT_INDEX IS NULL OR DT_INSERT_INDEX <= 1 THEN
                          DT_TYPE || RECV_TITLE
                         WHEN DT_INSERT_INDEX > LENGTH2(RECV_TITLE) THEN
                          RECV_TITLE || DT_TYPE
                         ELSE
                          SUBSTR(RECV_TITLE, 1, DT_INSERT_INDEX) || DT_TYPE ||
                          SUBSTR(RECV_TITLE,
                                 DT_INSERT_INDEX + 1,
                                 LENGTH2(RECV_TITLE) - DT_INSERT_INDEX)
                       END AS DOC_TITLE
                  FROM (SELECT A.RECV_CD,
                               A.RECV_NO,
                               A.RECV_NM,
                               TO_CHAR(SYSDATE,
                                       (SELECT RECV_DTTYPE
                                          FROM OP.T_CM_FAX_ADDR
                                         WHERE RECV_CD = A.RECV_CD)) AS DT_TYPE,
                               A.DT_INSERT_INDEX,
                               A.RECV_TITLE
                          FROM OP.T_CM_FAX_ADDR A
                         WHERE A.RECV_CD LIKE PRECVCD || '%') ) LOOP
        SELECT CASE
                 WHEN LPAD(MAX(SUBSTR(INDEX_KEY, 9, 4)) + 1, 4, '0') IS NULL THEN
                  PDATE || '0001'
                 ELSE
                  PDATE || LPAD(MAX(SUBSTR(INDEX_KEY, 9, 4)) + 1, 4, '0')
               END
          INTO VINDEXKEY
          FROM OP.T_CM_FAX_MASTER
         WHERE SUBSTR(INDEX_KEY, 1, 8) = PDATE;
      
        --master 만들기
        INSERT INTO OP.T_CM_FAX_MASTER
          (INDEX_KEY, STATUS, TARGET_NO, REQUEST_DATE, TITLE, DOC_TITLE)
        
          SELECT VINDEXKEY,
                 '0',
                 --    'C',
                 J.RECV_NO, --수신처
                 SYSDATE,
                 J.RECV_NM,
                 J.DOC_TITLE
            FROM DUAL;
      
        FOR K IN (SELECT PAGE_NO, FAX_CD, FAX_NM, ORG_CD, BRANCH_CD
                    FROM OP.T_CM_FAX_RECV_ORG
                   WHERE RECV_CD = J.RECV_CD
                   ORDER BY PAGE_NO) LOOP
        
          BEGIN
          
            --미완료 오류명세서 거래  FeedetailSForSh
            IF K.FAX_CD = 'FS4SH' THEN
              OP.PKG_CM_FAXDETAIL.SP_FEEDETAILSFORSH(PDATE,
                                                     K.ORG_CD,
                                                     K.BRANCH_CD,
                                                     K.FAX_CD,
                                                     K.PAGE_NO,
                                                     VINDEXKEY);
            
              --미완료 오류명세서 거래(신한양식)  FeedetailSForSh1
            ELSIF K.FAX_CD = 'FS4SH1' THEN
              OP.PKG_CM_FAXDETAIL.SP_FEEDETAILSFORSH1(PDATE,
                                                      K.ORG_CD,
                                                      K.BRANCH_CD,
                                                      K.FAX_CD,
                                                      K.PAGE_NO,
                                                      VINDEXKEY);
            
              --미완료 오류명세서 거래  NotendForKB
            ELSIF K.FAX_CD = 'NO4KB' THEN
              OP.PKG_CM_FAXDETAIL.SP_NOTENDFORKB(PDATE,
                                                 K.ORG_CD,
                                                 K.BRANCH_CD,
                                                 K.FAX_CD,
                                                 K.PAGE_NO,
                                                 VINDEXKEY);
            
              --공항키오 미완료 오류명세서 거래  NotendForGH
            ELSIF K.FAX_CD = 'NO4GH' THEN
              OP.PKG_CM_FAXDETAIL.SP_NOTENDFORGH(PDATE,
                                                 K.ORG_CD,
                                                 K.BRANCH_CD,
                                                 K.FAX_CD,
                                                 K.PAGE_NO,
                                                 VINDEXKEY);
            
              -- 추가현송 리스트  PlusSendForKB
            ELSIF K.FAX_CD = 'PS4KB' THEN
              OP.PKG_CM_FAXDETAIL.SP_PLUSSENDFORKB(PDATE,
                                                   K.ORG_CD,
                                                   K.BRANCH_CD,
                                                   K.FAX_CD,
                                                   K.PAGE_NO,
                                                   VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReq
            ELSIF K.FAX_CD = 'NOAR' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQ(PDATE,
                                                  K.ORG_CD,
                                                  K.BRANCH_CD,
                                                  K.FAX_CD,
                                                  K.PAGE_NO,
                                                  VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqHana
            ELSIF K.FAX_CD = 'NOAR4HN' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQHANA(PDATE,
                                                      K.ORG_CD,
                                                      K.BRANCH_CD,
                                                      K.FAX_CD,
                                                      K.PAGE_NO,
                                                      VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForHNB
            ELSIF K.FAX_CD = 'NOAR4HNB' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORHNB(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForCN
            ELSIF K.FAX_CD = 'NOAR4CN' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORCN(PDATE,
                                                          K.ORG_CD,
                                                          K.BRANCH_CD,
                                                          K.FAX_CD,
                                                          K.PAGE_NO,
                                                          VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqJJ
            ELSIF K.FAX_CD = 'NOAR4JJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQJJ(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqLG
            ELSIF K.FAX_CD = 'NOAR4LG' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQLG(PDATE,
                                                    K.ORG_CD,
                                                    K.BRANCH_CD,
                                                    K.FAX_CD,
                                                    K.PAGE_NO,
                                                    VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqKJ
            ELSIF K.FAX_CD = 'NOAR4KJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQKJ(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForSW
            ELSIF K.FAX_CD = 'NOAR4SW' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORSW(PDATE,
                                                          K.ORG_CD,
                                                          K.BRANCH_CD,
                                                          K.FAX_CD,
                                                          K.PAGE_NO,
                                                          VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqPost
            ELSIF K.FAX_CD = 'NOAR4PST' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQPOST(PDATE,
                                                      K.ORG_CD,
                                                      K.BRANCH_CD,
                                                      K.FAX_CD,
                                                      K.PAGE_NO,
                                                      VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForSH
            ELSIF K.FAX_CD = 'NOAR4SH' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORSH(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqWoori
            ELSIF K.FAX_CD = 'NOAR4WR' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQWOORI(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForNh
            ELSIF K.FAX_CD = 'NOAR4NH' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORNH(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForBJ
            ELSIF K.FAX_CD = 'NOAR4BJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORBJ(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --일괄관리현송계획표 PackCashTranPlanTable
            ELSIF K.FAX_CD = 'PCTPT' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLE(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTable
            ELSIF K.FAX_CD = 'POACT' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLE(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForHana
            ELSIF K.FAX_CD = 'POAN4HN' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORHANA(PDATE,
                                                          K.ORG_CD,
                                                          K.BRANCH_CD,
                                                          K.FAX_CD,
                                                          K.PAGE_NO,
                                                          VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForDJ
            
            ELSIF K.FAX_CD = 'POAN4DJ' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORDJ(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForKEB
            ELSIF K.FAX_CD = 'POAN4KEB' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORKEB(PDATE,
                                                         K.ORG_CD,
                                                         K.BRANCH_CD,
                                                         K.FAX_CD,
                                                         K.PAGE_NO,
                                                         VINDEXKEY);
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForHusun
            ELSIF K.FAX_CD = 'POAN4HS' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORHUSUN(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForPost
            ELSIF K.FAX_CD = 'POAN4PST' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORPOST(PDATE,
                                                          K.ORG_CD,
                                                          K.BRANCH_CD,
                                                          K.FAX_CD,
                                                          K.PAGE_NO,
                                                          VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForPostTo
            ELSIF K.FAX_CD = 'POAN4PT' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORPOSTTO(PDATE,
                                                            K.ORG_CD,
                                                            K.BRANCH_CD,
                                                            K.FAX_CD,
                                                            K.PAGE_NO,
                                                            VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForKangju
            ELSIF K.FAX_CD = 'POAN4KJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORKANGJU(PDATE,
                                                            K.ORG_CD,
                                                            K.BRANCH_CD,
                                                            K.FAX_CD,
                                                            K.PAGE_NO,
                                                            VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForKB
            ELSIF K.FAX_CD = 'POAN4KB' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORKB(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForSG
            ELSIF K.FAX_CD = 'POAN4SG' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORSG(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForJJ
            ELSIF K.FAX_CD = 'POAN4JJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORJJ(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForGG
            ELSIF K.FAX_CD = 'POAN4GG' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORGG(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForKn
            ELSIF K.FAX_CD = 'POAN4KN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORKN(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForSinHan
            ELSIF K.FAX_CD = 'POAN4SH' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORSINHAN(PDATE,
                                                            K.ORG_CD,
                                                            K.BRANCH_CD,
                                                            K.FAX_CD,
                                                            K.PAGE_NO,
                                                            VINDEXKEY);
            
              --현송계획 산정근거 PackOpAmtSendPlanForKB
            ELSIF K.FAX_CD = 'POASP4KB' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTSENDPLANFORKB(PDATE,
                                                            K.ORG_CD,
                                                            K.BRANCH_CD,
                                                            K.FAX_CD,
                                                            K.PAGE_NO,
                                                            VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForHanmi      
            ELSIF K.FAX_CD = 'POAN4HM' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORHANMI(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeed      
            ELSIF K.FAX_CD = 'POAN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEED(PDATE,
                                                   K.ORG_CD,
                                                   K.BRANCH_CD,
                                                   K.FAX_CD,
                                                   K.PAGE_NO,
                                                   VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableKn
            ELSIF K.FAX_CD = 'POACT4KN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEKN(PDATE,
                                                             K.ORG_CD,
                                                             K.BRANCH_CD,
                                                             K.FAX_CD,
                                                             K.PAGE_NO,
                                                             VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableForCHB
            ELSIF K.FAX_CD = 'POACT4CHB' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEFORCHB(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --일괄관리운영자금 현송계획표 PackCashTranPlanTableForCHB
            ELSIF K.FAX_CD = 'PCTPT4CHB' THEN
            
              SELECT COUNT(*)
                INTO VCNT1
                FROM OP.T_CM_BRANCH
               WHERE ORG_CD = K.ORG_CD
                 AND BRANCH_CD = K.BRANCH_CD;
            
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLEFORCHB(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForSL(20080612 정희성 삼성생명 추가)      
            ELSIF K.FAX_CD = 'POAN4SL' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORSL(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForSL(20080612 정희성 삼성생명 추가)      
            ELSIF K.FAX_CD = 'POAN4KI' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORKI(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리현송계획표 PackCashTransPlanTableForSL(20080612 정희성 삼성생명 추가)
            ELSIF K.FAX_CD = 'PCTPT4SL' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLEFORSL(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableForSL(20080612 정희성 삼성생명 추가)
            ELSIF K.FAX_CD = 'POACT4SL' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEFORSL(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForSL(20090617 정희성 요넷 추가)      
            ELSIF K.FAX_CD = 'POAN4YN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORYN(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리현송계획표 PackCashTransPlanTableForSL(20090617 정희성 요넷 추가)
            ELSIF K.FAX_CD = 'PCTPT4YN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLEFORYN(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리현송계획표 PackCashTransPlanTableForGH(20130902 정희성 공항 추가)
            ELSIF K.FAX_CD = 'PCTPT4GH' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLEFORGH(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableForYN(20090617 정희성 요넷 추가)
            ELSIF K.FAX_CD = 'POACT4YN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEFORYN(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForBS(20080728 정희성 부산양식 추가)      
            ELSIF K.FAX_CD = 'POAN4BS' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORBS(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --일괄관리 시재내역 AppOpInOutOfficeCenterForBS(20080729 정희성 부산양식 추가)      
            ELSIF K.FAX_CD = 'AOIOOC4BS' THEN
              OP.PKG_CM_FAXDETAIL.SP_APPOPINOUTOFFICECENTERFORBS(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --일괄관리 시재내역 AppOpInOutOfficeCenterForCT(20140411 정희성 씨티양식 추가)      
            ELSIF K.FAX_CD = 'AOIOOC4CT' THEN
              OP.PKG_CM_FAXDETAIL.SP_APPOPINOUTOFFICECENTERFORCT(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --일괄관리 현송계획 PackCashTranPlanTableForBS(20080729 정희성 부산양식 추가)      
            ELSIF K.FAX_CD = 'PCTPT4BS' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANPLANTABLEFORBS(PDATE,
                                                                   K.ORG_CD,
                                                                   K.BRANCH_CD,
                                                                   K.FAX_CD,
                                                                   K.PAGE_NO,
                                                                   VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableBS(20080729 정희성 부산양식 추가)
            ELSIF K.FAX_CD = 'POACT4BS' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEBS(PDATE,
                                                                K.ORG_CD,
                                                                K.BRANCH_CD,
                                                                K.FAX_CD,
                                                                K.PAGE_NO,
                                                                VINDEXKEY);
            
              --일괄관리운영자금 마감표 PackOpAmtclosingTableBS(20120413 정희성 광주양식 추가)
            ELSIF K.FAX_CD = 'POACT4KJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTCLOSINGTABLEKJ(PDATE,
                                                             K.ORG_CD,
                                                             K.BRANCH_CD,
                                                             K.FAX_CD,
                                                             K.PAGE_NO,
                                                             VINDEXKEY);
            
              --일괄관리 기기별 24시 재고현황표 sp_MacStock24P(20120413 정희성 24 기기재고 양식 추가)
            ELSIF K.FAX_CD = 'STOCK' THEN
              OP.PKG_CM_FAXDETAIL.SP_MACSTOCK24P(PDATE,
                                                 K.ORG_CD,
                                                 K.BRANCH_CD,
                                                 K.FAX_CD,
                                                 K.PAGE_NO,
                                                 VINDEXKEY);
            
              --일괄관리 기기별 17시 재고현황표 sp_MacStock17P(20140201 정희성 17시 기기재고 우체국 양식 추가)
            ELSIF K.FAX_CD = 'STOCK17' THEN
              OP.PKG_CM_FAXDETAIL.SP_MACSTOCK17P(PDATE,
                                                 K.ORG_CD,
                                                 K.BRANCH_CD,
                                                 K.FAX_CD,
                                                 K.PAGE_NO,
                                                 VINDEXKEY);
            
              --일괄관리운영자금 소요명세서 PackOpAmtNeedForWR(20110325 정희성 우리양식 신규)      
            ELSIF K.FAX_CD = 'POAN4WR' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKOPAMTNEEDFORWR(PDATE,
                                                        K.ORG_CD,
                                                        K.BRANCH_CD,
                                                        K.FAX_CD,
                                                        K.PAGE_NO,
                                                        VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReport 
            ELSIF K.FAX_CD = 'NARR' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORT(PDATE,
                                                            K.ORG_CD,
                                                            K.BRANCH_CD,
                                                            K.FAX_CD,
                                                            K.PAGE_NO,
                                                            VINDEXKEY);
            
              --일괄관리지사별 시재내역 AppOpInOutOfficeCenterForKn
            ELSIF K.FAX_CD = 'AOIOOC4KN' THEN
              OP.PKG_CM_FAXDETAIL.SP_APPOPINOUTOFFICECENTERFORKN(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              /*  
               --운영자금 소요명세서 NiceOpAmtReqForKB
              elsif k.fax_cd ='NOAR4KB' then
               pkg_cm_faxDetail.sp_NiceOpAmtReqForKB(pDate,k.org_cd,k.jijum_cd,k.fax_cd,k.page_no,vIndexKey);                                      
               */
              --운영자금 소요명세서 NiceOpAmtReqForKB1                         
            ELSIF K.FAX_CD = 'NOAR4KB1' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORKB1(PDATE,
                                                           K.ORG_CD,
                                                           K.BRANCH_CD,
                                                           K.FAX_CD,
                                                           K.PAGE_NO,
                                                           VINDEXKEY);
            
              --일괄 지사별 시재내역 PackAmtInSafeByOffice
            ELSIF K.FAX_CD = 'PAISBO' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKAMTINSAFEBYOFFICE(PDATE,
                                                              K.ORG_CD,
                                                              K.BRANCH_CD,
                                                              K.FAX_CD,
                                                              K.PAGE_NO,
                                                              VINDEXKEY);
            
              --일괄관리현송계획표 PackCashTransPlanTableForKn
            ELSIF K.FAX_CD = 'PCTPT4KN' THEN
              OP.PKG_CM_FAXDETAIL.SP_PACKCASHTRANSPLANTABLEFORKN(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForHd
            ELSIF K.FAX_CD = 'NOAR4HD' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORHD(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportHD 
            ELSIF K.FAX_CD = 'NARR4HD' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTFORHD(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --운영자금 소요명세서 NiceOpAmtReqForFI
            ELSIF K.FAX_CD = 'NOAR4FI' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEOPAMTREQFORFI(PDATE,
                                                       K.ORG_CD,
                                                       K.BRANCH_CD,
                                                       K.FAX_CD,
                                                       K.PAGE_NO,
                                                       VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportForFI
            ELSIF K.FAX_CD = 'NARR4FI' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTFORFI(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --나이스 운영자금 센터별 수령금액통보
            ELSIF K.FAX_CD = 'POAR4SH' THEN
              OP.PKG_CM_FAXDETAIL.SP_ORGOPAMTREPORTFORSH(PDATE,
                                                         K.ORG_CD,
                                                         K.BRANCH_CD,
                                                         K.FAX_CD,
                                                         K.PAGE_NO,
                                                         VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportSC 
            ELSIF K.FAX_CD = 'NARR4SC' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTSC(PDATE,
                                                              K.ORG_CD,
                                                              K.BRANCH_CD,
                                                              K.FAX_CD,
                                                              K.PAGE_NO,
                                                              VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportDJ 
            ELSIF K.FAX_CD = 'NARR4DJ' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTDJ(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportForFe
            ELSIF K.FAX_CD = 'NARR4FE' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTFORFE(PDATE,
                                                                    K.ORG_CD,
                                                                    K.BRANCH_CD,
                                                                    K.FAX_CD,
                                                                    K.PAGE_NO,
                                                                    VINDEXKEY);
            
              --나이스 실적통보서 NiceActualResultReportForKE
            ELSIF K.FAX_CD = 'NARR4KEB' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTFORKE(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
              --나이스 수수료통보 NiceActualResultReportFeeNh
            ELSIF K.FAX_CD = 'NARR4FNH' THEN
              OP.PKG_CM_FAXDETAIL.SP_NICEACTUALRESULTREPORTFEENH(PDATE,
                                                                 K.ORG_CD,
                                                                 K.BRANCH_CD,
                                                                 K.FAX_CD,
                                                                 K.PAGE_NO,
                                                                 VINDEXKEY);
            
            END IF;
          
            -- if vCnt1>0 then
            --   delete from op.t_cm_fax_master
            --   where index_key =vIndexKey; 
            -- end if; 
          
            VCNT1 := 0;
          
            V_STATUS := 'OK';
            --===================================================
            INSERT INTO OP.T_CM_FAX_CHECK
              (STD_DATE, RECV_CD, RECV_NM, RECV_NO, ERROR_CD, INDEX_KEY)
            VALUES
              (PDATE, J.RECV_CD, J.RECV_NM, J.RECV_NO, V_STATUS, VINDEXKEY);
          
          EXCEPTION
            WHEN OTHERS THEN
              V_STATUS := SQLERRM;
              --===================================================
              INSERT INTO OP.T_CM_FAX_CHECK
                (STD_DATE, RECV_CD, RECV_NM, RECV_NO, ERROR_CD, INDEX_KEY)
              VALUES
                (PDATE,
                 J.RECV_CD,
                 J.RECV_NM,
                 J.RECV_NO,
                 V_STATUS,
                 VINDEXKEY);
            
              --===================================================
            
              DELETE FROM OP.T_CM_FAX_MASTER WHERE INDEX_KEY = VINDEXKEY;
          END;
        
        END LOOP;
      
        UPDATE OP.T_CM_FAX_MASTER
           SET STATUS = 'W'
         WHERE INDEX_KEY = VINDEXKEY;
      
        COMMIT;
      
      END LOOP;
    
    END IF;
  
    OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxMaster.sp_batchProcess',
                                          'OK',
                                          PDATE);
  
  EXCEPTION
    WHEN BATCH_FAILED THEN
      VERRMSG := 'FAX에러 중단.';
      OP.pkg_fn_common.sp_createBatchResult('pkg_cm_faxMaster.sp_batchProcess',
                                            VERRMSG,
                                            PDATE);
    WHEN OTHERS THEN
      OP.pkg_fn_common.sp_createBatchResult('OP.pkg_cm_faxMaster.sp_batchProcess',
                                               SQLERRM,
                                               PDATE);
      DBMS_OUTPUT.PUT_LINE('444');
  END OP.SP_BATCHPROCESS;

END PKG_CM_FAXMASTER;

CREATE OR REPLACE PACKAGE BODY OP.PKG_FN_FORECAST AS

PROCEDURE sp_GetLastSendDate(
		pDeptCd 		OP.t_fn_sendplan.dept_cd%TYPE, 
		pOfficeCd  		OP.t_fn_sendplan.office_cd%TYPE,
		vResult    OUT  OP.t_fn_sendplan.send_date%TYPE )
IS
BEGIN
    vResult := fc_GetLastSendDate(pDeptCd, pOfficeCd);
END sp_GetLastSendDate;



PROCEDURE sp_GetLastSendDate(
		pDeptCd 		OP.t_fn_sendplan.dept_cd%TYPE, 
		pOfficeCd  		OP.t_fn_sendplan.office_cd%TYPE,
		pOrgCd  		OP.t_fn_sendplan.org_cd%TYPE,
		vResult    OUT  OP.t_fn_sendplan.send_date%TYPE )
IS

BEGIN
    vResult := fc_GetLastSendDate(pDeptCd, pOfficeCd, pOrgCd);
END sp_GetLastSendDate;


-- 나이스의 사무소별 최종 현송일자 구하기 
FUNCTION fc_GetLastSendDate ( 
	pDeptCd 		OP.t_fn_sendplan.dept_cd%TYPE, 
	pOfficeCd  		OP.t_fn_sendplan.office_cd%TYPE	
) 
	Return VARCHAR IS
	
vLastSendDate VARCHAR(8);
	
BEGIN
   SELECT   /*+ INDEX_DESC (OP.t_fn_sendplan IX_OP.t_fn_sendplan_01) */
   			send_date
   INTO		vLastSendDate			
   FROM		OP.t_fn_sendplan
   WHERE	dept_cd   = pDeptCd
   AND		office_cd = pOfficeCd
   AND		rownum = 1;
    
   RETURN vLastSendDate;
   EXCEPTION
     WHEN OTHERS THEN
	 	RETURN '20030101';
END fc_GetLastSendDate;



-- 일괄관리기의 사무소별  최종 현송일자 구하기 
FUNCTION fc_GetLastSendDate (  
	pDeptCd 		OP.t_fn_sendplan.dept_cd%TYPE, 
	pOfficeCd  		OP.t_fn_sendplan.office_cd%TYPE,	
	pOrgCd  		OP.t_fn_sendplan.org_cd%TYPE
) 
	Return VARCHAR IS
	
vLastSendDate VARCHAR(8);
	
BEGIN
   SELECT   /*+ INDEX_DESC (OP.t_fn_sendplan IX_OP.t_fn_sendplan_01) */
   			send_date
   INTO		vLastSendDate			
   FROM		OP.t_fn_sendplan
   WHERE	dept_cd   = pDeptCd
   AND		office_cd = pOfficeCd
   AND		org_cd	  = pOrgCd
   AND		rownum = 1;
    
   RETURN vLastSendDate;
   EXCEPTION
     WHEN OTHERS THEN
	 	RETURN '20030101';
END fc_GetLastSendDate;




--  현송계획 문제 발생시 강제로 SENDPLAN자료만 만들어 주기
PROCEDURE sp_DealForecastEmc(
		  pWorkDate		IN	 VARCHAR default null )     -- 작업일자
IS
 v_work_date	  op.t_fn_calendar.std_date%TYPE;
 v_next_date	  op.t_fn_calendar.std_date%TYPE;
 v_forecast_fr	  op.t_fn_calendar.std_date%TYPE;
 v_forecast_to	  op.t_fn_calendar.std_date%TYPE; 
 v_holiday_yn     op.t_fn_calendar.holiday_yn%TYPE;
 v_status		  op.t_cm_batch_result.pgm_result%TYPE;
 v_err_msg		  op.t_cm_batch_result.pgm_result%TYPE;
 v_work_week_day  VARCHAR(1);
 
 c_NiceOrg	   	  OP.t_fn_sendplan.org_cd%TYPE := '096';
 
 procedure_call_error	EXCEPTION ;	 
 
BEGIN
  	if pWorkDate = '' or pWorkDate is null then
  		pWorkDate := TO_CHAR(SYSDATE, 'YYYYMMDD') ;
  	end if;
  	
	SELECT	DAYOFWEEK(to_date(pWorkDate,'yyyymmdd'))
	INTO   	v_work_week_day
	FROM    dual;

   /* 나이스 현송계획 */
   sp_NiceForecastEmc( pWorkDate, v_status);

   -- 프로시져 호출에서 에러가 발생
   IF	v_status <> 'OK'	   then
		v_err_msg := 'sp_NiceForecastEmc';
		RAISE procedure_call_error;
   END IF;

   
   /* 일괄관리 현송계획 */
   SELECT  holiday_yn 
   INTO	   v_holiday_yn
   FROM    op.t_fn_calendar
   WHERE   std_date = pWorkDate;
   
   v_status := '';
   
   --  작업일자가  토요일,일요일,휴일일 경우에는 일괄관리기 현송예측은 하지 않는다.
   IF	v_holiday_yn = '0' 	then
   
   		v_next_date := OP.fc_fn_mngr_work_date(pWorkDate);     -- 첫번？ 영업일 
   		v_forecast_to := OP.fc_fn_mngr_work_date(v_next_date);   -- 두번？ 영업일 
		
		select to_char(to_date(v_next_date,'yyyymmdd')+1,'yyyymmdd')
		into   v_forecast_fr
		from   dual;
		
		v_work_date := v_forecast_fr;
		
        -- 현송계획구간은  D+2일부터 그 다음 영업일자 전까지 현송계획을 한다.		
		LOOP 
			 sp_MngrForecastEmc( v_work_date,v_status);

		     -- 프로시져 호출에서 에러가 발생
			 IF	v_status  <> 'OK'	   then
				v_err_msg := 'sp_MngrForecastEmc';
				RAISE procedure_call_error;
			 END IF;
			 
			 SELECT	 to_char(to_date(v_work_date,'yyyymmdd') + 1, 'yyyymmdd')
			 INTO    v_work_date
			 FROM    dual;	
	
			 exit when  v_work_date > v_forecast_to;
		END LOOP;
   END IF;

   -- 정상 종료 
   INSERT	INTO	OP.t_cm_batch_result	
			VALUES	(pWorkDate,'sp_DealForecastEmc','OK', SYSDATE, 'SYSTEM');
   COMMIT;
   
   EXCEPTION
     WHEN PROCEDURE_CALL_ERROR THEN
	   	ROLLBACK;  
		INSERT	INTO	OP.t_cm_batch_result	
				VALUES	(pWorkDate,'sp_DealForecastEmc',v_err_msg||' CALL ERROR '||v_status, SYSDATE, 'SYSTEM');
		COMMIT;		
     WHEN OTHERS THEN
	 	ROLLBACK; 	 
		v_err_msg := sqlerrm;
		INSERT	INTO	OP.t_cm_batch_result	
				VALUES	(pWorkDate,'sp_DealForecastEmc',v_err_msg, SYSDATE, 'SYSTEM');
		COMMIT;				   
END sp_DealForecastEmc;




-- 현송계획 실행 문제발생시 SENDPLAN만 생성(NICE)		
PROCEDURE sp_NiceForecastEmc(
   		  pWorkDate 	IN   OP.t_cm_batch_result.job_date%TYPE,        	   		   -- 작업일자	
  		  pStatus    	OUT  OP.t_cm_batch_result.pgm_result%TYPE   	  		)	   -- 결과   
 IS
	v_next_date			OP.t_fn_sendplan.send_date%TYPE ; 							  
	v_dept_cd			OP.t_fn_sendplan.dept_cd%TYPE;
	v_office_cd			OP.t_fn_sendplan.office_cd%TYPE;
	v_site_cd			OP.t_fn_sendplan.site_cd%TYPE;
	v_forecast_amt  	OP.t_fn_sendplan.forecast_amt%TYPE:= 0;
	v_start_date		OP.t_fn_sendplan.send_date%TYPE ;
	v_send_start_gb		op.t_fn_mac_info.send_start_gb%TYPE ;
	v_send_base_amt 	op.t_fn_mac_info.send_base_amt%TYPE ;	
	v_aft_out_rate		op.t_fn_mac_info.aft_out_rate%TYPE := 0;	
	v_err_msg			OP.t_cm_batch_result.pgm_result%TYPE; 	
	v_status			OP.t_cm_batch_result.pgm_result%TYPE; 			
	v_cnt				number;
	v_send_yn			VARCHAR(1); 
	v_send_week_day		VARCHAR(1);
	v_week_day			VARCHAR(1);	
	v_holiday_yn		VARCHAR(1);	
	
	c_org_cd			op.t_fn_sendplan.org_cd%TYPE := '096';	 	-- NICE기관 코드 '
	c_branch_cd			OP.t_fn_sendplan.branch_cd%TYPE := '9600';  -- NICE지점 코드 
	c_next_date			OP.t_fn_sendplan.send_date%TYPE ;
	c_week_day			VARCHAR(1);
	c_send_date 		VARCHAR(8);
	
	procedure_error EXCEPTION ;
	

	-- 사무소를 가지고 온다. ( 이미 현송계획이 완료된 사무소는 제외한다 )
    CURSOR  send_office IS
			SELECT  dept_cd, 
					office_cd
			FROM    OP.t_cm_office a
			WHERE   enable_yn = '1'
			AND		not exists ( SELECT '1'
							   	 FROM   OP.t_fn_sendplan b
								 WHERE  b.send_date > pWorkDate
								 AND    b.org_cd = c_org_cd
								 AND    a.dept_cd 	= b.dept_cd
								 AND    a.office_cd = b.office_cd );
			
			
	-- 입력받은 현송일자의 현송대상 기기를 추출한다.
	CURSOR  send_mac(v_date VARCHAR, v_dept VARCHAR, v_office VARCHAR, v_org_cd varchar)   IS
			SELECT  a.org_cd, 
					a.branch_cd ,
					a.mac_no
			FROM    op.t_fn_mac_info a, op.t_cm_mac b, op.t_cm_site c
			WHERE   a.org_cd = v_org_cd
			AND 	decode(DAYOFWEEK(to_date(v_date,'YYYYMMDD')),
						    '1',a.sun_send_yn,
			 				'2',a.mon_send_yn,'3',a.the_send_yn,
						  	'4',a.wed_send_yn,'5',a.thu_send_yn,
						  	'6',a.fri_send_yn,'7',a.sat_send_yn) = '1'
			AND		a.org_cd 	 = b.org_cd
			AND     a.branch_cd 	 = b.branch_cd
			AND     a.mac_no 	 = b.mac_no
			AND     nvl(b.close_date,'99999999') > v_date
			AND     nvl(b.svc_relay_yn,'0') <> '1' 
			AND     b.org_cd 	 = c.org_cd
			AND     b.branch_cd 	 = c.branch_cd
			AND     b.site_cd 	 = c.site_cd
			AND     c.fdept_cd 	 = v_dept
			AND     c.foffice_cd  = v_office
		UNION
			SELECT 	f.org_cd, 
					f.branch_cd, 
					f.mac_no
			FROM	op.t_fn_send_except f,op.t_cm_mac g, op.t_cm_site h
			WHERE   f.send_date  = v_date
			AND		f.org_cd 	 = v_org_cd
			AND		f.send_yn 	 = '1'		
			AND		f.org_cd 	 = g.org_cd
			AND     f.branch_cd 	 = g.branch_cd
			AND     f.mac_no 	 = g.mac_no
			AND     nvl(g.close_date,'99999999') > v_date
			AND     nvl(g.svc_relay_yn,'0') <> '1' 
			AND     g.org_cd 	 = h.org_cd
			AND     g.branch_cd 	 = h.branch_cd
			AND     g.site_cd 	 = h.site_cd
			AND     h.fdept_cd 	 = v_dept
			AND     h.foffice_cd  = v_office			
		MINUS
			SELECT 	m.org_cd, 
					m.branch_cd, 
					m.mac_no
			FROM	op.t_fn_send_except m,op.t_cm_mac n, op.t_cm_site o
			WHERE   m.send_date  = v_date
			AND		m.org_cd 	 = v_org_cd
			AND		m.send_yn 	 = '0'
			AND		m.org_cd 	 = n.org_cd
			AND     m.branch_cd 	 = n.branch_cd
			AND     m.mac_no 	 = n.mac_no
			AND     nvl(n.svc_relay_yn,'0') <> '1' 
			AND     n.org_cd 	 = o.org_cd
			AND     n.branch_cd 	 = o.branch_cd
			AND     n.site_cd 	 = o.site_cd
			AND     o.fdept_cd 	 = v_dept
			AND     o.foffice_cd  = v_office
		MINUS
			SELECT  org_cd,
					branch_cd,
					mac_no
			FROM    op.t_fn_mac_info
			WHERE   org_cd		= v_org_cd
			AND		
			mon_send_yn = '0'
	   		AND		the_send_yn = '0'
	   		AND		wed_send_yn = '0'
	   		AND		thu_send_yn = '0'
	   		AND		fri_send_yn = '0'
	   		AND		sat_send_yn = '0'
	   		AND		sun_send_yn = '0'   ;

	
		   																													   
BEGIN		 	  								  	
   SELECT   to_char( to_date(pWorkDate,'yyyymmdd')+1,'yyyymmdd')
   INTO     c_next_date
   FROM     dual;
   
 												 
   /* 해당일자의 현송 대상 기기를 추출한다.  */
   FOR     soffice IN send_office LOOP 		
   		   c_send_date := op.fc_fn_nice_work_date( c_next_date, soffice.dept_cd, soffice.office_cd ); 		   		
		   
		   --  현송일자의 요일 확인 
		   SELECT 	dayofweek( to_date(c_send_date,'yyyymmdd')), holiday_yn
		   INTO     c_week_day									 , v_holiday_yn
		   FROM     op.t_fn_calendar
		   WHERE    std_date = c_send_date;
  		    	 												  	   
		   FOR	sendmac IN	send_mac(c_send_date, soffice.dept_cd, soffice.office_cd, c_org_cd) LOOP
		   		v_cnt := 1; 
				v_next_date := c_send_date;
				v_week_day  := c_week_day;

					 												 
		   		LOOP 
					-- 익일을 가지고 온다.
		   			SELECT	to_char(to_date(c_send_date,'yyyymmdd')+v_cnt,'yyyymmdd'),
					 		dayofweek(to_date(c_send_date,'yyyymmdd')+v_cnt)
		   			INTO	v_next_date, 
							v_week_day
		   			FROM   	dual;	 
					
				    -- dbms_output.put_line (sendmac.mac_no);			
					 
					v_send_yn := op.fc_fn_send_yn(sendmac.org_cd, sendmac.branch_cd, sendmac.mac_no, v_next_date);
					-- 다음 현송일자까지 현송예측을 한다. 
					exit when v_send_yn = '1';	

					v_cnt := v_cnt + 1;									 
					
				END LOOP;
		 												 	
				-- 사이트
				SELECT	a.site_cd
				INTO	v_site_cd
				FROM	op.t_cm_mac a
				WHERE   a.org_cd = sendmac.org_cd
				AND		a.branch_cd = sendmac.branch_cd
				AND		a.mac_no = sendmac.mac_no;
				
				--  시간전 사용량 
				SELECT  aft_out_rate, send_start_gb, send_base_amt
				INTO	v_aft_out_rate, v_send_start_gb, v_send_base_amt
				FROM	op.t_fn_mac_info
				WHERE   org_cd = sendmac.org_cd
				AND		branch_cd = sendmac.branch_cd
				AND		mac_no = sendmac.mac_no;
				
				-- 휴일인 경우에는 무조건 오전에 현송을 나간다.
				IF		v_holiday_yn = '1'  Then
						v_send_start_gb := '1';
				END IF;				
				
				  	 												 				 	 												 	
				INSERT INTO OP.t_fn_sendplan  
					   			( send_date,   		  org_cd,   		branch_cd,     		mac_no,        	   dept_cd,     
							  	  office_cd,     	  site_cd,			use_from_date, 		use_to_date,	   forecast_amt,
							  	  send_start_gb,	  send_base_amt,	insert_uid,			insert_date   )
						values  ( c_send_date,		  sendmac.org_cd, 	sendmac.branch_cd,	sendmac.mac_no,	   soffice.dept_cd,
								  soffice.office_cd,  v_site_cd,		c_send_date,		v_next_date,	   0,
								  v_send_start_gb,	  0,				'SYSTEM',			sysdate );				 		  
		   END LOOP;

   END LOOP;
     	   			
   pStatus := 'OK';	
   return;
        
   EXCEPTION
     WHEN PROCEDURE_ERROR THEN
	 	ROLLBACK;
		pStatus := 'sp_NiceForecastEmc :' || v_status ;
		RETURN;
     WHEN OTHERS THEN	   
	 	ROLLBACK;
		pStatus := SQLCODE ;
		RETURN;
		
END sp_NiceForecastEmc;




-- 현송계획 실행 문제발생시 SENDPLAN만 생성(일괄관리)		
PROCEDURE sp_MngrForecastEmc(
   		  pSendDate 	IN   op.t_cm_batch_result.job_date%TYPE,        	   		   -- 현송일자	
  		  pstatus     	OUT  op.t_cm_batch_result.pgm_result%TYPE   	  		)	   -- 결과   
 IS
	v_next_date			OP.t_fn_sendplan.send_date%TYPE ;
	v_status			op.t_cm_batch_result.pgm_result%TYPE; 							  
	v_dept_cd			OP.t_fn_sendplan.dept_cd%TYPE;
	v_office_cd			OP.t_fn_sendplan.office_cd%TYPE;
	v_site_cd			OP.t_fn_sendplan.site_cd%TYPE;
	v_forecast_amt  	OP.t_fn_sendplan.forecast_amt%TYPE:= 0;
	v_start_date		OP.t_fn_sendplan.send_date%TYPE ;
	v_last_date			OP.t_fn_sendplan.send_date%TYPE ;
	v_plan_send_amt		OP.t_fn_sendplan.plan_send_amt%TYPE  := 0;	
	v_send_start_gb		op.t_fn_mac_info.send_start_gb%TYPE ;
	v_aft_out_rate		op.t_fn_mac_info.aft_out_rate%TYPE := 0;	
	v_send_base_amt 	op.t_fn_mac_info.send_base_amt%TYPE ;
	v_err_msg			op.t_cm_batch_result.pgm_result%TYPE; 	
	v_send_week_day		VARCHAR(1);
	v_real_holiday_yn	VARCHAR(1);  
	v_week_day			VARCHAR(1);	
	v_cnt				number;
	v_send_yn			VARCHAR(1); 
	
	c_org_cd			OP.t_fn_sendplan.org_cd%TYPE := '096';	 	 -- NICE기관 코드 '
	c_branch_cd			OP.t_fn_sendplan.branch_cd%TYPE := '9600';   -- NICE지점 코드 
	c_next_date			OP.t_fn_sendplan.send_date%TYPE ;
	c_week_day			VARCHAR(1);
	
	holiday_error		EXCEPTION ;	 
	procedure_error 	EXCEPTION ;
	
	-- 입력받은 현송일자의 현송대상 기기를 추출한다.
	CURSOR  send_mac IS
			SELECT  a.org_cd, a.branch_cd ,a.mac_no
			FROM    op.t_fn_mac_info a, op.t_cm_mac x
			WHERE   a.org_cd <> c_org_cd
			AND     decode(dayofweek(to_date(pSendDate,'YYYYMMDD')),
			 				'2',a.mon_send_yn,'3',a.the_send_yn,
						  	'4',a.wed_send_yn,'5',a.thu_send_yn,
						  	'6',a.fri_send_yn,'7',a.sat_send_yn) = '1'
			AND		a.org_cd    = x.org_cd
			AND 	a.branch_cd  = x.branch_cd
			AND		a.mac_no	= x.mac_no 			
			AND     nvl(x.close_date,'99999999') > pSendDate
			AND     nvl(x.svc_relay_yn, '0') <> '1'										
		UNION
			SELECT 	b.org_cd, b.branch_cd, b.mac_no
			FROM	op.t_fn_send_except b, op.t_cm_mac y
			WHERE   b.send_date =  pSendDate
			AND		b.org_cd 	<> c_org_cd
			AND		b.send_yn 	= '1'		
			AND		b.org_cd    = y.org_cd
			AND 	b.branch_cd  = y.branch_cd
			AND		b.mac_no	= y.mac_no 							
		MINUS
			SELECT 	c.org_cd, c.branch_cd, c.mac_no
			FROM	op.t_fn_send_except c
			WHERE   c.send_date =  pSendDate
			AND		c.org_cd 	<> c_org_cd			
			AND		c.send_yn 	= '0'	
        MINUS
			SELECT  e.org_cd, e.branch_cd, e.mac_no
			FROM    OP.t_fn_sendplan e
			WHERE   e.send_date >= pSendDate
			AND     e.org_cd    <> c_org_cd 
		MINUS
			SELECT  org_cd,
					branch_cd,
					mac_no
			FROM    op.t_fn_mac_info
			WHERE   mon_send_yn = '0'
	   		AND		the_send_yn = '0'
	   		AND		wed_send_yn = '0'
	   		AND		thu_send_yn = '0'
	   		AND		fri_send_yn = '0'
	   		AND		sat_send_yn = '0'
	   		AND		sun_send_yn = '0' 
			AND     org_cd    <> c_org_cd 		;
	
		   																													   
BEGIN		 	  								
	-- 일력받은 일자가 일요일이나 공휴일이면  작업을 종료한다.			     		
   SELECT	real_holiday_yn,
   			dayofweek(to_date(pSendDate,'yyyymmdd'))
   INTO	   	v_real_holiday_yn, 
   			v_week_day
   FROM    	op.t_fn_calendar
   WHERE   	std_date = pSendDate;	 
   						 
   IF	v_real_holiday_yn = '1'	THEN	
   		pStatus := 'OK';	   
		return;
   END IF; 

   v_next_date := pSendDate;
   
   /* 해당일자의 현송 대상 기기를 추출한다.  */
   FOR	sendmac IN	send_mac LOOP
   		v_cnt 		:= 0; 
		v_next_date := pSendDate;
		v_week_day 	:= c_week_day;
		
   		LOOP		
			v_cnt := v_cnt + 1;		
			v_last_date := v_next_date;							 
			
			-- 익일을 가지고 온다.
   			SELECT	to_char(to_date(pSendDate,'yyyymmdd')+v_cnt,'yyyymmdd'),
			 		dayofweek(to_date(pSendDate,'yyyymmdd')+v_cnt)
   			INTO	v_next_date, 
					v_week_day
   			FROM   	dual;	 
							 			 
			v_send_yn := op.fc_fn_send_yn(sendmac.org_cd, sendmac.branch_cd, sendmac.mac_no, v_next_date);
			-- 현송이 있는 날 전일 까지만 현송예측을 한다. 
			exit when v_send_yn = '1';	
			
		END LOOP;
		
		-- 사이트, 부서, 사무소
		SELECT	nvl(min(a.site_cd),''), 
				nvl(min(b.fdept_cd),''), 
				nvl(min(b.foffice_cd),'')
		INTO	v_site_cd, 
				v_dept_cd, 
				v_office_cd
		FROM	op.t_cm_mac a, op.t_cm_site b
		WHERE   a.org_cd = sendmac.org_cd
		AND		a.branch_cd = sendmac.branch_cd
		AND		a.mac_no = sendmac.mac_no
		AND		a.org_cd = b.org_cd
		AND 	a.branch_cd = b.branch_cd
		AND     a.site_cd = b.site_cd;

		--  기초 현송량 
		SELECT  send_base_amt, 
				send_start_gb
		INTO	v_send_base_amt, 
				v_send_start_gb
		FROM	op.t_fn_mac_info
		WHERE   org_cd   = sendmac.org_cd
		AND		branch_cd = sendmac.branch_cd
		AND		mac_no 	 = sendmac.mac_no;
		
		
		INSERT INTO OP.t_fn_sendplan  
			   			( send_date,   		org_cd,   		   branch_cd,     		mac_no,        	   	dept_cd,     
					  	  office_cd,     	site_cd,		   plan_send_amt,		use_from_date, 		use_to_date,	   
						  forecast_amt,	  	send_start_gb,	   send_base_amt,     	insert_uid,		   	insert_date   )
				values  ( pSendDate,		sendmac.org_cd,    sendmac.branch_cd,	sendmac.mac_no,	   	v_dept_cd,
						  v_office_cd,		v_site_cd,	 	   v_plan_send_amt, 	pSendDate,	   	   	v_next_date,	   
						  0,   				v_send_start_gb,   0,  					'SYSTEM',		   	sysdate );				 		  
			 		  
   END LOOP;
			     	   			
   pStatus := 'OK';	   
   return;	  	

   
   EXCEPTION
     WHEN PROCEDURE_ERROR THEN
	    ROLLBACK;
		pStatus := 'sp_MngrForecastEmc :' || v_status ;
		RETURN;
     WHEN OTHERS THEN	    
	 	ROLLBACK;
		pStatus := 'sp_MngrForecastEmc :' || SQLERRM ;
		RETURN;
		
END sp_MngrForecastEmc;



END PKG_FN_FORECAST;

CREATE OR REPLACE PACKAGE BODY OP.PKG_FN_NICEDEMAND AS

  /* 당일 청구액 계산 */
  PROCEDURE SP_CREATEDEMANDINFO(PDEMANDDATE IN VARCHAR DEFAULT NULL) IS
  
    CURSOR VORGCUR IS
      SELECT CAL.ORG_CD,
             CAL.START_DATE,
             CAL.END_DATE,
             CAL.DEMAND_DAY,
             INF.NICE_AMT_UNIT
      FROM OP.T_FN_DEMAND_CALENDAR CAL,
           OP.T_FN_ORG_INFO        INF
      WHERE CAL.STD_DATE = NVL(PDEMANDDATE, TO_CHAR(SYSDATE, 'YYYYMMDD'))
            AND CAL.ORG_CD = INF.ORG_CD
            AND CAL.HOLIDAY_YN = '0';
  
    VMACCOUNT       OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE := 0; -- 기기대수
    VPREMACCOUNT    OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE := 0; -- 전영업일 기기대수
    VOPERAMT        OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 청구대상일 일자금
    VPRESTARTAMT    OP.T_FN_NICE_DEMAND.YST_START_AMT%TYPE := 0; -- 전영업일초
    VPREAMT         OP.T_FN_NICE_DEMAND.YST_AMT%TYPE := 0; -- 전일
    VCURAMT         OP.T_FN_NICE_DEMAND.TMR_AMT%TYPE := 0; -- 당일
    VPRERESULTAMT   OP.T_FN_NICE_DEMAND.YST_RESULT_AMT%TYPE := 0; -- 전일실적 (출금)
    VPREINRESULTAMT OP.T_FN_NICE_DEMAND.YST_RESULT_AMT%TYPE := 0; -- 전일입금실적
  
    VDEALCOUNT   OP.T_FN_NICE_DEMAND.DEAL_CNT%TYPE := 0; -- 처리건수(출금)
    VDEALINCOUNT OP.T_FN_NICE_DEMAND.DEAL_CNT%TYPE := 0; -- 처리건수(입금)
  
    VRETURNAMT OP.T_FN_NICE_DEMAND.RETURN_AMT%TYPE := 0; -- 반환
    VDEMANDAMT OP.T_FN_NICE_DEMAND.DEMAND_AMT%TYPE := 0; -- 청구자금
    VINVENTAMT OP.T_FN_NICE_DEMAND.INVENT_AMT%TYPE := 0; -- 재고금액
  
    VUNCOMPLETEAMT OP.T_FN_NICE_DEMAND.UNCOMPLETE_AMT%TYPE := 0; -- 미완료 금액
    VPREENDAMT     OP.T_FN_NICE_DEMAND.PRE_AMT%TYPE := 0; -- 전잔 (운영자금 현황용)
    VENDAMT        OP.T_FN_NICE_DEMAND.END_AMT%TYPE := 0; -- 말잔 (운영자금 현황용)
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
        PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
      DELETE OP.T_FN_NICE_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
      DELETE OP.T_FN_NICE_DETAIL_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
    
      FOR VREC IN VORGCUR LOOP
      
        /* 기기대수 -- 수정 대상 아님.*/
        VMACCOUNT := SF_GETMACCOUNT(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의1 : ' || VREC.ORG_CD || ',' ||
                             VMACCOUNT);
      
        /* 전영업일 기기대수 --수정 대상 아님*/
        VPREMACCOUNT := SF_GETPREMACCOUNT(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의2 : ' || VREC.ORG_CD || ',' ||
                             VPREMACCOUNT);
        /* 일자금  -- hossong 수정 대상- t_fn_nice_monthly_oper는 문제가 되지 않는다고 함.*/
        VOPERAMT := SF_GETOPERAMT(VREC.ORG_CD,
                                  PDEMANDDATE,
                                  VREC.DEMAND_DAY,
                                  VMACCOUNT);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의3 : ' || VREC.ORG_CD || ',' ||
                             VREC.DEMAND_DAY || ',' || VMACCOUNT);
        /* 전영업일초 (전청구일 재고) -- 기존 반영된 이후의 문제이기 때문에 수정대상이 아님.*/
        VPRESTARTAMT := SF_GETPRESTARTAMT(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의4 : ' || VREC.ORG_CD || ',' ||
                             VPRESTARTAMT);
        /* 당일 (1일치 일자금) --hossong 수정대상 결국 sf_getOperAmt */
        VCURAMT := SF_GETCURAMT(VREC.ORG_CD, PDEMANDDATE, VPREMACCOUNT);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의5 : ' || VREC.ORG_CD || ',' ||
                             VPREMACCOUNT || ',' || VCURAMT);
        /* 전일 (전영업일초:재고 - 당일일자금) */
        VPREAMT := VPRESTARTAMT - VCURAMT;
      
        /* 전일실적, 거래건수 -- hossong t_fn_nice_org_dsum에서 전일실적, 거래건수를 산정하는것이기 때문에 입금실적을 따로 계산해야함.*/
      
        /* hossong - vPreResultAmt:전일거래금액, vDealCount:전일거래건수*/
        SP_SETORGPRERESULT(VREC.ORG_CD,
                           PDEMANDDATE,
                           VPRERESULTAMT,
                           VDEALCOUNT,
                           VPREINRESULTAMT,
                           VDEALINCOUNT);
      
        /* 반환분 (전일 - 전일실적(출금) + 전일입금실적) */
        VRETURNAMT := VPREAMT - VPRERESULTAMT + VPREINRESULTAMT;
      
        /*-----------------------------------------------------------------------*
         * 삼성생명일 경우 예외처리 
           . 전영업일초 - 전일실적 
                <  2500만 : 청구금액 = 5000만 - (전영업일초 - 전일실적)
                  >= 2500만 : 청구금액 = 0
        *-----------------------------------------------------------------------*/
        IF VREC.ORG_CD = CSAMSUNGLIFE THEN
          IF VPRESTARTAMT - VPRERESULTAMT < CSLSTDINVENTAMT THEN
            VDEMANDAMT := CSLMAXINVENTAMT - (VPRESTARTAMT - VPRERESULTAMT);
          ELSE
            VDEMANDAMT := 0;
          END IF;
        ELSE
          /*청구금액 = 일자금 - 반환금(입금분반영되어있음)*/
          VDEMANDAMT := VOPERAMT - VRETURNAMT;
        
          -- 청구금액이 마이너스이면,
          IF VDEMANDAMT < 0 THEN
            -- 반환금대상이 아닌 경우 청구금액 = 0
            IF SF_GETORGRETURNYN(VREC.ORG_CD) = '0' THEN
              VDEMANDAMT := 0;
            END IF;
          ELSE
            -- 청구금액이 플러스이면, 금전단위에 따라 올림.      
            VDEMANDAMT := CEIL(VDEMANDAMT / VREC.NICE_AMT_UNIT) *
                          VREC.NICE_AMT_UNIT;
          END IF;
        END IF;
      
        -- 청구금액이 마이너스일 때, 반환금대상이 아니면, 청구금액 = 0 (재고반영)
        IF VDEMANDAMT < 0 AND SF_GETORGRETURNYN(VREC.ORG_CD) = '0' THEN
          VDEMANDAMT := 0;
        END IF;
      
        /* 재고금액 (전영업일초:재고 - 전일실적(출금) + 청구자금+ 전일입금실적) */
        VINVENTAMT := VPRESTARTAMT - VPRERESULTAMT + VDEMANDAMT +
                      VPREINRESULTAMT;
      
        /* 전잔, 말잔 (나이스 운영자금 현황용) 계산 --hossong 기 발생된 내역이기때문에 수정사항이 없어도 될것으로 보임.*/
        /* hossong   vEndAmt := vPreEndAmt(전잔) + vPreDemandAmt(전청구액) - pPreResultAmt(vPreResultAmt:전일거래금액) */
        SP_SETENDAMT(VREC.ORG_CD,
                     PDEMANDDATE,
                     VPRERESULTAMT,
                     VPREENDAMT,
                     VENDAMT);
      
        /* 미완료 금액 */
        VUNCOMPLETEAMT := SF_GETUNCOMPLETEAMT(VREC.ORG_CD,
                                              VREC.START_DATE,
                                              VREC.END_DATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의6 : ' || VREC.ORG_CD || ',' ||
                             VREC.START_DATE || ',' || VREC.END_DATE || ',' ||
                             VUNCOMPLETEAMT);
      
        INSERT INTO OP.T_FN_NICE_DEMAND
          (DEMAND_DATE,
           ORG_CD,
           START_DATE,
           END_DATE,
           USE_DAYS,
           MAC_CNT,
           OPER_AMT,
           YST_START_AMT,
           YST_AMT,
           TMR_AMT,
           YST_RESULT_AMT,
           YST_IN_RESULT_AMT, -- hossong 추가(전일입금실적)
           RETURN_AMT,
           DEMAND_AMT,
           INVENT_AMT,
           DEAL_CNT,
           DEAL_IN_CNT, -- hossong 추가(전일입금건수)
           UNCOMPLETE_AMT,
           PRE_AMT,
           END_AMT,
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE)
        VALUES
          (PDEMANDDATE,
           VREC.ORG_CD,
           VREC.START_DATE,
           VREC.END_DATE,
           VREC.DEMAND_DAY,
           VMACCOUNT,
           VOPERAMT,
           VPRESTARTAMT,
           VPREAMT,
           VCURAMT,
           VPRERESULTAMT,
           VPREINRESULTAMT, -- hossong 추가
           VRETURNAMT,
           VDEMANDAMT,
           VINVENTAMT,
           VDEALCOUNT,
           VDEALINCOUNT, -- hossong 추가
           VUNCOMPLETEAMT,
           VPREENDAMT,
           VENDAMT,
           'SYSTEM',
           SYSDATE,
           'SYSTEM',
           SYSDATE);
      
        IF VREC.ORG_CD = '081' THEN
          /* 나이스  일일 청구관련 집계 테이블에 업데이트 하기 2004.05.04 이영재  현재 하나은행만 적용중*/
          INSERT INTO OP.T_FN_NICE_DETAIL_DEMAND
            (DEMAND_DATE,
             DETAIL_DATE,
             ORG_CD,
             HOLIDAY_YN,
             MAC_CNT,
             RESPECT_CNT,
             AVG_CNT,
             CNT_RATE,
             MAX_RESPECT_AMT,
             AVG_AMT,
             AMT_RATE,
             DEMAND_DAY_CNT,
             OPER_AMT,
             INSERT_UID,
             INSERT_DATE,
             UPDATE_UID,
             UPDATE_DATE)
            SELECT PDEMANDDATE,
                   FINAL.STD_DATE,
                   VREC.ORG_CD,
                   FINAL.HOLIDAY_YN,
                   FINAL.MAC_CNT,
                   FINAL.RESPECTCNT,
                   FINAL.AVG_CNT,
                   FINAL.CNTRATE,
                   FINAL.RESPECTAMT,
                   FINAL.AVG_AMT,
                   FINAL.AMTRATE,
                   FINAL.DEMANDCNT,
                   ROUND(FINAL.MAC_CNT * FINAL.RESPECTCNT *
                         FINAL.RESPECTAMT * FINAL.DEMANDCNT,
                         -1) OPERAMT,
                   'SYSTEM',
                   SYSDATE,
                   'SYSTEM',
                   SYSDATE
            FROM (SELECT RESULT.STD_DATE --구분일자
                        ,
                         RESULT.HOLIDAY_YN --휴일여부
                        ,
                         RESULT.MAC_CNT --가동 기기대수(A)
                        ,
                         RESULT.AVG_CNT * ((100 + RESULT.CNTRATE) / 100) RESPECTCNT --당월최대일일 예상이용건수(B)
                        ,
                         RESULT.AVG_CNT --평균일일 이용건수(a)
                        ,
                         RESULT.CNTRATE --이용건수 여유율(b)
                        ,
                         (RESULT.AVG_AMT / 1000) *
                         ((100 + RESULT.AMTRATE) / 100) RESPECTAMT --당월최대 1회 예상인출액(C)
                        ,
                         RESULT.AVG_AMT / 1000 AVG_AMT --평균1회 인출액(c)
                        ,
                         RESULT.AMTRATE --인출액여유율(d)
                        ,
                         RESULT.DEMANDCNT --소요자금 일수(D)
                  FROM (SELECT MAIN.STD_DATE,
                               HOLIDAY_YN,
                               DEMAND.MAC_CNT,
                               MTH.AVG_CNT,
                               DECODE(HOLIDAY_YN,
                                      '0',
                                      ORD_CNT_RATE,
                                      '1',
                                      WKD_CNT_RATE,
                                      0) CNTRATE,
                               MTH.AVG_AMT,
                               DECODE(HOLIDAY_YN,
                                      '0',
                                      ORD_AMT_RATE,
                                      '1',
                                      WKD_AMT_RATE,
                                      0) AMTRATE,
                               1 DEMANDCNT
                        FROM (SELECT STD_DATE,
                                     HOLIDAY_YN
                              FROM OP.T_FN_CALENDAR
                              WHERE (SELECT START_DATE
                                     FROM OP.T_FN_NICE_DEMAND
                                     WHERE DEMAND_DATE = PDEMANDDATE
                                           AND ORG_CD = VREC.ORG_CD) <=
                                    STD_DATE
                                    AND (SELECT END_DATE
                                         FROM OP.T_FN_NICE_DEMAND
                                         WHERE DEMAND_DATE = PDEMANDDATE
                                               AND ORG_CD = VREC.ORG_CD) >=
                                    STD_DATE) MAIN, -- 청구일사이의 모든 일자 가져오면서 휴일여부 값 가져오기
                             (SELECT *
                              FROM OP.T_FN_NICE_DEMAND
                              WHERE DEMAND_DATE = PDEMANDDATE
                                    AND ORG_CD = VREC.ORG_CD) DEMAND,
                             (SELECT *
                              FROM OP.T_FN_NICE_MONTHLY_OPER
                              WHERE START_DATE <= PDEMANDDATE
                                    AND END_DATE >= PDEMANDDATE
                                    AND ORG_CD = VREC.ORG_CD) MTH,
                             (SELECT *
                              FROM OP.T_FN_ORG_SPARE_RATE
                              WHERE ORG_CD = VREC.ORG_CD
                                    AND PDEMANDDATE BETWEEN START_DATE AND
                                    END_DATE) SPR) RESULT) FINAL;
        END IF;
      
      /* 여기까지 */
      
      END LOOP;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
    op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_NiceDemand.sp_createDemandInfo',
                                       VRESULT,
                                       PDEMANDDATE);
    DBMS_OUTPUT.PUT_LINE(VRESULT);
  END SP_CREATEDEMANDINFO;

  /* 기기대수 계산 */
  FUNCTION SF_GETMACCOUNT(PORGCODE    OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                          PDEMANDDATE OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
    VMACCOUNT OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE;
  BEGIN
  
    SELECT DECODE(INF.NICE_MAC_FIX_YN, '1', MTH.MAC_CNT, '0', MAC.MAC_CNT)
    INTO VMACCOUNT
    FROM OP.T_FN_NICE_MONTHLY_OPER MTH,
         OP.T_FN_ORG_INFO          INF,
         OP.T_FN_NICE_MAC_CNT      MAC
    WHERE MTH.ORG_CD = PORGCODE
          AND MTH.ORG_CD = INF.ORG_CD
          AND INF.ORG_CD = MAC.ORG_CD
          AND MAC.MAC_DATE =
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND MTH.START_DATE <= PDEMANDDATE
          AND MTH.END_DATE >= PDEMANDDATE;
  
    RETURN VMACCOUNT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
    
  END SF_GETMACCOUNT;

  /* 전영업일 기기대수 계산 */
  FUNCTION SF_GETPREMACCOUNT(PORGCODE    OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                             PDEMANDDATE OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
    VPREACTDATE  OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE; -- 전영업일
    VPREMACCOUNT OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE; -- 전영업일 기기대수
  BEGIN
  
    VPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE);
  
    SELECT DECODE(INF.NICE_MAC_FIX_YN, '1', MTH.MAC_CNT, '0', MAC.MAC_CNT)
    INTO VPREMACCOUNT
    FROM OP.T_FN_NICE_MONTHLY_OPER MTH,
         OP.T_FN_ORG_INFO          INF,
         OP.T_FN_NICE_MAC_CNT      MAC
    WHERE MTH.ORG_CD = PORGCODE
          AND MTH.ORG_CD = INF.ORG_CD
          AND INF.ORG_CD = MAC.ORG_CD
          AND MAC.MAC_DATE =
          TO_CHAR(TO_DATE(VPREACTDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND MTH.START_DATE <= VPREACTDATE
          AND MTH.END_DATE >= VPREACTDATE;
  
    RETURN VPREMACCOUNT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
    
  END SF_GETPREMACCOUNT;

  /* 일자금 계산 */
  /* hossong 일자금을 산정하는 곳으로 이쪽에서 입금반영분을 계산에서 일자금 산정시 계산이 들어가야할 것으로 보임.*/
  FUNCTION SF_GETOPERAMT(PORGCODE    OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                         PDEMANDDATE OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE,
                         PDEMANDDAY  OP.T_FN_DEMAND_CALENDAR.DEMAND_DAY%TYPE,
                         PMACCOUNT   OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE)
    RETURN NUMBER IS
  
    VOPERAMT    OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0;
    VOPERAMTWKD OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 평일 일자금 변수
    VOPERAMTWED OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 주말 일자금 변수
    VAMTRATE    NUMBER := 0; -- 평일 금액 여유율
    VCNTRATE    NUMBER := 0; -- 평일 건수 여유울
    VAMTRATEWED NUMBER := 0; -- 주말 금액 여유율
    VCNTRATEWED NUMBER := 0; -- 주말 건수 여유울
    VSTARTDATE  VARCHAR(8);
    VENDDATE    VARCHAR(8);
    VWKDCNT     NUMBER := 0; --주중일수
    VWEDCNT     NUMBER := 0; --주말일수
    VOFFCNT     NUMBER := 0; -- 휴일일수
  
    VLIMITAMTPOST NUMBER := 500000000;
  
  BEGIN
  
    /**********************************************************
         -- 테스트용... (일자금 직접입력후 테스트)
       SELECT oper_amt
         INTO vOperAmt
         FROM t_fn_nice_demand_tmp
        WHERE demand_date = pDemandDate
          AND org_cd      = pOrgCode;
    **********************************************************/
  
    /*************************************************************************************
      청구일수 : 1인 경우     => 평일 여유율반영 계산
                 2이상인 경우 => (평일여유율 + (청구일수 - 1) * 주말여유율) / 청구일수  
    ************************************************************************************/
  
    /*hossong t_fn_nice_monthly_oper에서 건당금액,건당대수, 기기대수를 가지고 t_fn_org_spare_rate를 구한다.  
      입금과 관련된 사항을 t_fn_nice_monthly_oper에 담아서 일자금 산정 금액을 추출하는데 사용해야함.
    */
  
    SELECT RAT.ORD_CNT_RATE,
           RAT.ORD_AMT_RATE,
           RAT.WKD_CNT_RATE,
           RAT.WKD_AMT_RATE
    INTO VCNTRATE,
         VAMTRATE,
         VCNTRATEWED,
         VAMTRATEWED
    FROM OP.T_FN_ORG_SPARE_RATE RAT
    WHERE RAT.ORG_CD = PORGCODE
          AND PDEMANDDATE BETWEEN RAT.START_DATE AND RAT.END_DATE;
  
    /* 실제적용 여유율 = 1 + 여유율값 / 100 */
    VCNTRATE    := (100 + NVL(VCNTRATE, 0)) / 100;
    VAMTRATE    := (100 + NVL(VAMTRATE, 0)) / 100;
    VCNTRATEWED := (100 + NVL(VCNTRATEWED, 0)) / 100;
    VAMTRATEWED := (100 + NVL(VAMTRATEWED, 0)) / 100;
  
    /* 국민은행 일자금 산정을 위한 시작, 종류일자 산정*/
    SELECT CAL.START_DATE,
           CAL.END_DATE
    INTO VSTARTDATE,
         VENDDATE
    FROM OP.T_FN_DEMAND_CALENDAR CAL,
         OP.T_FN_ORG_INFO        INF
    WHERE CAL.STD_DATE = PDEMANDDATE
          AND CAL.ORG_CD = INF.ORG_CD
          AND CAL.ORG_CD = PORGCODE
          AND CAL.HOLIDAY_YN = '0';
  
    SELECT A.WEEK WKD, -- 주중
           C.WEEK WED, -- 주말
           B.WEEK OFFD -- 공휴일
    INTO VWKDCNT,
         VWEDCNT,
         VOFFCNT
    FROM (SELECT COUNT(WEEK) WEEK
          FROM (SELECT STD_DATE,
                       op.SF_GETWEEKDAY(STD_DATE) WEEK,
                       WEEKEND_YN,
                       HOLIDAY_YN,
                       REAL_HOLIDAY_YN
                FROM OP.T_FN_CALENDAR
                WHERE STD_DATE >= VSTARTDATE
                      AND STD_DATE <= VENDDATE)
          WHERE WEEK IN ('2', '3', '4', '5', '6')
                AND HOLIDAY_YN = '0') A,
         
         (SELECT COUNT(WEEK) WEEK
          FROM (SELECT STD_DATE,
                       op.SF_GETWEEKDAY(STD_DATE) WEEK,
                       WEEKEND_YN,
                       HOLIDAY_YN,
                       REAL_HOLIDAY_YN
                FROM OP.T_FN_CALENDAR
                WHERE STD_DATE >= VSTARTDATE
                      AND STD_DATE <= VENDDATE)
          WHERE WEEK IN ('2', '3', '4', '5', '6')
                AND HOLIDAY_YN = '1') B,
         
         (SELECT COUNT(WEEK) WEEK
          FROM (SELECT STD_DATE,
                       op.SF_GETWEEKDAY(STD_DATE) WEEK,
                       WEEKEND_YN,
                       HOLIDAY_YN,
                       REAL_HOLIDAY_YN
                FROM OP.T_FN_CALENDAR
                WHERE STD_DATE >= VSTARTDATE
                      AND STD_DATE <= VENDDATE)
          WHERE WEEK IN ('1', '7')) C;
  
    /*************************************************************************************** 
      1. 일반기관
         . 일자금 = 건당출금액 * 금액여유율 * 평균건수 * 건수여유율 * 기기대수 * 청구일수
       . 일자금은 만원단위 반올림
      2. 우체국 (월실적 기준) 
         . 일자금 = 전월일평균실적 * 전전월대비증감율 * 여유율 * 청구일수
       . 일자금은 백만원 단위 절사금액
    ***************************************************************************************/
    /*
    IF pOrgCode = cPostOfficeOrgCode THEN
        SELECT TRUNC(day_amt  * (inc_rate / 100) * vAmtRate, -cPostOfficeAmtUnit) * 1  -- 평일 하루치 일자금 산정
        INTO vOperAmtWkd
          FROM t_fn_nice_monthly_oper amt
       WHERE amt.org_cd        = pOrgCode
         AND pDemandDate BETWEEN amt.start_date
                             AND amt.end_date;
            
      SELECT TRUNC(day_amt  * (inc_rate / 100) * vAmtRateWed, -cPostOfficeAmtUnit) * 1  -- 주말 하루치 일자금 산정
        INTO vOperAmtWed
          FROM t_fn_nice_monthly_oper amt
       WHERE amt.org_cd        = pOrgCode
         AND pDemandDate BETWEEN amt.start_date
                             AND amt.end_date;
      */
  
    IF PORGCODE = CPOSTOFFICEORGCODE THEN
      SELECT CASE
               WHEN (TRUNC(PRE_DAY_AMT * VAMTRATE, -CPOSTOFFICEAMTUNIT) * 1) >=
                    VLIMITAMTPOST THEN
                VLIMITAMTPOST
               ELSE
                (TRUNC(PRE_DAY_AMT * VAMTRATE, -CPOSTOFFICEAMTUNIT) * 1)
             END OPERAMTWKD -- 평일 하루치 일자금 산정
      INTO VOPERAMTWKD
      FROM OP.T_FN_NICE_MONTHLY_OPER AMT
      WHERE AMT.ORG_CD = PORGCODE
            AND PDEMANDDATE BETWEEN AMT.START_DATE AND AMT.END_DATE;
    
      SELECT CASE
               WHEN (TRUNC(PRE_DAY_AMT * VAMTRATEWED, -CPOSTOFFICEAMTUNIT) * 1) >=
                    VLIMITAMTPOST THEN
                VLIMITAMTPOST
               ELSE
                (TRUNC(PRE_DAY_AMT * VAMTRATEWED, -CPOSTOFFICEAMTUNIT) * 1)
             END OPERAMTWED -- 평일 하루치 일자금 산정
      INTO VOPERAMTWED
      FROM OP.T_FN_NICE_MONTHLY_OPER AMT
      WHERE AMT.ORG_CD = PORGCODE
            AND PDEMANDDATE BETWEEN AMT.START_DATE AND AMT.END_DATE;
    
      --#################################################################################################                               
      -- 국민은행 관련 일자금 산출     --주중/주말값은 추후에 적용예정 hossong:20051205
      --#################################################################################################
    ELSIF PORGCODE = CKBOFFICEORGCODE THEN
      /*    
          select ROUND(cKBWkdAmt/1000 * vAmtRate * vWkdCnt , -cGeneralAmtUnit ) + -- 주중
                 ROUND(cKBWedAmt/1000 * vAmtRateWed * vWedCnt , -cGeneralAmtUnit ) + -- 주말
                 ROUND(cKBWedAmt/1000 * cKBOffRate * vOffCnt , -cGeneralAmtUnit )  --  주중공휴일
          into vOperAmt
          from dual;
      */
      SELECT ROUND(CKBWKDAMT / 1000 * VWKDCNT, -CGENERALAMTUNIT) + -- 주중
             ROUND(CKBWEDAMT / 1000 * VWEDCNT, -CGENERALAMTUNIT) + -- 주말
             ROUND(CKBWEDAMT / 1000 * (100 + CKBOFFRATE) / 100 * VOFFCNT,
                   -CGENERALAMTUNIT) --  주중공휴일
      INTO VOPERAMT
      FROM DUAL;
      --#################################################################################################     
    ELSE
      SELECT ROUND(NVL((NVL(NVL(AMT.AVG_AMT / 1000, 0) * VAMTRATE, 0)) *
                       (NVL(AMT.AVG_CNT * VCNTRATE, 0)) * PMACCOUNT * 1,
                       0),
                   -CGENERALAMTUNIT) -- 평일 하루치 일자금 산정
      INTO VOPERAMTWKD
      FROM OP.T_FN_NICE_MONTHLY_OPER AMT
      WHERE AMT.ORG_CD = PORGCODE
            AND PDEMANDDATE BETWEEN AMT.START_DATE AND AMT.END_DATE;
    
      SELECT ROUND(NVL((NVL(NVL(AMT.AVG_AMT / 1000, 0) * VAMTRATEWED, 0)) *
                       (NVL(AMT.AVG_CNT * VCNTRATEWED, 0)) * PMACCOUNT * 1,
                       0),
                   -CGENERALAMTUNIT) -- 주말 하루치 일자금 산정
      INTO VOPERAMTWED
      FROM OP.T_FN_NICE_MONTHLY_OPER AMT
      WHERE AMT.ORG_CD = PORGCODE
            AND PDEMANDDATE BETWEEN AMT.START_DATE AND AMT.END_DATE;
    END IF;
  
    -- ************************************************************************************************
    -- 국민은행 당일조정을 위한 추가   -- 정희성 
    -- ************************************************************************************************   
    IF PORGCODE = CKBOFFICEORGCODE THEN
      IF PDEMANDDAY > 1 THEN
        VOPERAMT := VOPERAMT;
      ELSE
        VOPERAMT := ROUND(CKBWKDAMT / 1000 * VWKDCNT, -CGENERALAMTUNIT);
      END IF;
    END IF;
    -- ************************************************************************************************
  
    IF PORGCODE <> CKBOFFICEORGCODE THEN
      IF PDEMANDDAY > 1 THEN
        VOPERAMT := VOPERAMTWKD + (VOPERAMTWED * (PDEMANDDAY - 1));
      ELSE
        VOPERAMT := VOPERAMTWKD;
      END IF;
    END IF;
  
    /* 만원단위에서 반올림 */
    --dbms_output.put_line(pOrgCode||','||vOperAmt||','||pDemandDay||','||vCntRate||','||vAmtRate);
    IF PORGCODE = CPOSTOFFICEORGCODE THEN
      RETURN VOPERAMT;
    ELSE
      RETURN VOPERAMT * 1000;
    END IF;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
    
  END SF_GETOPERAMT;

  /* 기관 전영업일초 계산 (전청구일의 재고) */
  FUNCTION SF_GETPRESTARTAMT(PORGCODE    OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                             PDEMANDDATE OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
  
    VPRESTARTAMT OP.T_FN_NICE_DEMAND.YST_START_AMT%TYPE;
  
  BEGIN
    SELECT NVL(INVENT_AMT, 0) /*전청구금액의 재고 금액*/
    INTO VPRESTARTAMT
    FROM OP.T_FN_NICE_DEMAND
    WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
          AND ORG_CD = PORGCODE;
  
    RETURN VPRESTARTAMT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETPRESTARTAMT;

  /* 당일 계산 (직접입력 금액이 없으면 당일 일자금) */
  FUNCTION SF_GETCURAMT(PORGCODE    OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                        PDEMANDDATE OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE,
                        PMACCOUNT   OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE)
    RETURN NUMBER IS
  
    VPREACTDATE  OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE; -- 전영업일
    VPRESTARTDAY OP.T_FN_DEMAND_CALENDAR.INVENT_DAY%TYPE := 2; -- 전영업일초 일수
    VPREDAY      OP.T_FN_DEMAND_CALENDAR.INVENT_DAY%TYPE := 1; -- 전일 일수
    VDEMANDDAY   OP.T_FN_DEMAND_CALENDAR.DEMAND_DAY%TYPE := 1; -- 청구일수
  
  BEGIN
  
    VPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE);
  
    /*****************************************************************
      전영업일초 일수 = 전영업일의 전일 ~ 전영업일의 재고일수 합계
    *****************************************************************/
    SELECT SUM(INVENT_DAY)
    INTO VPRESTARTDAY
    FROM OP.T_FN_DEMAND_CALENDAR
    WHERE STD_DATE BETWEEN
          op.SF_GETBEFOREPREACTDATE(PDEMANDDATE) AND VPREACTDATE
          AND ORG_CD = PORGCODE;
  
    /*****************************************************************
      전일일수 = 전영업일 ~ 전일의 일수 (전일 - 전영업일 + 1) 
    *****************************************************************/
    VPREDAY := TO_DATE(op.SF_GETBEFOREDATE(PDEMANDDATE),
                       'YYYYMMDD') - TO_DATE(VPREACTDATE, 'YYYYMMDD') + 1;
  
    /****************************************************** 
          . 청구일수 = 전영업일초 일수 - 전일 일수
        . 청구일수 < 0 : 청구일수 = 1
    ******************************************************/
    VDEMANDDAY := VPRESTARTDAY - VPREDAY;
    IF VDEMANDDAY <= 0 THEN
      VDEMANDDAY := 1;
    END IF;
  
    -- 전영업일의 운영자금                     
    RETURN SF_GETOPERAMT(PORGCODE, VPREACTDATE, VDEMANDDAY, PMACCOUNT);
  END SF_GETCURAMT;

  /* 기관별 전일실적, 거래건수 계산 -- hossong 현재 전일 거래에 대한 실적을 구할때 deal_type =0 출금거래만 실적을 집계하고 있음. 입금거래도 필요함.*/
  -- 대상일 : 전청구일 ~ 전일
  -- 전일지급금액, 전일거래건수
  PROCEDURE SP_SETORGPRERESULT(PORGCODE        IN OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                               PDEMANDDATE     IN OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE,
                               VPRERESULTAMT   OUT OP.T_FN_NICE_DEMAND.YST_RESULT_AMT%TYPE,
                               VDEALCOUNT      OUT OP.T_FN_NICE_DEMAND.DEAL_CNT%TYPE,
                               VPREINRESULTAMT OUT OP.T_FN_NICE_DEMAND.YST_RESULT_AMT%TYPE,
                               VDEALINCOUNT    OUT OP.T_FN_NICE_DEMAND.DEAL_CNT%TYPE) IS
    /*hossong 입금수정*/
  BEGIN
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0),
           NVL(SUM(TIME_DEAL_CNT), 0) + NVL(SUM(OT_DEAL_CNT), 0) +
           NVL(SUM(NIGHT_DEAL_CNT), 0)
    INTO VPRERESULTAMT,
         VDEALCOUNT
    FROM OP.T_FN_NICE_ORG_DSUM
    WHERE ORG_CD = PORGCODE
          AND DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '0';
  
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0),
           NVL(SUM(TIME_DEAL_CNT), 0) + NVL(SUM(OT_DEAL_CNT), 0) +
           NVL(SUM(NIGHT_DEAL_CNT), 0)
    INTO VPREINRESULTAMT,
         VDEALINCOUNT
    FROM OP.T_FN_NICE_ORG_DSUM
    WHERE ORG_CD = PORGCODE
          AND DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '1';
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END SP_SETORGPRERESULT;

  /* 전잔, 말잔 계산 (운영자금 현황용) */
  -- 대상일 : 전청구일 ~ 전일
  PROCEDURE SP_SETENDAMT(PORGCODE      IN OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                         PDEMANDDATE   IN OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE,
                         PPRERESULTAMT IN OP.T_FN_NICE_DEMAND.YST_RESULT_AMT%TYPE,
                         VPREENDAMT    OUT OP.T_FN_NICE_DEMAND.PRE_AMT%TYPE,
                         VENDAMT       OUT OP.T_FN_NICE_DEMAND.END_AMT%TYPE) IS
    VPREDEMANDAMT OP.T_FN_NICE_DEMAND.DEMAND_AMT%TYPE := 0;
  BEGIN
    SELECT NVL(END_AMT, 0),
           NVL(DEMAND_AMT, 0)
    INTO VPREENDAMT,
         VPREDEMANDAMT
    FROM OP.T_FN_NICE_DEMAND
    WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
          AND ORG_CD = PORGCODE;
  
    VENDAMT := VPREENDAMT + VPREDEMANDAMT - PPRERESULTAMT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      VPREENDAMT := 0;
      VENDAMT    := 0;
  END SP_SETENDAMT;

  /* 미완료금액 계산 */
  -- 전영업일 ~ 전일
  FUNCTION SF_GETUNCOMPLETEAMT(PORGCODE   IN OP.T_FN_NICE_DEMAND.ORG_CD%TYPE,
                               PSTARTDATE IN OP.T_FN_NICE_DEMAND.START_DATE%TYPE,
                               PENDDATE   IN OP.T_FN_NICE_DEMAND.END_DATE%TYPE)
    RETURN NUMBER IS
    VUNCOMPLETEAMT OP.T_FN_NICE_DEMAND.UNCOMPLETE_AMT%TYPE := 0;
  BEGIN
  
    SELECT NVL(SUM(DEAL_AMT), 0)
    INTO VUNCOMPLETEAMT
    FROM OP.T_FN_NOTEND
    WHERE ORG_CD = PORGCODE
          AND NOTEND_DATE BETWEEN PSTARTDATE AND PENDDATE
          AND OWNER_ORG_CD != CNICEORGCODE;
  
    RETURN VUNCOMPLETEAMT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETUNCOMPLETEAMT;

  /* 기관 반환금 대상여부(청구자금이 마이너스일 때) */
  FUNCTION SF_GETORGRETURNYN(PORGCODE IN OP.T_CM_ORG.ORG_CD%TYPE)
    RETURN VARCHAR IS
    VRETURNYN OP.T_CM_ORG.RETURN_YN%TYPE;
  BEGIN
  
    SELECT RETURN_YN INTO VRETURNYN FROM OP.T_CM_ORG WHERE ORG_CD = PORGCODE;
  
    RETURN VRETURNYN;
  
  END SF_GETORGRETURNYN;

  /* 익영업일 청구예상액 계산 */
  PROCEDURE SP_CREATEPOSTDEMANDINFO(PDEMANDDATE IN VARCHAR DEFAULT NULL) IS
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
        PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    NULL;
  END SP_CREATEPOSTDEMANDINFO;

  /*===> 2013.11.27 BC 글로벌 카드 거래의 경우 정산 일자로 별도 집계 하기 위해 추가    */
  --===> '0BV', '0BJ', '0BM' 기관은 T_FN_NICE_ORG_BC_DSUM 테이블에 정산일자별로 
  --===> 별도 집계된 데이터로 계산해 주어 T_FN_NICE_DEMAND_BC 테이블에 따로 저장
  --===> 기존 T_FN_NICE_DEAMND 테이블의 해당 기관의 운영자금을 T_FN_NICE_ORG_BC_DSUM로
  --===> 별

  /* 당일 청구액 계산-BC 글로벌 */
  PROCEDURE SP_CREATEDEMANDINFO_BC(PDEMANDDATE IN VARCHAR DEFAULT NULL) IS
  
    CURSOR VORGCUR IS
      SELECT CAL.ORG_CD,
             CAL.START_DATE,
             CAL.END_DATE,
             CAL.DEMAND_DAY,
             INF.NICE_AMT_UNIT
      FROM OP.T_FN_DEMAND_CALENDAR CAL,
           OP.T_FN_ORG_INFO        INF
      WHERE CAL.STD_DATE = NVL(PDEMANDDATE, TO_CHAR(SYSDATE, 'YYYYMMDD'))
            AND CAL.ORG_CD = INF.ORG_CD
            AND CAL.HOLIDAY_YN = '0'
            AND CAL.ORG_CD IN ('0BM', '0BV', '0BJ');
  
    VMACCOUNT       OP.T_FN_NICE_DEMAND_BC.MAC_CNT%TYPE := 0; -- 기기대수
    VPREMACCOUNT    OP.T_FN_NICE_DEMAND_BC.MAC_CNT%TYPE := 0; -- 전영업일 기기대수
    VOPERAMT        OP.T_FN_NICE_DEMAND_BC.OPER_AMT%TYPE := 0; -- 청구대상일 일자금
    VPRESTARTAMT    OP.T_FN_NICE_DEMAND_BC.YST_START_AMT%TYPE := 0; -- 전영업일초
    VPREAMT         OP.T_FN_NICE_DEMAND_BC.YST_AMT%TYPE := 0; -- 전일
    VCURAMT         OP.T_FN_NICE_DEMAND_BC.TMR_AMT%TYPE := 0; -- 당일
    VPRERESULTAMT   OP.T_FN_NICE_DEMAND_BC.YST_RESULT_AMT%TYPE := 0; -- 전일실적 (출금)
    VPREINRESULTAMT OP.T_FN_NICE_DEMAND_BC.YST_RESULT_AMT%TYPE := 0; -- 전일입금실적
  
    VDEALCOUNT   OP.T_FN_NICE_DEMAND_BC.DEAL_CNT%TYPE := 0; -- 처리건수(출금)
    VDEALINCOUNT OP.T_FN_NICE_DEMAND_BC.DEAL_CNT%TYPE := 0; -- 처리건수(입금)
  
    VRETURNAMT OP.T_FN_NICE_DEMAND_BC.RETURN_AMT%TYPE := 0; -- 반환
    VDEMANDAMT OP.T_FN_NICE_DEMAND_BC.DEMAND_AMT%TYPE := 0; -- 청구자금
    VINVENTAMT OP.T_FN_NICE_DEMAND_BC.INVENT_AMT%TYPE := 0; -- 재고금액
  
    VUNCOMPLETEAMT OP.T_FN_NICE_DEMAND_BC.UNCOMPLETE_AMT%TYPE := 0; -- 미완료 금액
    VPREENDAMT     OP.T_FN_NICE_DEMAND_BC.PRE_AMT%TYPE := 0; -- 전잔 (운영자금 현황용)
    VENDAMT        OP.T_FN_NICE_DEMAND_BC.END_AMT%TYPE := 0; -- 말잔 (운영자금 현황용)
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
        PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
      
    BEGIN
      DELETE OP.T_FN_NICE_DEMAND_BC WHERE DEMAND_DATE = PDEMANDDATE;
    
      FOR VREC IN VORGCUR LOOP
      
        /* 기기대수 -- 수정 대상 아님.*/
        VMACCOUNT := SF_GETMACCOUNT(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의1 : ' || VREC.ORG_CD || ',' ||
                             VMACCOUNT);
      
        /* 전영업일 기기대수 --수정 대상 아님*/
        VPREMACCOUNT := SF_GETPREMACCOUNT(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의2 : ' || VREC.ORG_CD || ',' ||
                             VPREMACCOUNT);
        /* 일자금  -- hossong 수정 대상- t_fn_nice_monthly_oper는 문제가 되지 않는다고 함.*/
        VOPERAMT := SF_GETOPERAMT(VREC.ORG_CD,
                                  PDEMANDDATE,
                                  VREC.DEMAND_DAY,
                                  VMACCOUNT);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의3 : ' || VREC.ORG_CD || ',' ||
                             VREC.DEMAND_DAY || ',' || VMACCOUNT);
        /* 전영업일초 (전청구일 재고) -- 기존 반영된 이후의 문제이기 때문에 수정대상이 아님.*/
        VPRESTARTAMT := SF_GETPRESTARTAMT_BC(VREC.ORG_CD, PDEMANDDATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의4 : ' || VREC.ORG_CD || ',' ||
                             VPRESTARTAMT);
        /* 당일 (1일치 일자금) --hossong 수정대상 결국 sf_getOperAmt */
        VCURAMT := SF_GETCURAMT(VREC.ORG_CD, PDEMANDDATE, VPREMACCOUNT);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의5 : ' || VREC.ORG_CD || ',' ||
                             VPREMACCOUNT || ',' || VCURAMT);
        /* 전일 (전영업일초:재고 - 당일일자금) */
        VPREAMT := VPRESTARTAMT - VCURAMT;
      
        /* 전일실적, 거래건수 -- hossong t_fn_nice_org_dsum에서 전일실적, 거래건수를 산정하는것이기 때문에 입금실적을 따로 계산해야함.*/
      
        /* hossong - vPreResultAmt:전일거래금액, vDealCount:전일거래건수*/
        SP_SETORGPRERESULT_BC(VREC.ORG_CD,
                              PDEMANDDATE,
                              VPRERESULTAMT,
                              VDEALCOUNT,
                              VPREINRESULTAMT,
                              VDEALINCOUNT);
      
        /* 반환분 (전일 - 전일실적(출금) + 전일입금실적) */
        VRETURNAMT := VPREAMT - VPRERESULTAMT + VPREINRESULTAMT;
      
        /*청구금액 = 일자금 - 반환금(입금분반영되어있음)*/
        VDEMANDAMT := VOPERAMT - VRETURNAMT;
      
        -- 청구금액이 마이너스이면,
        IF VDEMANDAMT < 0 THEN
          -- 반환금대상이 아닌 경우 청구금액 = 0
          IF SF_GETORGRETURNYN(VREC.ORG_CD) = '0' THEN
            VDEMANDAMT := 0;
          END IF;
        ELSE
          -- 청구금액이 플러스이면, 금전단위에 따라 올림.      
          VDEMANDAMT := CEIL(VDEMANDAMT / VREC.NICE_AMT_UNIT) *
                        VREC.NICE_AMT_UNIT;
        END IF;
      
        -- 청구금액이 마이너스일 때, 반환금대상이 아니면, 청구금액 = 0 (재고반영)
        IF VDEMANDAMT < 0 AND SF_GETORGRETURNYN(VREC.ORG_CD) = '0' THEN
          VDEMANDAMT := 0;
        END IF;
      
        /* 재고금액 (전영업일초:재고 - 전일실적(출금) + 청구자금+ 전일입금실적) */
        VINVENTAMT := VPRESTARTAMT - VPRERESULTAMT + VDEMANDAMT +
                      VPREINRESULTAMT;
      
        /* 전잔, 말잔 (나이스 운영자금 현황용) 계산 --hossong 기 발생된 내역이기때문에 수정사항이 없어도 될것으로 보임.*/
        /* hossong   vEndAmt := vPreEndAmt(전잔) + vPreDemandAmt(전청구액) - pPreResultAmt(vPreResultAmt:전일거래금액) */
        SP_SETENDAMT_BC(VREC.ORG_CD,
                        PDEMANDDATE,
                        VPRERESULTAMT,
                        VPREENDAMT,
                        VENDAMT);
      
        /* 미완료 금액 */
        VUNCOMPLETEAMT := SF_GETUNCOMPLETEAMT(VREC.ORG_CD,
                                              VREC.START_DATE,
                                              VREC.END_DATE);
        DBMS_OUTPUT.PUT_LINE('오류라인 정의6 : ' || VREC.ORG_CD || ',' ||
                             VREC.START_DATE || ',' || VREC.END_DATE || ',' ||
                             VUNCOMPLETEAMT);
      
        INSERT INTO OP.T_FN_NICE_DEMAND_BC
          (DEMAND_DATE,
           ORG_CD,
           START_DATE,
           END_DATE,
           USE_DAYS,
           MAC_CNT,
           OPER_AMT,
           YST_START_AMT,
           YST_AMT,
           TMR_AMT,
           YST_RESULT_AMT,
           YST_IN_RESULT_AMT, -- hossong 추가(전일입금실적)
           RETURN_AMT,
           DEMAND_AMT,
           INVENT_AMT,
           DEAL_CNT,
           DEAL_IN_CNT, -- hossong 추가(전일입금건수)
           UNCOMPLETE_AMT,
           PRE_AMT,
           END_AMT,
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE)
        VALUES
          (PDEMANDDATE,
           VREC.ORG_CD,
           VREC.START_DATE,
           VREC.END_DATE,
           VREC.DEMAND_DAY,
           VMACCOUNT,
           VOPERAMT,
           VPRESTARTAMT,
           VPREAMT,
           VCURAMT,
           VPRERESULTAMT,
           VPREINRESULTAMT, -- hossong 추가
           VRETURNAMT,
           VDEMANDAMT,
           VINVENTAMT,
           VDEALCOUNT,
           VDEALINCOUNT, -- hossong 추가
           VUNCOMPLETEAMT,
           VPREENDAMT,
           VENDAMT,
           'SYSTEM',
           SYSDATE,
           'SYSTEM',
           SYSDATE);
      
      /* 여기까지 */
      
      END LOOP;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
    op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_NiceDemand.sp_createDemandInfo_bc',
                                       VRESULT,
                                       PDEMANDDATE);
    DBMS_OUTPUT.PUT_LINE(VRESULT);
  END SP_CREATEDEMANDINFO_BC;

  /* 기관 전영업일초 계산 (전청구일의 재고) */
  FUNCTION SF_GETPRESTARTAMT_BC(PORGCODE    OP.T_FN_NICE_DEMAND_BC.ORG_CD%TYPE,
                                PDEMANDDATE OP.T_FN_NICE_DEMAND_BC.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
  
    VPRESTARTAMT OP.T_FN_NICE_DEMAND_BC.YST_START_AMT%TYPE;
  
  BEGIN
    SELECT NVL(INVENT_AMT, 0) /*전청구금액의 재고 금액*/
    INTO VPRESTARTAMT
    FROM OP.T_FN_NICE_DEMAND_BC
    WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
          AND ORG_CD = PORGCODE;
  
    RETURN VPRESTARTAMT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETPRESTARTAMT_BC;

  /* 기관별 전일실적, 거래건수 계산 -- hossong 현재 전일 거래에 대한 실적을 구할때 deal_type =0 출금거래만 실적을 집계하고 있음. 입금거래도 필요함.*/
  -- 대상일 : 전청구일 ~ 전일
  -- 전일지급금액, 전일거래건수
  PROCEDURE SP_SETORGPRERESULT_BC(PORGCODE        IN OP.T_FN_NICE_DEMAND_BC.ORG_CD%TYPE,
                                  PDEMANDDATE     IN OP.T_FN_NICE_DEMAND_BC.DEMAND_DATE%TYPE,
                                  VPRERESULTAMT   OUT OP.T_FN_NICE_DEMAND_BC.YST_RESULT_AMT%TYPE,
                                  VDEALCOUNT      OUT OP.T_FN_NICE_DEMAND_BC.DEAL_CNT%TYPE,
                                  VPREINRESULTAMT OUT OP.T_FN_NICE_DEMAND_BC.YST_RESULT_AMT%TYPE,
                                  VDEALINCOUNT    OUT OP.T_FN_NICE_DEMAND_BC.DEAL_CNT%TYPE) IS
    /*hossong 입금수정*/
  BEGIN
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0),
           NVL(SUM(TIME_DEAL_CNT), 0) + NVL(SUM(OT_DEAL_CNT), 0) +
           NVL(SUM(NIGHT_DEAL_CNT), 0)
    INTO VPRERESULTAMT,
         VDEALCOUNT
    FROM OP.T_FN_NICE_ORG_BC_DSUM
    WHERE ORG_CD = PORGCODE
          AND CALC_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '0';
  
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0),
           NVL(SUM(TIME_DEAL_CNT), 0) + NVL(SUM(OT_DEAL_CNT), 0) +
           NVL(SUM(NIGHT_DEAL_CNT), 0)
    INTO VPREINRESULTAMT,
         VDEALINCOUNT
    FROM OP.T_FN_NICE_ORG_BC_DSUM
    WHERE ORG_CD = PORGCODE
          AND CALC_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '1';
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END SP_SETORGPRERESULT_BC;

  /* 전잔, 말잔 계산 (운영자금 현황용) */
  -- 대상일 : 전청구일 ~ 전일
  PROCEDURE SP_SETENDAMT_BC(PORGCODE      IN OP.T_FN_NICE_DEMAND_BC.ORG_CD%TYPE,
                            PDEMANDDATE   IN OP.T_FN_NICE_DEMAND_BC.DEMAND_DATE%TYPE,
                            PPRERESULTAMT IN OP.T_FN_NICE_DEMAND_BC.YST_RESULT_AMT%TYPE,
                            VPREENDAMT    OUT OP.T_FN_NICE_DEMAND_BC.PRE_AMT%TYPE,
                            VENDAMT       OUT OP.T_FN_NICE_DEMAND_BC.END_AMT%TYPE) IS
    VPREDEMANDAMT OP.T_FN_NICE_DEMAND_BC.DEMAND_AMT%TYPE := 0;
  BEGIN
    SELECT NVL(END_AMT, 0),
           NVL(DEMAND_AMT, 0)
    INTO VPREENDAMT,
         VPREDEMANDAMT
    FROM OP.T_FN_NICE_DEMAND_BC
    WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
          AND ORG_CD = PORGCODE;
  
    VENDAMT := VPREENDAMT + VPREDEMANDAMT - PPRERESULTAMT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      VPREENDAMT := 0;
      VENDAMT    := 0;
  END SP_SETENDAMT_BC;

  /*<=== 2013.11.27 BC 글로벌 카드 거래의 경우 정산 일자로 별도 집계 하기 위해 추가   */

  /* 사무소별 운영자금 분배 */
  PROCEDURE SP_SHAREOPERAMT(PDEMANDDATE IN VARCHAR DEFAULT NULL) IS
  
    /************************************************************************
         기관별 일자금/당일 총액을 사무소별 분담률로 분할계산.
         => 웹캐시는 일자금과 당일금액 = 0 (실적/반환/청구액만 존재) 
    ************************************************************************/
  
    CURSOR VOFFICECUR IS
      SELECT RAT.DEPT_CD,
             RAT.OFFICE_CD,
             ROUND(DMD.OPERAMT * RAT.RATE, -COFFGENERALAMTUNIT) OPERAMT, -- 일자금
             ROUND(DMD.CURAMT * RAT.RATE, -COFFGENERALAMTUNIT) CURAMT -- 당일
      FROM (SELECT DEPT_CD,
                   OFFICE_CD,
                   --###############################################################################################################                    
                   -- 추후에 반영 HOSSONG: 20051205
                   --###############################################################################################################
                   CASE
                     WHEN (SELECT CAL.DEMAND_DAY
                           FROM OP.T_FN_DEMAND_CALENDAR CAL
                           WHERE CAL.STD_DATE = NVL(PDEMANDDATE, TO_CHAR(SYSDATE, 'YYYYMMDD'))
                                 AND CAL.ORG_CD = '003'
                                 AND CAL.HOLIDAY_YN = '0') = 1 THEN --주중
                      SHARE_RATE_WKD / 100
                     ELSE
                      SHARE_RATE_WED / 100 --주말
                   END RATE
            --###############################################################################################################                     
            --   share_rate / 100 rate
            FROM OP.T_FN_NICE_SHARE_RATE /* hossong : sp_createMonthlyData라는 프로시져를 통해서 사무소분담율테이불이 생성됨. 화면단에서 시작함*/
            WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE) RAT,
           
           (SELECT SUM(OPER_AMT) OPERAMT,
                   SUM(YST_AMT) PREAMT,
                   SUM(TMR_AMT) CURAMT
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = NVL(PDEMANDDATE, TO_CHAR(SYSDATE, 'YYYYMMDD'))) DMD;
  
    /*UNION ALL
    SELECT cWebcashDeptCode,
           cWebcashOfficeCode,
         0,
         0
      FROM DUAL; t_fn_nice_share_rate에 웹케시 등록으로 인하여 해당 union문 이하는 주석처리함 2004.05.28 이영재*/
  
    VOPERAMT        OP.T_FN_NICE_OFFICE_OPER.OPER_AMT%TYPE := 0; -- 운영자금
    VPRESTARTAMT    OP.T_FN_NICE_OFFICE_OPER.YST_START_AMT%TYPE := 0; -- 전영업일초
    VPREAMT         OP.T_FN_NICE_OFFICE_OPER.YST_AMT%TYPE := 0; -- 전일
    VCURAMT         OP.T_FN_NICE_OFFICE_OPER.TMR_AMT%TYPE := 0; -- 당일
    VPRERESULTAMT   OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE := 0; -- 전일실적
    VPREINRESULTAMT OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE := 0; -- 전일실적(입금) (hossong)
  
    VRETURNAMT OP.T_FN_NICE_OFFICE_OPER.RETURN_AMT%TYPE := 0; -- 반환
    VDEMANDAMT OP.T_FN_NICE_OFFICE_OPER.DEMAND_AMT%TYPE := 0; -- 청구자금
    VINVENTAMT OP.T_FN_NICE_OFFICE_OPER.INVENT_AMT%TYPE := 0; -- 재고금액
  
    VDIFFERAMT OP.T_FN_NICE_OFFICE_OPER.DEMAND_AMT%TYPE := 0; -- 차이액
    VDEMANDDAY OP.T_FN_DEMAND_CALENDAR.DEMAND_DAY%TYPE := 1; -- 청구일수
  
    VSUMRATE OP.T_FN_NICE_SHARE_RATE.SHARE_RATE%TYPE := 100; -- 한빛사무소 제외 분담률의 합계
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
    --#################################################################################
    VDEMANDDAYEMART    NUMBER := 0;
    VPREDEMANDDAYEMART NUMBER := 0;
  
    VOPERAMTEMART     OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 청구대상일 일자금
    VOPERPREAMTEMART  OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 청구대상일 일자금(전일)    
    VEMARTMACCOUNT    OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE := 0; -- E마트 기기대수
    VEMARTPREMACCOUNT OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE := 0; -- E마트 기기대수(전일)
    VPRESTARTAMTEMART OP.T_FN_NICE_DEMAND.YST_START_AMT%TYPE := 0; -- 전영업일초(E마트)
    VPREAMTEMART      OP.T_FN_NICE_OFFICE_OPER.YST_AMT%TYPE := 0; -- 전일
    VCURAMTEMART      OP.T_FN_NICE_OFFICE_OPER.TMR_AMT%TYPE := 0; -- 당일
  
    VOPERAMTEMART_T     OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 청구대상일 일자금
    VOPERPREAMTEMART_T  OP.T_FN_NICE_DEMAND.OPER_AMT%TYPE := 0; -- 청구대상일 일자금(전일)    
    VEMARTMACCOUNT_T    OP.T_FN_NICE_DEMAND.MAC_CNT%TYPE := 0; -- E마트 기기대수
    VPRESTARTAMTEMART_T OP.T_FN_NICE_DEMAND.YST_START_AMT%TYPE := 0; -- 전영업일초(E마트)
    VPREAMTEMART_T      OP.T_FN_NICE_OFFICE_OPER.YST_AMT%TYPE := 0; -- 전일
    VCURAMTEMART_T      OP.T_FN_NICE_OFFICE_OPER.TMR_AMT%TYPE := 0; -- 당일
    VSTARTDATE          OP.T_FN_NICE_DEMAND.START_DATE%TYPE;
    VENDDATE            OP.T_FN_NICE_DEMAND.END_DATE%TYPE;
    VDEMANDDAY_T        OP.T_FN_NICE_DEMAND.USE_DAYS%TYPE;
  
    VPRERESULTAMTEMART   OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE := 0; -- 전일실적
    VPREINRESULTAMTEMART OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE := 0; -- 전일실적(입금) (hossong)
  
    VNICEAMT         NUMBER := 0;
    VPRENICEAMT      NUMBER := 0;
    VTOTALNICEAMT    NUMBER := 0;
    VTOTALNICECHAAMT NUMBER := 0;
  
    --#################################################################################    
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
        PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
      DELETE OP.T_FN_NICE_OFFICE_OPER WHERE DEMAND_DATE = PDEMANDDATE;
    
      FOR VREC IN VOFFICECUR LOOP
      
        /*         SELECT nice_amt
        INTO vNiceAmt
        FROM t_fn_nice_share_rate
        WHERE pDemandDate BETWEEN start_date
                          AND end_date
        AND dept_cd   = vRec.dept_cd
        AND office_cd = vRec.office_cd;*/
        /*    SELECT sum( case when pkg_fn_common.sf_getWeekday(pDemandDate) ='1' then nvl(sun_day,0) 
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='2' then nvl(mon_day,0)         
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='3' then nvl(tue_day,0) 
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='4' then nvl(wed_day,0)                     
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='5' then nvl(thu_day,0)
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='6' then nvl(fri_day,0)                    
                       when pkg_fn_common.sf_getWeekday(pDemandDate) ='7' then nvl(sat_day,0)
                       end) niceAmt,
                 sum(case when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='1' then nvl(sun_day,0) 
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='2' then nvl(mon_day,0)         
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='3' then nvl(tue_day,0) 
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='4' then nvl(wed_day,0)                     
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='5' then nvl(thu_day,0)
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='6' then nvl(fri_day,0)                    
                       when pkg_fn_common.sf_getWeekday(pkg_fn_common.sf_getPreActDate(pDemandDate)) ='7' then nvl(sat_day,0)
                       end) preNiceAmt                    
        INTO    vNiceAmt,
                vPreNiceAmt
        FROM t_fn_nice_share_AMT
        WHERE pDemandDate BETWEEN start_date
                          AND end_date
           AND dept_cd   = vRec.dept_cd
        AND office_cd = vRec.office_cd
        AND ORG_CD <> 'HS';*/
      
        SELECT SUM(CASE
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                      NVL(SUN_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                      NVL(MON_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                      NVL(TUE_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                      NVL(WED_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                      NVL(THU_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                      NVL(FRI_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                      NVL(SAT_DAY, 0)
                   END) NICEAMT
        INTO VNICEAMT
        FROM OP.T_FN_NICE_SHARE_AMT
        WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
              AND DEPT_CD = VREC.DEPT_CD
              AND OFFICE_CD = VREC.OFFICE_CD
              AND ORG_CD NOT IN ('HS', 'GL');
      
        SELECT SUM(CASE
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '1' THEN
                      NVL(SUN_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '2' THEN
                      NVL(MON_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '3' THEN
                      NVL(TUE_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '4' THEN
                      NVL(WED_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '5' THEN
                      NVL(THU_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '6' THEN
                      NVL(FRI_DAY, 0)
                     WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '7' THEN
                      NVL(SAT_DAY, 0)
                   END) PRENICEAMT
        INTO VPRENICEAMT
        FROM OP.T_FN_NICE_SHARE_AMT
        WHERE op.SF_GETPREACTDATE(PDEMANDDATE) BETWEEN
              START_DATE AND END_DATE
              AND DEPT_CD = VREC.DEPT_CD
              AND OFFICE_CD = VREC.OFFICE_CD
              AND ORG_CD NOT IN ('HS', 'GL');
      
        VPRESTARTAMT := SF_GETOFFICEPRESTARTAMT(VREC.DEPT_CD,
                                                VREC.OFFICE_CD,
                                                PDEMANDDATE); /*hossong: 기 재고금액에서 가지고 오기때문에 수정필요없을것으로 보임.*/
        -----------------------------------------
        -- 전영업일초 = 전앨재고 - 등록액 hossong 1213
        -----------------------------------------
        VPRESTARTAMT := VPRESTARTAMT - VPRENICEAMT;
        -----------------------------------------
      
        VPREAMT := VPRESTARTAMT - VREC.CURAMT;
      
        VPRERESULTAMT   := SF_GETOFFICEPRERESULT(VREC.DEPT_CD,
                                                 VREC.OFFICE_CD,
                                                 PDEMANDDATE); /* hossong: deal_type =0 인대상에 대해서 실적을 구한다.*/
        VPREINRESULTAMT := SF_GETOFFICEPREINRESULT(VREC.DEPT_CD,
                                                   VREC.OFFICE_CD,
                                                   PDEMANDDATE); /* hossong: deal_type =1 인대상에 대해서 실적을 구한다.*/
      
        VRETURNAMT := VPREAMT - VPRERESULTAMT + VPREINRESULTAMT; /* hossong: 입금추가*/
        VDEMANDAMT := VREC.OPERAMT - VRETURNAMT;
        /* 운영자금이 minus이면 0 */
        IF VDEMANDAMT < 0 THEN
          VDEMANDAMT := 0;
        END IF;
        VINVENTAMT := VPRESTARTAMT - VPRERESULTAMT + VDEMANDAMT +
                      VPREINRESULTAMT; /* hossong: 재고-입금분 반영 */
      
        INSERT INTO OP.T_FN_NICE_OFFICE_OPER
          (DEMAND_DATE,
           DEPT_CD,
           OFFICE_CD,
           OPER_AMT,
           YST_START_AMT,
           YST_AMT,
           TMR_AMT,
           YST_RESULT_AMT,
           YST_RESULT_IN_AMT, -- hossong: 전일입금액 추가
           RETURN_AMT,
           DEMAND_AMT,
           INVENT_AMT,
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE)
        VALUES
          (PDEMANDDATE,
           VREC.DEPT_CD,
           VREC.OFFICE_CD,
           NVL(VREC.OPERAMT, 0), -- 운영자금
           NVL(VPRESTARTAMT, 0), -- 전영업일초
           NVL(VPREAMT, 0), -- 전일
           NVL(VREC.CURAMT, 0), -- 당일
           NVL(VPRERESULTAMT, 0), -- 전일실적 
           NVL(VPREINRESULTAMT, 0), -- 전일입금실적( hossong 추가 ) 
           NVL(VRETURNAMT, 0), -- 반환분
           NVL(VDEMANDAMT, 0), -- 청구자금
           NVL(VINVENTAMT, 0), -- 재고                  
           'SYSTEM',
           SYSDATE,
           'SYSTEM',
           SYSDATE);
      
        ----------------------------------------------------------------------
        -- 나이스 투입자금 update hossong 1213
        ----------------------------------------------------------------------
        /* update t_fn_nice_office_oper
         set    oper_amt = oper_amt + vNiceAmt,
                yst_start_amt = yst_start_amt + vNiceAmt,
                yst_amt = yst_amt + vNiceAmt,
                return_amt = return_amt + vNiceAmt,
                invent_amt = invent_amt + vNiceAmt
         where demand_date = pDemandDate
         and   dept_cd     = vRec.dept_cd
         and   office_cd   = vRec.office_cd;
        ----------------------------------------------------------------------
        vTotalNiceAmt := vTotalNiceAmt + vNiceAmt; */
        --###########################################################################
        --###########################################################################      
        ----------------------------------------------------------------------
        -- 나이스 투입자금 update hossong 080902
        ----------------------------------------------------------------------
        UPDATE OP.T_FN_NICE_OFFICE_OPER
        SET OPER_AMT      = NVL(OPER_AMT, 0) + NVL(VPRENICEAMT, 0) +
                            (NVL(VNICEAMT, 0) - NVL(VPRENICEAMT, 0)),
            YST_START_AMT = NVL(YST_START_AMT, 0) + NVL(VPRENICEAMT, 0),
            YST_AMT       = NVL(YST_AMT, 0) + NVL(VPRENICEAMT, 0),
            RETURN_AMT    = NVL(RETURN_AMT, 0) + NVL(VPRENICEAMT, 0),
            DEMAND_AMT    = NVL(DEMAND_AMT, 0) +
                            (NVL(VNICEAMT, 0) - NVL(VPRENICEAMT, 0)),
            INVENT_AMT    = NVL(INVENT_AMT, 0) + NVL(VPRENICEAMT, 0) +
                            (NVL(VNICEAMT, 0) - NVL(VPRENICEAMT, 0))
        WHERE DEMAND_DATE = PDEMANDDATE
              AND DEPT_CD = VREC.DEPT_CD
              AND OFFICE_CD = VREC.OFFICE_CD;
        ----------------------------------------------------------------------
        VTOTALNICEAMT    := NVL(VTOTALNICEAMT, 0) + NVL(VPRENICEAMT, 0);
        VTOTALNICECHAAMT := NVL(VTOTALNICECHAAMT, 0) +
                            (NVL(VNICEAMT, 0) - NVL(VPRENICEAMT, 0));
        --###########################################################################
        --###########################################################################      
      
        --  청구일수
        SELECT DEMAND_DAY
        INTO VDEMANDDAYEMART
        FROM OP.T_FN_DEMAND_CALENDAR
        WHERE STD_DATE = PDEMANDDATE
              AND ORG_CD = '0BC';
      
        --  부서별 입금 기기 수수
        BEGIN
          SELECT MAC_CNT
          INTO VEMARTMACCOUNT
          FROM OP.T_FN_EKBBRAND_MAC_CNT
          WHERE DEMAND_DATE = PDEMANDDATE
                AND DEPT_CD = VREC.DEPT_CD
                AND OFFICE_CD = VREC.OFFICE_CD;
        EXCEPTION
          WHEN OTHERS THEN
            VEMARTMACCOUNT := 0;
        END;
      
        IF VEMARTMACCOUNT IS NULL or VEMARTMACCOUNT = '' THEN
          VEMARTMACCOUNT := 0;
        END IF;
      
        -- 일자금
        VOPERAMTEMART := 1 * CEMART1DAYAMT * VEMARTMACCOUNT +
                         (VDEMANDDAYEMART - 1) * CEMART2DAYAMT *
                         VEMARTMACCOUNT;
      
        -- 전일 일자금
      
        --  전 청구일수
        SELECT DEMAND_DAY
        INTO VPREDEMANDDAYEMART
        FROM OP.T_FN_DEMAND_CALENDAR
        WHERE STD_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
              AND ORG_CD = '0BC';
      
        --  전 부서별 입금 기기 수수
        BEGIN
          SELECT MAC_CNT
          INTO VEMARTPREMACCOUNT
          FROM OP.T_FN_EKBBRAND_MAC_CNT
          WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
                AND DEPT_CD = VREC.DEPT_CD
                AND OFFICE_CD = VREC.OFFICE_CD;
        EXCEPTION
          WHEN OTHERS THEN
            VEMARTPREMACCOUNT := 0;
        END;
      
        IF VEMARTPREMACCOUNT IS NULL or VEMARTPREMACCOUNT = '' THEN
          VEMARTPREMACCOUNT := 0;
        END IF;
      
        -- 전 일자금 = 전영업일 초
        VPRESTARTAMTEMART := 1 * CEMART1DAYAMT * VEMARTMACCOUNT +
                             (VPREDEMANDDAYEMART - 1) * CEMART2DAYAMT *
                             VEMARTMACCOUNT;
      
        --전일 
        VPREAMTEMART := VPRESTARTAMTEMART;
      
        --당일 항상 0
        VCURAMTEMART := VPRESTARTAMTEMART - VPREAMTEMART;
      
        -- emart 일자금 반영
        UPDATE OP.T_FN_NICE_OFFICE_OPER
        SET OPER_AMT = OPER_AMT + VOPERAMTEMART, --운영자금
            --       yst_start_amt = yst_start_amt + vPreStartAmtEmart , --전영업일초
            --       yst_amt = yst_amt + vPreAmtEmart , --전일  
            --       tmr_amt = tmr_amt + vCurAmtEmart ,
            --       return_amt = return_amt + vPreAmtEmart, --반환금 = 전일
            DEMAND_AMT = DEMAND_AMT + VOPERAMTEMART, --청구금액= 일자금-반환
            INVENT_AMT = INVENT_AMT + VOPERAMTEMART -- 재고 = 일자금
        WHERE DEMAND_DATE = PDEMANDDATE
              AND DEPT_CD = VREC.DEPT_CD
              AND OFFICE_CD = VREC.OFFICE_CD;
      
        VOPERAMTEMART_T     := VOPERAMTEMART_T + VOPERAMTEMART; --운영자금 합
        VPRESTARTAMTEMART_T := VPRESTARTAMTEMART_T + VPRESTARTAMTEMART; -- 전영업일합
        VPREAMTEMART_T      := VPREAMTEMART_T + VPREAMTEMART; --전일합
        VCURAMTEMART_T      := VCURAMTEMART_T + VCURAMTEMART; --당일합
        VEMARTMACCOUNT_T    := VEMARTMACCOUNT_T + VEMARTMACCOUNT; --기기합      
      
      --###########################################################################
      --###########################################################################      
      
      END LOOP;
    
      --###########################################################################
      -- nice_demand update
      --###########################################################################      
    
      UPDATE OP.T_FN_NICE_DEMAND
      SET MAC_CNT  = MAC_CNT + VEMARTMACCOUNT_T, -- 기기
          OPER_AMT = OPER_AMT + VOPERAMTEMART_T,
          --yst_start_amt = yst_start_amt + vPreStartAmtEmart_t ,
          --yst_amt = yst_amt + vPreAmtEmart_t ,
          --tmr_amt = tmr_amt + vCurAmtEmart_t,
          --return_amt = return_amt + vPreAmtEmart_t,
          DEMAND_AMT = DEMAND_AMT + VOPERAMTEMART_T,
          INVENT_AMT = INVENT_AMT + VOPERAMTEMART_T
      
      WHERE DEMAND_DATE = PDEMANDDATE
            AND ORG_CD = CKBOFFICEORGCODE;
    
      SELECT START_DATE,
             END_DATE,
             USE_DAYS
      INTO VSTARTDATE,
           VENDDATE,
           VDEMANDDAY_T
      FROM OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDEMANDDATE
            AND ORG_CD = CKBOFFICEORGCODE;
    
      /* BC 글로벌의 경우 정산일자별 별도 집계된 운영자금과 재고로 업데이트한다. 2013.11.27 */
      /* 운영자금(demand_amt)는 별도 집계된 금액으로 
      invent_amt 는 직전-지급+ 별도집계운영자금+입금 으로 */
      /*===> 2013.11.28             
                update t_fn_nice_demand   src
                set    
                      --yst_start_amt = yst_start_amt + vPreStartAmtEmart_t ,
                       --yst_amt = yst_amt + vPreAmtEmart_t ,
                       --tmr_amt = tmr_amt + vCurAmtEmart_t,
                       --return_amt = return_amt + vPreAmtEmart_t,
                       src.demand_amt = NVL((select demand_amt
                                          from t_fn_nice_demand_bc 
                                         where demand_date = src.demand_date 
                                           and org_cd = src.org_cd), 0),
                       src.invent_amt = (   yst_start_amt 
                                          - yst_result_amt 
                                          + NVL((select demand_amt
                                                  from t_fn_nice_demand_bc 
                                                 where demand_date = src.demand_date 
                                                   and org_cd = src.org_cd), 0)
                                          + yst_in_result_amt )
                where src.demand_date = pDemandDate
                and   src.org_cd IN ('0BJ', '0BM', '0BV') ;
      
      <===*/
      /* 전일실적 거래건수           */
    
      SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
             NVL(SUM(NIGHT_DEAL_AMT), 0)
      INTO VPRERESULTAMTEMART
      FROM OP.T_FN_KB_BRAND_DSUM2
      WHERE DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
            TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD');
    
      SELECT NVL(SUM(IN_TIME_DEAL_AMT), 0) + NVL(SUM(IN_OT_DEAL_AMT), 0) +
             NVL(SUM(IN_NIGHT_DEAL_AMT), 0)
      INTO VPREINRESULTAMTEMART
      FROM OP.T_FN_KB_BRAND_DSUM2
      WHERE DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
            TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD');
    
      DELETE OP.T_FN_NICE_DEMAND2 WHERE DEMAND_DATE = PDEMANDDATE;
    
      INSERT INTO OP.T_FN_NICE_DEMAND2
        (DEMAND_DATE,
         ORG_CD,
         START_DATE,
         END_DATE,
         USE_DAYS,
         MAC_CNT,
         OPER_AMT,
         YST_START_AMT,
         YST_AMT,
         TMR_AMT,
         YST_RESULT_AMT,
         YST_IN_RESULT_AMT, -- hossong 추가(전일입금실적)
         RETURN_AMT,
         DEMAND_AMT,
         INVENT_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      VALUES
        (PDEMANDDATE,
         CKBOFFICEORGCODE,
         VSTARTDATE,
         VENDDATE,
         VDEMANDDAY_T,
         VEMARTMACCOUNT_T,
         VOPERAMTEMART_T,
         VPRESTARTAMTEMART_T,
         VPREAMTEMART_T,
         VCURAMTEMART_T,
         
         VPRERESULTAMTEMART,
         VPREINRESULTAMTEMART, -- hossong 추가
         
         VPREAMTEMART_T,
         VOPERAMTEMART_T - VPREAMTEMART_T,
         VOPERAMTEMART_T,
         'SYSTEM',
         SYSDATE,
         'SYSTEM',
         SYSDATE);
    
      --------------------------------------------------------------------
    
      DELETE OP.T_FN_NICE_DEMAND
      WHERE DEMAND_DATE = PDEMANDDATE
            AND ORG_CD = CNICEORGCODE;
    
      INSERT INTO OP.T_FN_NICE_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         START_DATE,
         END_DATE,
         USE_DAYS,
         MAC_CNT,
         OPER_AMT,
         YST_START_AMT,
         YST_AMT,
         TMR_AMT,
         YST_RESULT_AMT,
         YST_IN_RESULT_AMT, -- hossong 추가(전일입금실적)
         RETURN_AMT,
         DEMAND_AMT,
         INVENT_AMT,
         DEAL_CNT,
         DEAL_IN_CNT, -- hossong 추가(전일입금건수)
         UNCOMPLETE_AMT,
         PRE_AMT,
         END_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      VALUES
        (PDEMANDDATE,
         CNICEORGCODE,
         VSTARTDATE,
         VENDDATE,
         VDEMANDDAY_T,
         0,
         VTOTALNICEAMT + VTOTALNICECHAAMT,
         VTOTALNICEAMT,
         VTOTALNICEAMT,
         0,
         0,
         0,
         VTOTALNICEAMT,
         0 + VTOTALNICECHAAMT,
         VTOTALNICEAMT + VTOTALNICECHAAMT,
         0,
         0,
         0,
         0,
         0,
         'SYSTEM',
         SYSDATE,
         'SYSTEM',
         SYSDATE);
      --###########################################################################
      --###########################################################################      
    
      /******************************************************* 
       기관합계와 사무소 합계의 차액분 한빛서비스 중계 반영 
      *******************************************************/
      -- 일자금, 전영업일초, 전일, 당일, 반환, 청구액, 재고액 차이분 계산       
      SELECT DMD.OPER_AMT - OPR.OPER_AMT,
             DMD.YST_START_AMT - OPR.YST_START_AMT,
             DMD.YST_AMT - OPR.YST_AMT,
             DMD.TMR_AMT - OPR.TMR_AMT,
             DMD.RETURN_AMT - OPR.RETURN_AMT,
             DMD.DEMAND_AMT - OPR.DEMAND_AMT,
             DMD.INVENT_AMT - OPR.INVENT_AMT
      INTO VOPERAMT,
           VPRESTARTAMT,
           VPREAMT,
           VCURAMT,
           VRETURNAMT,
           VDEMANDAMT,
           VINVENTAMT
      FROM (SELECT SUM(OPER_AMT) OPER_AMT, -- 일자금
                   SUM(YST_START_AMT) YST_START_AMT, -- 전영업일초
                   SUM(YST_AMT) YST_AMT, -- 전일
                   SUM(TMR_AMT) TMR_AMT, -- 당일
                   SUM(RETURN_AMT) RETURN_AMT, -- 반환금
                   SUM(DEMAND_AMT) DEMAND_AMT, -- 청구액
                   SUM(INVENT_AMT) INVENT_AMT -- 재고액
            FROM OP.T_FN_NICE_DEMAND
            WHERE DEMAND_DATE = PDEMANDDATE) DMD,
           (SELECT SUM(OPER_AMT) OPER_AMT, -- 일자금 
                   SUM(YST_START_AMT) YST_START_AMT, -- 전영업일초
                   SUM(YST_AMT) YST_AMT, -- 전일
                   SUM(TMR_AMT) TMR_AMT, -- 당일
                   SUM(RETURN_AMT) RETURN_AMT, -- 반환금
                   SUM(DEMAND_AMT) DEMAND_AMT, -- 청구액
                   SUM(INVENT_AMT) INVENT_AMT -- 재고액
            FROM OP.T_FN_NICE_OFFICE_OPER
            WHERE DEMAND_DATE = PDEMANDDATE) OPR;
    
      -- 사무소 운영자금 테이블에 차이금액 업데이트 
      UPDATE OP.T_FN_NICE_OFFICE_OPER
      SET OPER_AMT      = OPER_AMT + VOPERAMT,
          YST_START_AMT = YST_START_AMT + VPRESTARTAMT,
          YST_AMT       = YST_AMT + VPREAMT,
          TMR_AMT       = TMR_AMT + VCURAMT,
          RETURN_AMT    = RETURN_AMT + VRETURNAMT,
          DEMAND_AMT    = DEMAND_AMT + VDEMANDAMT,
          INVENT_AMT    = INVENT_AMT + VINVENTAMT,
          UPDATE_UID    = 'UPDATE',
          UPDATE_DATE   = SYSDATE
      WHERE DEMAND_DATE = PDEMANDDATE
            AND DEPT_CD = CHANBITDEPTCODE
            AND OFFICE_CD = CHANBITOFFICECODE;
    
      -- 청구일수 = 익일 ~ 익영업일까지의 일수 ( 익영업일 - 청구일)
      VDEMANDDAY := TO_DATE(op.SF_GETPOSTACTDATE(PDEMANDDATE),
                            'YYYYMMDD') - TO_DATE(PDEMANDDATE, 'YYYYMMDD');
    
      /*********************************************************************** 
        한빛사무소 재고기준 
          - 청구일수 = 1 : 기준금액 + 평일금액
        - 청구일수 > 1 : 기준금액 + (주말금액 * 청구일수) 
      ***********************************************************************/
      IF VDEMANDDAY = 1 THEN
        VINVENTAMT := CHANBITSTDINVENT + CHANBITORDINVENT;
      ELSE
        VINVENTAMT := CHANBITSTDINVENT + (CHANBITWKDINVENT * VDEMANDDAY);
      END IF;
      /*  vInventAmt := cHanbitStdInvent + (cHanbitWkdInvent * 0);  -20040924 추석대비임시청구(정희성)*/
    
      /*********************************************************************** 
             한빛사무소 재고기준 = 전영업일초 - 전일실적 + 운영자금
           => 차이분은 운영자금을 조정하여 맞춘다. 
      ***********************************************************************/
      SELECT VINVENTAMT - (YST_START_AMT - YST_RESULT_AMT + DEMAND_AMT +
             YST_RESULT_IN_AMT), /* hossong: 입금분 반영 yst_result_in_amt*/
             DEMAND_AMT
      INTO VDIFFERAMT,
           VDEMANDAMT
      FROM OP.T_FN_NICE_OFFICE_OPER
      WHERE DEMAND_DATE = PDEMANDDATE
            AND DEPT_CD = CHANBITDEPTCODE
            AND OFFICE_CD = CHANBITOFFICECODE;
    
      /* 재고기준과의 차액이 minus인 경우 청구금액을 0으로 맞춘다. */
      IF VDEMANDAMT + VDIFFERAMT < 0 THEN
        VDIFFERAMT := -VDEMANDAMT;
      END IF;
    
      /* 계산된 청구금액을 UPDATE */
      UPDATE OP.T_FN_NICE_OFFICE_OPER
      SET DEMAND_AMT  = DEMAND_AMT + VDIFFERAMT,
          UPDATE_UID  = 'UPDATE',
          UPDATE_DATE = SYSDATE
      WHERE DEMAND_DATE = PDEMANDDATE
            AND DEPT_CD = CHANBITDEPTCODE
            AND OFFICE_CD = CHANBITOFFICECODE;
    
      /***************************************************
         한빛사무소 청구금액의 변경금액 만큼  
         각 사무소 분담률에 의거 차감
       분담률은 한빛사무소 제외 분담률합계 100%기준 
      ***************************************************/
      -- 한빛사무소 제외 사무소의 분담률 합계금액 계산
      SELECT SUM(SHARE_RATE)
      INTO VSUMRATE
      FROM OP.T_FN_NICE_SHARE_RATE
      WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
            AND
            DEPT_CD || OFFICE_CD <> CHANBITDEPTCODE || CHANBITOFFICECODE;
      --  AND office_cd != cHanbitOfficeCode;
    
      -- 분담률에 따라 청구금액 차감. 
      /*
            UPDATE t_fn_nice_office_oper opr
               SET demand_amt
                   = (SELECT ROUND(opr.demand_amt - vDifferAmt * (rat.share_rate / vSumRate), -4)
                      FROM t_fn_nice_share_rate rat
                   WHERE opr.demand_date BETWEEN rat.start_date
                                             AND rat.end_date
                   AND rat.dept_cd           = opr.dept_cd
                   AND rat.office_cd         = opr.office_cd)
             WHERE demand_date  = pDemandDate
               AND dept_cd||office_cd   <> cHanbitDeptCode||cHanbitOfficeCode
                     and demand_amt <> 0;
             --  AND office_cd != cHanbitOfficeCode;
      */
    
      FOR J IN (SELECT RAT.SHARE_RATE,
                       RAT.DEPT_CD,
                       RAT.OFFICE_CD
                FROM OP.T_FN_NICE_SHARE_RATE RAT
                WHERE PDEMANDDATE BETWEEN RAT.START_DATE AND RAT.END_DATE) LOOP
        UPDATE OP.T_FN_NICE_OFFICE_OPER
        SET DEMAND_AMT = ROUND(DEMAND_AMT -
                               VDIFFERAMT * (J.SHARE_RATE / VSUMRATE),
                               -4)
        WHERE DEMAND_DATE = PDEMANDDATE
              AND
              DEPT_CD || OFFICE_CD <> CHANBITDEPTCODE || CHANBITOFFICECODE
              AND DEPT_CD = J.DEPT_CD
              AND OFFICE_CD = J.OFFICE_CD;
      
      END LOOP;
    
      /*************************************************
        계산과정에서 발생하는 기관청구액과의 차액분은
        강남사무소에 반영 시킨다.
      *************************************************/
      UPDATE OP.T_FN_NICE_OFFICE_OPER OPR
      SET DEMAND_AMT =
          (SELECT OPR.DEMAND_AMT + ORG.DEMAND_AMT - OFC.DEMAND_AMT
           FROM (SELECT NVL(SUM(DEMAND_AMT), 0) DEMAND_AMT
                 FROM OP.T_FN_NICE_DEMAND
                 WHERE DEMAND_DATE = PDEMANDDATE) ORG,
                (SELECT NVL(SUM(DEMAND_AMT), 0) DEMAND_AMT
                 FROM OP.T_FN_NICE_OFFICE_OPER OFC
                 WHERE DEMAND_DATE = PDEMANDDATE) OFC)
      WHERE DEMAND_DATE = PDEMANDDATE
            AND DEPT_CD = OP.PKG_FN_PACKDEMAND.CGANGNAMDEPTCODE
            AND OFFICE_CD = OP.PKG_FN_PACKDEMAND.CGANGNAMOFFICECODE;
    
      -- 전체사무소 재고금액 재계산.
      UPDATE OP.T_FN_NICE_OFFICE_OPER
      SET INVENT_AMT = YST_START_AMT - YST_RESULT_AMT + DEMAND_AMT +
                       YST_RESULT_IN_AMT /*hossong: 입금분반영 */
      WHERE DEMAND_DATE = PDEMANDDATE;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_NiceDemand.sp_shareOperAmt',
                                       VRESULT,
                                       PDEMANDDATE);
  
  END SP_SHAREOPERAMT;

  /* 사무소 전영업일초 계산 (전청구일의 재고) */
  FUNCTION SF_GETOFFICEPRESTARTAMT(PDEPTCODE   OP.T_FN_NICE_OFFICE_OPER.DEPT_CD%TYPE,
                                   POFFICECODE OP.T_FN_NICE_OFFICE_OPER.DEPT_CD%TYPE,
                                   PDEMANDDATE OP.T_FN_NICE_OFFICE_OPER.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
  
    VPRESTARTAMT OP.T_FN_NICE_OFFICE_OPER.YST_START_AMT%TYPE;
  
  BEGIN
    SELECT NVL(INVENT_AMT, 0)
    INTO VPRESTARTAMT
    FROM OP.T_FN_NICE_OFFICE_OPER
    WHERE DEMAND_DATE = op.SF_GETPREACTDATE(PDEMANDDATE)
          AND DEPT_CD = PDEPTCODE
          AND OFFICE_CD = POFFICECODE;
  
    RETURN VPRESTARTAMT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETOFFICEPRESTARTAMT;

  /* 사무소별 전일실적 구하기 */
  -- 대상일 : 전청구일 ~ 전일
  -- 전일지급금액, 전일거래건수
  FUNCTION SF_GETOFFICEPRERESULT(PDEPTCODE   IN OP.T_FN_NICE_OFFICE_OPER.DEPT_CD%TYPE,
                                 POFFICECODE IN OP.T_FN_NICE_OFFICE_OPER.OFFICE_CD%TYPE,
                                 PDEMANDDATE IN OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
    VRESULT OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE;
  
  BEGIN
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0)
    INTO VRESULT
    FROM OP.T_FN_NICE_TEAM_DSUM1
    WHERE DEPT_CD = PDEPTCODE
          AND OFFICE_CD = POFFICECODE
          AND DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '0';
  
    RETURN VRESULT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETOFFICEPRERESULT;

  /* hossong: 입금추가 - 사무소별 전일입금실적 구하기 */
  -- 대상일 : 전청구일 ~ 전일
  -- 전일지급금액, 전일거래건수
  FUNCTION SF_GETOFFICEPREINRESULT(PDEPTCODE   IN OP.T_FN_NICE_OFFICE_OPER.DEPT_CD%TYPE,
                                   POFFICECODE IN OP.T_FN_NICE_OFFICE_OPER.OFFICE_CD%TYPE,
                                   PDEMANDDATE IN OP.T_FN_NICE_DEMAND.DEMAND_DATE%TYPE)
    RETURN NUMBER IS
    VRESULT OP.T_FN_NICE_OFFICE_OPER.YST_RESULT_AMT%TYPE;
  
  BEGIN
    SELECT NVL(SUM(TIME_DEAL_AMT), 0) + NVL(SUM(OT_DEAL_AMT), 0) +
           NVL(SUM(NIGHT_DEAL_AMT), 0)
    INTO VRESULT
    FROM OP.T_FN_NICE_TEAM_DSUM1
    WHERE DEPT_CD = PDEPTCODE
          AND OFFICE_CD = POFFICECODE
          AND DEAL_DATE BETWEEN op.SF_GETPREACTDATE(PDEMANDDATE) AND
          TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
          AND DEAL_STATUS = '0'
          AND DEAL_TYPE = '1';
  
    RETURN VRESULT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
  END SF_GETOFFICEPREINRESULT;

  /* 일별 기기대수 생성 */
  PROCEDURE SP_CREATEDAILYMACCOUNT(PDATE IN VARCHAR DEFAULT NULL) IS
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK';
  BEGIN
    IF PDATE IS NULL or PDATE = '' THEN
        PDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
        
    BEGIN
      DELETE OP.T_FN_NICE_MAC_CNT
      WHERE MAC_DATE = op.SF_GETBEFOREDATE(PDATE);
    
      INSERT INTO OP.T_FN_NICE_MAC_CNT
        (MAC_DATE,
         ORG_CD,
         MAC_CNT)
        SELECT op.SF_GETBEFOREDATE(PDATE),
               ORG.ORG_CD,
               COUNT(*)
        FROM OP.T_CM_ORG ORG,
             OP.T_CM_MAC MAC
        WHERE NVL(CLOSE_DATE, CMAXDATE) >= PDATE
              AND OPEN_DATE < PDATE
              AND MAC.ORG_CD = CNICEORGCODE
              AND (MAC.OUT_YN = DECODE(ORG.SVC_TYPE, '1', '1') -- 예금인출여부
                   OR MAC.SVC_YN = DECODE(ORG.SVC_TYPE, '2', '1') -- 현금서비스여부
                   OR MAC.FOREIGN_YN = DECODE(ORG.SVC_TYPE, '3', '1')) -- 해외카드여부
        GROUP BY ORG.ORG_CD;
    
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_NiceDemand.sp_createDailyMacCount',
                                       VRESULT,
                                       PDATE);
  
  END SP_CREATEDAILYMACCOUNT;

  /* Nice 일자금 기초데이타 및 사무소 분담률 생성 */
PROCEDURE SP_CREATEMONTHLYDATA(PSTDDATE   IN OP.T_FN_NICE_SHARE_RATE.START_DATE%TYPE,
                                 PSTARTDATE IN OP.T_FN_NICE_SHARE_RATE.START_DATE%TYPE,
                                 PENDDATE   IN OP.T_FN_NICE_SHARE_RATE.END_DATE%TYPE,
                                 PUSERID    IN OP.T_FN_NICE_SHARE_RATE.INSERT_UID%TYPE,
                                 VRESULT    OUT VARCHAR) IS
  
    /**************************************************************************************************
    * 대당평균건수 = 평균건수 / 기기대수
    * 건당출금액 = 평균금액 / 기기대수 / 대당평균건수
    * 일자금 = 건당출금액 * (1 + 금액여유율) * 대당평균건수 * (1 + 건수여유율) * 기기대수 * 사용일수 
    * 사무소 분담률 = 실제지급금액합계 / 사무소지급금액
    * 사무소 일자금 = 은행총청구액 * 분담률
    **************************************************************************************************/
  
    -- 기관별 기기대수, 일평균건수, 일평균금액
    /* hossong 입금 관련 수정
    CURSOR vOrgCur IS
      SELECT cnt.org_cd,      -- 기관코드
           MIN(cnt.mac_cnt)            macCnt,      
           NVL(SUM(nce.time_deal_cnt), 0) 
          + NVL(SUM(nce.ot_deal_cnt), 0) 
          + NVL(SUM(nce.night_deal_cnt), 0) sumCnt,  -- 총건수
           NVL(SUM(nce.time_deal_amt), 0) 
          + NVL(SUM(nce.ot_deal_amt), 0)
          + NVL(SUM(nce.night_deal_amt), 0) sumAmt  -- 총금액
        FROM (SELECT org.org_cd,
                   NVL(mac.mac_cnt, 0) mac_cnt
              FROM t_cm_org            org,
                 t_fn_nice_mac_cnt   mac
           WHERE mac.mac_date(+)  = pEndDate 
             AND org.org_cd       = mac.org_cd (+)
             AND org.nice_org_yn IN ('0', '1') 
           ) cnt,
           t_fn_nice_org_dsum nce
       WHERE nce.deal_date BETWEEN pStartDate
                   AND pEndDate
         AND nce.deal_status     = '0'
         AND nce.deal_type     = '0'
         AND nce.org_cd          = cnt.org_cd
      GROUP BY cnt.org_cd;
    */
  
    /* 돌리는 방법 hossong
    DECLARE 
      A VARCHAR(200);
      B VARCHAR(200);
      C VARCHAR(200);
      D VARCHAR(200);    
      E VARCHAR(200);    
      P_STATUS VARCHAR(200);
    BEGIN 
      A := '20090204';      
      B := '20090101';
      C := '20090131';
      D := '0415041';
      P_STATUS := NULL;
    
      pkg_fn_nicedemand.sp_createMonthlyData ( A,B,C,D, P_STATUS );
    
      COMMIT; 
    END;    
        */
    CURSOR VORGCUR IS
    -- 입금관련 총건수에는 더하구 총금액에서 뺀다.
    
      SELECT CNT.ORG_CD, -- 기관코드
             MIN(CNT.MAC_CNT) MACCNT,
             NVL(SUM(NCE.TIME_DEAL_CNT), 0) + NVL(SUM(NCE.OT_DEAL_CNT), 0) +
             NVL(SUM(NCE.NIGHT_DEAL_CNT), 0) SUMCNT, -- 총건수
             
             NVL(SUM(DECODE(NCE.DEAL_TYPE,
                            '0',
                            NCE.TIME_DEAL_AMT + NCE.OT_DEAL_AMT +
                            NCE.NIGHT_DEAL_AMT,
                            '1',
                            - (NCE.TIME_DEAL_AMT + NCE.OT_DEAL_AMT +
                              NCE.NIGHT_DEAL_AMT))),
                 0) SUMAMT -- 총금액
      
      FROM (SELECT ORG.ORG_CD,
                   NVL(MAC.MAC_CNT, 0) MAC_CNT
            FROM OP.T_CM_ORG          ORG,
                 OP.T_FN_NICE_MAC_CNT MAC
            WHERE MAC.MAC_DATE(+) = PENDDATE
                  AND ORG.ORG_CD = MAC.ORG_CD(+)
                  AND ORG.NICE_ORG_YN IN ('0', '1')) CNT,
           OP.T_FN_NICE_ORG_DSUM NCE
      WHERE NCE.DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
            AND NCE.DEAL_STATUS = '0'
            AND NCE.DEAL_TYPE IN ('0', '1') -- 1은 입금
            AND NCE.ORG_CD = CNT.ORG_CD
      GROUP BY CNT.ORG_CD;
  
    /* 고정일자금이 존재하는 경우 */
    CURSOR VAMTCUR IS
      SELECT ORG_CD,
             NICE_ORD_AMT,
             NICE_WKD_AMT
      FROM OP.T_FN_ORG_INFO
      WHERE NICE_ORD_AMT > 0
            OR NICE_WKD_AMT > 0;
  
    /* 영업일수 */
    VOPERDAYS    NUMBER := TO_DATE(PENDDATE, 'YYYYMMDD') -
                           TO_DATE(PSTARTDATE, 'YYYYMMDD') + 1;
    VPREOPERDAYS NUMBER := TO_DATE(PSTARTDATE, 'YYYYMMDD') -
                           ADD_MONTHS(TO_DATE(PSTARTDATE, 'YYYYMMDD'), -1);
  
    VAVGCNT    OP.T_FN_NICE_MONTHLY_OPER.AVG_CNT%TYPE; -- 대당건수
    VAVGAMT    OP.T_FN_NICE_MONTHLY_OPER.AVG_AMT%TYPE; -- 건당출금액
    VDAYCNT    NUMBER; -- 일평균건수
    VDAYAMT    OP.T_FN_NICE_MONTHLY_OPER.DAY_AMT%TYPE; -- 전월평균일일실적
    VPREDAYAMT OP.T_FN_NICE_MONTHLY_OPER.PRE_DAY_AMT%TYPE; -- 전전월평균일일실적
  
    VSUMREALAMT    NUMBER(13); -- 실제지급금액합계
    VSUMWKDREALAMT NUMBER(13); -- 실제지급금액합계(주중)
    VSUMWEDREALAMT NUMBER(13); -- 실제지급금액합계(주말)
  
    VOPERENDDATE OP.T_FN_NICE_MONTHLY_OPER.END_DATE%TYPE; -- 실적 적용종료일자
    VRATEENDDATE OP.T_FN_NICE_SHARE_RATE.END_DATE%TYPE; -- 분담률 적용종료일자
  
  BEGIN
    /* 기존 데이타 삭제 */
    DELETE OP.T_FN_NICE_MONTHLY_OPER WHERE START_DATE = PSTDDATE;
  
    DELETE OP.T_FN_NICE_SHARE_RATE WHERE START_DATE = PSTDDATE;
  
    /************************************************ 
            이전 적용데이타 종료일자 세팅 
    ************************************************/
    -- 월별 기초데이타
    UPDATE OP.T_FN_NICE_MONTHLY_OPER
    SET END_DATE    = op.SF_GETBEFOREDATE(PSTDDATE),
        UPDATE_UID  = PUSERID,
        UPDATE_DATE = SYSDATE
    WHERE START_DATE = (SELECT --+ INDEX_DESC(t_fn_nice_monthly_oper, pk_t_fn_nice_monthly_oper)
                         START_DATE
                        FROM OP.T_FN_NICE_MONTHLY_OPER
                        WHERE START_DATE < PSTDDATE
                              AND ROWNUM = 1);
    -- 사무소 분담률
    UPDATE OP.T_FN_NICE_SHARE_RATE
    SET END_DATE    = op.SF_GETBEFOREDATE(PSTDDATE),
        UPDATE_UID  = PUSERID,
        UPDATE_DATE = SYSDATE
    WHERE START_DATE = (SELECT --+ INDEX_DESC(t_fn_nice_share_rate, pk_t_fn_nice_share_rate)
                         START_DATE
                        FROM OP.T_FN_NICE_SHARE_RATE
                        WHERE START_DATE < PSTDDATE
                              AND ROWNUM = 1);
  
    /****************************************************************
             현재 적용할 데이타 종료일자 계산
         - 이후 데이타 존재시 : 이후데이타의 시작일자 이전일
         - 이후 데이타 부재시 : cMaxDate('29991231')
    ***************************************************************/
    -- 월별 기초데이타
    BEGIN
      SELECT --+ INDEX(t_fn_nice_monthly_oper, pk_t_fn_nice_monthly_oper)
       op.SF_GETBEFOREDATE(START_DATE)
      INTO VOPERENDDATE
      FROM OP.T_FN_NICE_MONTHLY_OPER
      WHERE START_DATE > PSTDDATE
            AND ROWNUM = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        VOPERENDDATE := CMAXDATE;
    END;
  
    -- 사무소 분담률
    BEGIN
      SELECT --+ INDEX(t_fn_nice_share_rate, pk_t_fn_nice_share_rate)
       op.SF_GETBEFOREDATE(START_DATE)
      INTO VRATEENDDATE
      FROM OP.T_FN_NICE_SHARE_RATE
      WHERE START_DATE > PSTDDATE
            AND ROWNUM = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        VRATEENDDATE := CMAXDATE;
    END;
  
    /************************************** 
          기관별 월기초 테이블 생성 
    **************************************/
    FOR VORG IN VORGCUR LOOP
      /* 전전월 실적 */
      BEGIN
        /* hossong 입금수정
        SELECT NVL(SUM(nce.time_deal_amt), 0) 
              + NVL(SUM(nce.ot_deal_amt), 0) 
              + NVL(SUM(nce.night_deal_amt), 0)
          INTO vPreDayAmt
          FROM OP.t_fn_nice_org_dsum nce
         WHERE nce.deal_date BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(pStartDate, 'YYYYMMDD'), -1), 'YYYYMMDD')
                     AND TO_CHAR(TO_DATE(pStartDate, 'YYYYMMDD') - 1, 'YYYYMMDD')
           AND nce.deal_status     = '0'
           AND nce.deal_type     = '0'
            AND nce.org_cd          = vOrg.org_cd;
            */
        --    dbms_output.put_line('org2 : '||vOrg.org_cd);
      
        SELECT NVL(SUM(DECODE(DEAL_TYPE,
                              '0',
                              NCE.TIME_DEAL_AMT + NCE.OT_DEAL_AMT +
                              NCE.NIGHT_DEAL_AMT,
                              '1',
                              - (NCE.TIME_DEAL_AMT + NCE.OT_DEAL_AMT +
                                NCE.NIGHT_DEAL_AMT))),
                   0)
        INTO VPREDAYAMT
        FROM OP.T_FN_NICE_ORG_DSUM NCE
        WHERE NCE.DEAL_DATE BETWEEN
              TO_CHAR(ADD_MONTHS(TO_DATE(PSTARTDATE, 'YYYYMMDD'), -1),
                      'YYYYMMDD') AND
              TO_CHAR(TO_DATE(PSTARTDATE, 'YYYYMMDD') - 1, 'YYYYMMDD')
              AND NCE.DEAL_STATUS = '0'
              AND NCE.ORG_CD = VORG.ORG_CD;
      
        --   dbms_output.put_line('org2, vPreDayAmt : '||vOrg.org_cd||','||vPreDayAmt);
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VPREDAYAMT := 0;
      END;
    
      VPREDAYAMT := VPREDAYAMT / VPREOPERDAYS; -- 전전월 일평균실적
      VDAYCNT    := VORG.SUMCNT / VOPERDAYS; -- 일평균건수
      VDAYAMT    := VORG.SUMAMT / VOPERDAYS; -- 일평균실적
    
      -- dbms_output.put_line('vPreDayAmt : '||vPreDayAmt||','||vDayCnt||','||vDayAmt);
    
      IF VDAYCNT != 0 AND VORG.MACCNT != 0 THEN
        VAVGCNT := VDAYCNT / VORG.MACCNT; -- 대당건수
        VAVGAMT := VDAYAMT / VORG.MACCNT / VAVGCNT; -- 건당출금액
      ELSE
        VAVGCNT := 0;
        VAVGAMT := 0;
      END IF;
      -- dbms_output.put_line('vAvgCnt : '||vAvgCnt||','||vAvgAmt);
    
      -- dbms_output.put_line('insert : '||pStdDate||','||vOrg.org_cd||','||vOperEndDate||','||vOrg.macCnt||','||ROUND(vAvgCnt, 2)||','||ROUND(vAvgAmt,-1)||','||ROUND(vDayAmt)||','||ROUND(vPreDayAmt)||','||ROUND(vDayAmt / vPreDayAmt * 100, 1));      
      INSERT INTO OP.T_FN_NICE_MONTHLY_OPER
        (START_DATE,
         ORG_CD,
         END_DATE,
         MAC_CNT,
         AVG_CNT,
         AVG_AMT,
         DAY_AMT,
         PRE_DAY_AMT,
         INC_RATE,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      VALUES
        (PSTDDATE,
         VORG.ORG_CD,
         VOPERENDDATE,
         VORG.MACCNT,
         ROUND(VAVGCNT, 2), -- 대당건수
         ROUND(VAVGAMT, -1), -- 건당금액
         ROUND(VDAYAMT), -- 전월평균일일실적
         ROUND(VPREDAYAMT), -- 전전월평균일일실적
         CASE WHEN VPREDAYAMT = 0 THEN 0 ELSE CASE WHEN
         ROUND(VDAYAMT / VPREDAYAMT * 100, 1) >= 1000 THEN 999.9 ELSE
         ROUND(VDAYAMT / VPREDAYAMT * 100, 1) END END,
         --DECODE(vPreDayAmt, 0, 0, ROUND(vDayAmt / vPreDayAmt * 100, 1)),    -- 전전월대비증감율
         PUSERID,
         SYSDATE,
         PUSERID,
         SYSDATE);
    
    --dbms_output.put_line('org1 : '||vOrg.org_cd);
    
    END LOOP;
  
    /*********************** 
        실지급액 합계 
    ***********************/
    /* 주중, 주말 구분없다. */
    SELECT NVL(SUM(DECODE(DEAL_TYPE,
                          '0',
                          TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                          '1',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT),
                          '8',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT))),
               0)
    INTO VSUMREALAMT
    FROM OP.T_FN_NICE_TEAM_DSUM1
    WHERE DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
          AND DEAL_STATUS = '0';
  
    /* 주중 */
    SELECT NVL(SUM(DECODE(DEAL_TYPE,
                          '0',
                          TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                          '1',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT),
                          '8',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT))),
               0)
    INTO VSUMWKDREALAMT
    FROM OP.T_FN_NICE_TEAM_DSUM1 D,
         OP.T_FN_CALENDAR        C
    WHERE D.DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
          AND D.DEAL_STATUS = '0'
          AND D.DEAL_DATE = C.STD_DATE
          AND op.SF_GETWEEKDAY(C.STD_DATE) IN
          ('2', '3', '4', '5', '6');
  
    /* 주말  */
    SELECT NVL(SUM(DECODE(DEAL_TYPE,
                          '0',
                          TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT,
                          '1',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT),
                          '8',
                          - (TIME_DEAL_AMT + OT_DEAL_AMT + NIGHT_DEAL_AMT))),
               0)
    INTO VSUMWEDREALAMT
    FROM OP.T_FN_NICE_TEAM_DSUM1 D,
         OP.T_FN_CALENDAR        C
    WHERE D.DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
          AND D.DEAL_STATUS = '0'
          AND D.DEAL_DATE = C.STD_DATE
          AND op.SF_GETWEEKDAY(C.STD_DATE) IN ('1', '7');
  
    /********************************************
               사무소별 분담률 생성 
    *********************************************/
  
    INSERT INTO OP.T_FN_NICE_SHARE_RATE
      (START_DATE,
       DEPT_CD,
       OFFICE_CD,
       END_DATE,
       SHARE_RATE,
       SHARE_RATE_WKD, -- hossong추가
       SHARE_RATE_WED, --hossong추가
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PSTDDATE,
             OFC.DEPT_CD,
             OFC.OFFICE_CD,
             VRATEENDDATE,
             NVL(SUM.SHARE_RATE, 0),
             NVL(SUM_WKD.SHARE_RATE, 0),
             NVL(SUM_WED.SHARE_RATE, 0),
             PUSERID,
             SYSDATE,
             PUSERID,
             SYSDATE
      
      FROM (SELECT DEPT_CD,
                   OFFICE_CD
            FROM OP.T_CM_OFFICE O
            WHERE EXISTS (SELECT 1
                   FROM OP.T_CM_DEPT D
                   WHERE D.DEPT_TYPE = '1'
                        --AND d.dept_cd = o.dept_cd and dept_cd < '10')
                         AND D.DEPT_CD = O.DEPT_CD
                         AND (DEPT_CD < '10' OR
                         DEPT_CD || OFFICE_CD = '0570'))) OFC,
           
           (SELECT DEPT_CD,
                   OFFICE_CD,
                   NVL(SUM(DECODE(DEAL_TYPE,
                                  '0',
                                  TIME_DEAL_AMT + OT_DEAL_AMT +
                                  NIGHT_DEAL_AMT,
                                  '1',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT),
                                  '8',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT))),
                       0) / VSUMREALAMT * 100 SHARE_RATE
            FROM OP.T_FN_NICE_TEAM_DSUM1
            WHERE DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
                  AND DEAL_STATUS = '0'
            GROUP BY DEPT_CD,
                     OFFICE_CD) SUM, --전체
           (SELECT DEPT_CD,
                   OFFICE_CD,
                   NVL(SUM(DECODE(DEAL_TYPE,
                                  '0',
                                  TIME_DEAL_AMT + OT_DEAL_AMT +
                                  NIGHT_DEAL_AMT,
                                  '1',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT),
                                  '8',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT))),
                       0) / VSUMWKDREALAMT * 100 SHARE_RATE
            FROM OP.T_FN_NICE_TEAM_DSUM1 D,
                 OP.T_FN_CALENDAR        C
            WHERE D.DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
                  AND D.DEAL_STATUS = '0'
                  AND D.DEAL_DATE = C.STD_DATE
                  AND op.SF_GETWEEKDAY(C.STD_DATE) IN
                  ('2', '3', '4', '5', '6')
            GROUP BY DEPT_CD,
                     OFFICE_CD) SUM_WKD, --주중
           (SELECT DEPT_CD,
                   OFFICE_CD,
                   NVL(SUM(DECODE(DEAL_TYPE,
                                  '0',
                                  TIME_DEAL_AMT + OT_DEAL_AMT +
                                  NIGHT_DEAL_AMT,
                                  '1',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT),
                                  '8',
                                  - (TIME_DEAL_AMT + OT_DEAL_AMT +
                                    NIGHT_DEAL_AMT))),
                       0) / VSUMWEDREALAMT * 100 SHARE_RATE
            FROM OP.T_FN_NICE_TEAM_DSUM1 D,
                 OP.T_FN_CALENDAR        C
            WHERE D.DEAL_DATE BETWEEN PSTARTDATE AND PENDDATE
                  AND D.DEAL_STATUS = '0'
                  AND D.DEAL_DATE = C.STD_DATE
                  AND op.SF_GETWEEKDAY(C.STD_DATE) IN
                  ('2', '3', '4', '5', '6')
            GROUP BY DEPT_CD,
                     OFFICE_CD) SUM_WED -- 주말
      
      WHERE OFC.DEPT_CD = SUM.DEPT_CD
            AND OFC.OFFICE_CD = SUM.OFFICE_CD
            AND OFC.DEPT_CD = SUM_WKD.DEPT_CD
            AND OFC.OFFICE_CD = SUM_WKD.OFFICE_CD
            AND OFC.DEPT_CD = SUM_WED.DEPT_CD
            AND OFC.OFFICE_CD = SUM_WED.OFFICE_CD;
  
    DBMS_OUTPUT.PUT_LINE('t_fn_nice_share_rate1 완료 ');
  
    /***************************************** 
       100% 미달부분을 한빛사무소로 분배 
    *****************************************/
    INSERT INTO OP.T_FN_NICE_SHARE_RATE
      (START_DATE,
       DEPT_CD,
       OFFICE_CD,
       END_DATE,
       SHARE_RATE,
       SHARE_RATE_WKD, --hossong 주중
       SHARE_RATE_WED, --hossong 주말
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PSTDDATE,
             CHANBITDEPTCODE,
             CHANBITOFFICECODE,
             VRATEENDDATE,
             100 - SUM(SHARE_RATE),
             100 - SUM(SHARE_RATE_WKD),
             100 - SUM(SHARE_RATE_WED),
             PUSERID,
             SYSDATE,
             PUSERID,
             SYSDATE
      FROM OP.T_FN_NICE_SHARE_RATE
      WHERE START_DATE = PSTDDATE;
  
    DBMS_OUTPUT.PUT_LINE('t_fn_nice_share_rate2 완료 ');
  
    /********************************************************************** 
        고정일자금이 존재하는 기관의 여유율 조정 
        => 건수 여유율 = 1,
           금액 여유율 = 계산
    **********************************************************************/
    FOR VREC IN VAMTCUR LOOP
    
      /* 기존 데이타 삭제 */
      DELETE OP.T_FN_ORG_SPARE_RATE
      WHERE START_DATE = PSTDDATE
            AND ORG_CD = VREC.ORG_CD;
    
      /* 이전 여유율 적용종료일자 세팅 */
      UPDATE OP.T_FN_ORG_SPARE_RATE
      SET END_DATE    = op.SF_GETBEFOREDATE(PSTDDATE),
          UPDATE_UID  = PUSERID,
          UPDATE_DATE = SYSDATE
      WHERE START_DATE = (SELECT --+ INDEX_DESC(t_fn_org_spare_rate, pk_t_fn_org_spare_rate)
                           START_DATE
                          FROM OP.T_FN_ORG_SPARE_RATE
                          WHERE START_DATE < PSTDDATE
                                AND ORG_CD = VREC.ORG_CD
                                AND ROWNUM = 1)
            AND ORG_CD = VREC.ORG_CD;
    
      /* 현재 적용 여유율 종료일자 세팅 */
      BEGIN
        SELECT --+ INDEX(t_fn_org_spare_rate, pk_t_fn_org_spare_rate)
         op.SF_GETBEFOREDATE(START_DATE)
        INTO VOPERENDDATE
        FROM OP.T_FN_ORG_SPARE_RATE
        WHERE START_DATE > PSTDDATE
              AND ORG_CD = VREC.ORG_CD
              AND ROWNUM = 1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          VOPERENDDATE := CMAXDATE;
      END;
    
      DBMS_OUTPUT.PUT_LINE('t_fn_org_spare_rate1 시작  :' || VREC.ORG_CD);
      INSERT INTO OP.T_FN_ORG_SPARE_RATE
        (START_DATE,
         ORG_CD,
         END_DATE,
         ORD_CNT_RATE,
         ORD_AMT_RATE,
         WKD_CNT_RATE,
         WKD_AMT_RATE,
         MAC_CNT_FIX_YN,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PSTDDATE,
               ORG_CD,
               VOPERENDDATE,
               0,
               CASE
                 WHEN AVG_AMT * AVG_CNT * MAC_CNT = 0 THEN
                  0
                 ELSE
                  (VREC.NICE_ORD_AMT / (AVG_AMT * AVG_CNT * MAC_CNT) - 1) * 100
               END,
               0,
               CASE
                 WHEN AVG_AMT * AVG_CNT * MAC_CNT = 0 THEN
                  0
                 ELSE
                  (VREC.NICE_WKD_AMT / (AVG_AMT * AVG_CNT * MAC_CNT) - 1) * 100
               END,
               '1',
               PUSERID,
               SYSDATE,
               PUSERID,
               SYSDATE
        FROM OP.T_FN_NICE_MONTHLY_OPER
        WHERE START_DATE = PSTDDATE
              AND ORG_CD = VREC.ORG_CD;
      DBMS_OUTPUT.PUT_LINE('vRec.org_cd 시작 :' || VREC.ORG_CD);
    END LOOP;
  
    VRESULT := 'OK';
    DBMS_OUTPUT.PUT_LINE('오류라인 정의 : ' || VRESULT);
  
  EXCEPTION
    WHEN OTHERS THEN
      VRESULT := VRESULT || SQLERRM;
      DBMS_OUTPUT.PUT_LINE('오류라인 정의 : ' || VRESULT);
  END SP_CREATEMONTHLYDATA;

END PKG_FN_NICEDEMAND;

CREATE OR REPLACE PACKAGE BODY OP.PKG_FN_PACKDEMAND AS

  /* 기업 키오스크 */
  PROCEDURE SP_ONNURI_DSUM_DEMAND(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                  PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VBEFOREDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VPREACTDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPREPREACTDATE OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE,
                                                                                            2);
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    BEGIN
    
      ---------------------------------------------------  
    
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_ONNURI_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_ONNURI_DEMAND
        (DEMAND_DATE,
         DEPT_CD,
         OFFICE_CD,
         OWN_AMT,
         BASE_AMT,
         PRE_OUT_AMT,
         PRE_IN_AMT,
         TRANS_AMT,
         PRE_OWN_AMT,
         PRE_BASE_AMT,
         DEMAND_AMT,
         INSERT_DATE,
         INSERT_UID)
      
        SELECT PDEMANDDATE,
               S.DEPT_CD,
               S.OFFICE_CD,
               NVL(O.OWN_AMT, 0),
               NVL(B.BASE_AMT, 0),
               NVL(S.OUT_AMT, 0),
               NVL(S.IN_AMT, 0),
               NVL(S.TRANS_AMT, 0),
               NVL(PRE_A.OWN_AMT, 0),
               NVL(PRE_A.BASE_AMT, 0),
               NVL(O.OWN_AMT, 0) + NVL(B.BASE_AMT, 0) + NVL(S.OUT_AMT, 0) -
               NVL(S.IN_AMT, 0) - NVL(PRE_A.OWN_AMT, 0) -
               NVL(PRE_A.BASE_AMT, 0) DEMAND_AMT,
               SYSDATE,
               'SYSTEM'
          FROM (SELECT DEPT_CD,
                       OFFICE_CD,
                       SUM(OUT_AMT) OUT_AMT,
                       SUM(IN_AMT) IN_AMT,
                       SUM(TRANS_AMT) TRANS_AMT
                  FROM OP.T_FN_NICE_ONNURI_DSUM
                 WHERE DEAL_DATE >=
                       op.SF_GETAFTERPREACTDATE(op.SF_GETPREACTDATE(PDEMANDDATE)) -- 전전영업일익일
                   AND DEAL_DATE <=
                       op.SF_GETPREACTDATE(PDEMANDDATE) -- 전영업일
                 GROUP BY DEPT_CD, OFFICE_CD) S,
               (SELECT *
                  FROM OP.T_FN_ONNURI_DEMAND
                 WHERE DEMAND_DATE =
                       op.SF_GETPREACTDATE(PDEMANDDATE)) PRE_A,
               (SELECT DEPT_CD,
                       OFFICE_CD,
                       CASE
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                          NVL(MON_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                          NVL(TUE_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                          NVL(WED_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                          NVL(THU_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                          NVL(FRI_AMT, 0)
                       END OWN_AMT
                  FROM OP.T_FN_ONNURI_BASE
                 WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
                   AND GUBUN_CD = '1') O,
               (SELECT DEPT_CD,
                       OFFICE_CD,
                       CASE
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                          NVL(MON_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                          NVL(TUE_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                          NVL(WED_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                          NVL(THU_AMT, 0)
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                          NVL(FRI_AMT, 0)
                       END BASE_AMT
                  FROM OP.T_FN_ONNURI_BASE
                 WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
                   AND GUBUN_CD = '2') B
         WHERE S.DEPT_CD = PRE_A.DEPT_CD(+)
           AND S.OFFICE_CD = PRE_A.OFFICE_CD(+)
           AND S.DEPT_CD = O.DEPT_CD(+)
           AND S.OFFICE_CD = O.OFFICE_CD(+)
           AND S.DEPT_CD = B.DEPT_CD(+)
           AND S.OFFICE_CD = B.OFFICE_CD(+);
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand_kib.sp_onnuri_dsum_demand',
                                          VRESULT,
                                          PDEMANDDATE);
  
  END SP_ONNURI_DSUM_DEMAND;

  /* 일괄관리 기관, 지점별 마감일 기준 재고데이타 생성 */
  PROCEDURE SP_KIB_DSUM_DEMAND(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                               PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VBEFOREDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VPREACTDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPREPREACTDATE OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE,
                                                                                            2);
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_KIB_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_KIB_DEMAND
        (DEMAND_DATE,
         DEPT_CD,
         OFFICE_CD,
         BASE_AMT,
         PRE_BASE_AMT,
         PRE_OUT_AMT,
         PRE_IN_AMT,
         RETURN_AMT,
         DEMAND_AMT,
         PRE24_STOCK_AMT,
         INSERT_DATE,
         INSERT_UID)
      
        SELECT PDEMANDDATE,
               CC.DEPT_CD,
               CC.OFFICE_CD,
               NVL(CC.BASE_AMT, 0),
               NVL(BB.PRE_BASE_AMT, 0),
               NVL(AA.OUT_AMT, 0),
               NVL(AA.IN_AMT, 0),
               NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
               NVL(AA.IN_AMT, 0) RETURN_AMT,
               NVL(CC.BASE_AMT, 0) -
               (NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
                NVL(AA.IN_AMT, 0)) DEMAND_AMT,
               NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
               NVL(AA.IN_AMT, 0) +
               (NVL(CC.BASE_AMT, 0) -
                (NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
                 NVL(AA.IN_AMT, 0))) PRE24_STOCK_AMT,
               SYSDATE,
               'SYSTEM'
        
          FROM (SELECT C.FDEPT_CD DEPT_CD,
                       C.FOFFICE_CD OFFICE_CD,
                       SUM(OUT_TOTAL_AMT) OUT_AMT,
                       SUM(IN_TOTAL_AMT) IN_AMT
                  FROM OP.T_FN_KIB_MAC_DSUM A, OP.T_CM_MAC B, OP.T_CM_SITE C
                 WHERE A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                   AND A.DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY C.FDEPT_CD, C.FOFFICE_CD
                
                ) AA,
               
               (SELECT DEPT_CD, OFFICE_CD, BASE_AMT PRE_BASE_AMT
                
                  FROM OP.T_FN_KIB_DEMAND
                 WHERE DEMAND_DATE = VPREACTDATE) BB,
               (SELECT DEPT_CD,
                       OFFICE_CD,
                       CASE
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                          MON_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                          TUE_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                          WED_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                          THU_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                          FRI_AMT
                         ELSE
                          0
                       END BASE_AMT
                
                  FROM OP.T_FN_KIBANK_BASE
                 WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
                
                --> 방식변경
                --===> 20130619 롯데피에스넷 테스트 후 마킹된 부분으로 대체 by BHJ
                /*      select dept_cd,
                             office_cd,
                             sum(case when  op.sf_getWeekday(pDemandDate)='2' then mon_amt
                                  when  op.sf_getWeekday(pDemandDate)='3' then tue_amt
                                  when  op.sf_getWeekday(pDemandDate)='4' then wed_amt
                                  when  op.sf_getWeekday(pDemandDate)='5' then thu_amt
                                  when  op.sf_getWeekday(pDemandDate)='6' then fri_amt
                                  else 0 end) base_amt
                      from  op.t_fn_kibank_base_MAC
                      where pDemandDate between start_date and end_date
                      group by dept_cd, office_cd
                --<===*/
                
                ) CC
        
         WHERE CC.DEPT_CD = BB.DEPT_CD(+)
           AND CC.OFFICE_CD = BB.OFFICE_CD(+)
           AND CC.DEPT_CD = AA.DEPT_CD(+)
           AND CC.OFFICE_CD = AA.OFFICE_CD(+);
      /*   where aa.dept_Cd = bb.dept_Cd (+)
      and   aa.office_cd = bb.office_cd (+)
      and   aa.dept_Cd = cc.dept_Cd (+)
      and   aa.office_cd = cc.office_cd (+); */
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    --- 삼성생명 추가(정희성)  
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_SSLIFE_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_SSLIFE_DEMAND
        (DEMAND_DATE,
         DEPT_CD,
         OFFICE_CD,
         BASE_AMT,
         PRE_BASE_AMT,
         PRE_OUT_AMT,
         PRE_IN_AMT,
         RETURN_AMT,
         DEMAND_AMT,
         PRE24_STOCK_AMT,
         INSERT_DATE,
         INSERT_UID)
      
        SELECT PDEMANDDATE,
               CC.DEPT_CD,
               CC.OFFICE_CD,
               NVL(CC.BASE_AMT, 0),
               NVL(BB.PRE_BASE_AMT, 0),
               NVL(AA.OUT_AMT, 0),
               NVL(AA.IN_AMT, 0),
               NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
               NVL(AA.IN_AMT, 0) RETURN_AMT,
               NVL(CC.BASE_AMT, 0) -
               (NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
                NVL(AA.IN_AMT, 0)) DEMAND_AMT,
               NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
               NVL(AA.IN_AMT, 0) +
               (NVL(CC.BASE_AMT, 0) -
                (NVL(BB.PRE_BASE_AMT, 0) - NVL(AA.OUT_AMT, 0) +
                 NVL(AA.IN_AMT, 0))) PRE24_STOCK_AMT,
               SYSDATE,
               'SYSTEM'
        
          FROM (SELECT C.FDEPT_CD DEPT_CD,
                       C.FOFFICE_CD OFFICE_CD,
                       SUM(A.OUT_AMT) OUT_AMT,
                       SUM(A.IN_AMT) IN_AMT
                  FROM OP.T_FN_CLOSE A, OP.T_CM_MAC B, OP.T_CM_SITE C
                 WHERE A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                   AND A.ORG_CD = '0SL'
                   AND A.CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY C.FDEPT_CD, C.FOFFICE_CD) AA,
               
               (SELECT DEPT_CD, OFFICE_CD, BASE_AMT PRE_BASE_AMT
                
                  FROM OP.T_FN_SSLIFE_DEMAND
                 WHERE DEMAND_DATE = VPREACTDATE) BB,
               (SELECT DEPT_CD,
                       OFFICE_CD,
                       CASE
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                          MON_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                          TUE_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                          WED_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                          THU_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                          FRI_AMT
                         ELSE
                          0
                       END BASE_AMT
                
                  FROM OP.T_FN_SSLIFE_BASE
                 WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE) CC
        
         WHERE CC.DEPT_CD = BB.DEPT_CD(+)
           AND CC.OFFICE_CD = BB.OFFICE_CD(+)
           AND CC.DEPT_CD = AA.DEPT_CD(+)
           AND CC.OFFICE_CD = AA.OFFICE_CD(+);
      /*   where aa.dept_Cd = bb.dept_Cd (+)
      and   aa.office_cd = bb.office_cd (+)
      and   aa.dept_Cd = cc.dept_Cd (+)
      and   aa.office_cd = cc.office_cd (+); */
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand_kib.sp_kib_dsum_demand',
                                          VRESULT,
                                          PDEMANDDATE);
  
  END SP_KIB_DSUM_DEMAND;

  /* 일괄관리 사무소, 기관, 운영형태별 마감일 기준 재고데이타 생성 */
  PROCEDURE SP_CREATEPACKINVENT(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VBEFOREDATE      OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VPREACTDATE      OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPREPREACTDATE   OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE,
                                                                                              2);
    VAFTERPREACTDATE OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETAFTERPREACTDATE(PDEMANDDATE); --전역업일익일        
    VRESULT          OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN     
      /* FOR문 주석처리하고 OP.T_FN_SEND 추가되었음. 2014.11.20(오라클vsDB2 비교작업) */
      /*
      FOR j IN
      (
                 SELECT ORG_CD, BRANCH_CD, MAC_NO
                  FROM OP.T_FN_SENDPLAN
                  --WHERE SEND_DATE =  op.sf_getPostActDate(pDemandDate)
                  WHERE SEND_DATE =  pDemandDate
                  AND   ORG_CD = '039'
                  AND   CANCEL_TYPE = '0'
                  AND   CONFIRM_YN = '1'
      )
      LOOP         
              UPDATE OP.t_fn_send
                 SET add_cash_date = pDemandDate
              WHERE  SEND_DATE >= TO_CHAR(TO_DATE(pDemandDate, 'YYYYMMDD')-30, 'YYYYMMDD')
                AND  SEND_DATE < pDemandDate
                AND  ORG_CD   = j.org_cd
                AND  BRANCH_CD = j.jijum_cd
                AND  MAC_NO   = j.mac_no
                AND  ADD_CASH_DATE IS NULL
                AND  SEND_TYPE = '2'
                AND  SEND_STATUS = '2';
        
      END LOOP;
      */
      UPDATE OP.T_FN_SEND
         SET ADD_CASH_DATE = PDEMANDDATE
       WHERE ORG_CD = '039'
         AND SEND_TYPE = '2'
         AND SEND_STATUS = '2'
         AND SEND_DATE >= op.SF_GETPREACTDATE(PDEMANDDATE)
         AND SEND_DATE <= op.SF_GETBEFOREDATE(PDEMANDDATE);
    
      COMMIT;
    
    END;
    /* 경남은행 추가 현송 시 추가적용일 필드 채워주는 작업 2012.09.27 방혜진 <===*/
  
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_PACK_INVENT WHERE CLOSE_DATE = VPREACTDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_PACK_INVENT
        (CLOSE_DATE,
         DEPT_CD,
         OFFICE_CD,
         ORG_CD,
         OPER_TYPE,
         TRANS_AMT,
         RETURN_AMT,
         OPER_AMT,
         ORD_SEND_AMT,
         PLUS_SEND_AMT,
         OUT_AMT,
         IN_AMT,
         CLOSE_AMT,
         DIFFER_AMT,
         PRE_MAC_AMT,
         PRE_SAFE_AMT,
         MAC_AMT,
         SAFE_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT VPREACTDATE,
               DEPT_CD,
               OFFICE_CD,
               ORG_CD,
               OPER_TYPE,
               NVL(SUM(TRANS_AMT), 0),
               NVL(SUM(RETURN_AMT), 0),
               NVL(SUM(OPER_AMT), 0),
               NVL(SUM(ORD_SEND_AMT), 0),
               NVL(SUM(PLUS_SEND_AMT), 0),
               NVL(SUM(OUT_AMT), 0),
               NVL(SUM(IN_AMT), 0),
               NVL(SUM(CLOSE_AMT), 0),
               NVL(SUM(DIFFER_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0),
               NVL(SUM(PRE_SAFE_AMT), 0),
               -- NVL(SUM(pre_mac_amt),    02007-12-13)
               NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
               NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
               NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
               CASE
                 WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                  0
                 ELSE
                  NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                  - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                  NVL(SUM(ORD_SEND_AMT), 0) - NVL(SUM(PLUS_SEND_AMT), 0) +
                  NVL(SUM(CLOSE_AMT), 0) + NVL(SUM(DIFFER_AMT), 0)
               END,
               'SYSTEM',
               SYSDATE,
               'SYSTEM',
               SYSDATE
          FROM (SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       '1' OPER_TYPE,
                       DECODE(TRANS_TYPE, '1', -TRANS_AMT, '2', TRANS_AMT) TRANS_AMT,
                       0 RETURN_AMT,
                       0 OPER_AMT,
                       0 ORD_SEND_AMT,
                       0 PLUS_SEND_AMT,
                       0 OUT_AMT,
                       0 IN_AMT,
                       0 CLOSE_AMT,
                       0 DIFFER_AMT,
                       0 PRE_MAC_AMT,
                       0 PRE_SAFE_AMT
                  FROM OP.T_FN_TRANS
                 WHERE TRANS_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       '1',
                       0,
                       RETURN_AMT,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_RETURN
                 WHERE RETURN_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       OPER_TYPE,
                       0,
                       0,
                       DEMAND_AMT,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_PACK_DEMAND
                 WHERE DEMAND_DATE = VPREACTDATE
                UNION ALL
                SELECT SIT.FDEPT_CD,
                       SIT.FOFFICE_CD,
                       AMT.ORG_CD,
                       DECODE(SIT.OPER_TYPE, CCVSOPERTYPE, '2', '1') OPER_TYPE,
                       0,
                       0,
                       0,
                       AMT.ORD_SEND_AMT,
                       AMT.PLUS_SEND_AMT,
                       AMT.OUT_AMT,
                       AMT.IN_AMT,
                       AMT.CLOSE_AMT,
                       AMT.DIFFER_AMT,
                       0,
                       0
                  FROM (SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               DECODE(SEND_TYPE, '1', SEND_AMT) ORD_SEND_AMT,
                               DECODE(SEND_STATUS,
                                      '2',
                                      DECODE(SEND_TYPE,
                                             '2',
                                             SEND_AMT,
                                             '4',
                                             SEND_AMT),
                                      0) PLUS_SEND_AMT,
                               0 OUT_AMT,
                               0 IN_AMT,
                               0 CLOSE_AMT,
                               0 DIFFER_AMT
                          FROM OP.T_FN_SEND
                         WHERE SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                              -- 2004.03.16수정  AND cancel_type  = '0'
                           AND SEND_STATUS >= '1'
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               0,
                               0,
                               OUT_AMT,
                               IN_AMT,
                               CLOSE_AMT,
                               0
                          FROM OP.T_FN_CLOSE
                         WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DEAL_AMT
                          FROM OP.T_FN_NOTEND
                         WHERE NOTEND_DATE BETWEEN VPREACTDATE AND
                               VBEFOREDATE
                           AND OWNER_ORG_CD !=
                               OP.PKG_FN_NICEDEMAND.CNICEORGCODE) AMT,
                       OP.T_CM_SITE SIT,
                       OP.T_CM_MAC MAC
                 WHERE AMT.ORG_CD = MAC.ORG_CD
                   AND AMT.BRANCH_CD = MAC.BRANCH_CD
                   AND AMT.MAC_NO = MAC.MAC_NO
                   AND MAC.ORG_CD = SIT.ORG_CD
                   AND MAC.BRANCH_CD = SIT.BRANCH_CD
                   AND MAC.SITE_CD = SIT.SITE_CD
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       OPER_TYPE,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       MAC_AMT,
                       SAFE_AMT
                  FROM OP.T_FN_PACK_INVENT
                 WHERE CLOSE_DATE = VPREPREACTDATE)
         WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
         GROUP BY DEPT_CD, OFFICE_CD, ORG_CD, OPER_TYPE;
    
      --=============================================================
      FOR J IN (SELECT ORG_CD ORGCODE,
                       DEPT_CD DEPTCODE,
                       OFFICE_CD OFFICECODE,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                             ELSE
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                           END) OUTAMT,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                              IN_CHULNAP
                             ELSE
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                           END) INAMT
                  FROM OP.T_FN_CALMAC_DSUM
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, DEPT_CD, OFFICE_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT
           SET OUT_AMT = J.OUTAMT,
               IN_AMT  = J.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         J.INAMT - J.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = J.DEPTCODE
           AND OFFICE_CD = J.OFFICECODE
           AND ORG_CD = J.ORGCODE;
      
      END LOOP;
    
      --=============================================================      
      -- kib 
      --=============================================================
      FOR I IN (SELECT A.ORG_CD ORGCODE,
                       C.FDEPT_CD DEPTCODE,
                       C.FOFFICE_CD OFFICECODE,
                       SUM(A.OUT_TOTAL_AMT) OUTAMT,
                       SUM(A.IN_TOTAL_AMT) INAMT
                  FROM OP.T_FN_KIB_MAC_DSUM A, OP.T_CM_MAC B, OP.T_CM_SITE C
                 WHERE A.DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                 GROUP BY A.ORG_CD, C.FDEPT_CD, C.FOFFICE_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT
           SET OUT_AMT = I.OUTAMT,
               IN_AMT  = I.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         I.INAMT - I.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = I.DEPTCODE
           AND OFFICE_CD = I.OFFICECODE
           AND ORG_CD = I.ORGCODE;
      
      END LOOP;
    
      --=============================================================      
    
      --=============================================================      
      -- kk 키오스크 
      --=============================================================
      FOR M IN (SELECT '0KK' ORGCODE,
                       A.DEPT_CD DEPTCODE,
                       A.OFFICE_CD OFFICECODE,
                       SUM(A.OUT_AMT) OUTAMT,
                       SUM(A.IN_AMT) INAMT
                  FROM OP.T_FN_NICE_ONNURI_DSUM A
                 WHERE A.DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY A.DEPT_CD, A.OFFICE_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = M.DEPTCODE
           AND OFFICE_CD = M.OFFICECODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
    
      --=============================================================    
    
      --=============================================================      
      -- 공항 키오스크 
      --=============================================================
      FOR M IN (SELECT '0TR' ORGCODE,
                       A.DEPT_CD DEPTCODE,
                       A.OFFICE_CD OFFICECODE,
                       SUM(A.CASH_OUT_AMT) OUTAMT,
                       0 INAMT
                  FROM OP.T_FN_DAY_CLOSE_KTIS A
                 WHERE A.CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND A.CLOSE_TYPE = 'NICE'
                 GROUP BY A.DEPT_CD, A.OFFICE_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = M.DEPTCODE
           AND OFFICE_CD = M.OFFICECODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
    
      --=============================================================    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    -- 전일과 전영업일이 같은가 ? --> 평일              
  
    BEGIN
      -- 신한은행 제고 맞추기
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_PACK_INVENT_SH WHERE CLOSE_DATE = VPREACTDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      -- 전일과 전영업일이 다른가? --> 휴일다음날 
      IF VBEFOREDATE <> VPREACTDATE THEN
      
        INSERT INTO OP.T_FN_PACK_INVENT_SH
          (CLOSE_DATE,
           DEPT_CD,
           OFFICE_CD,
           ORG_CD,
           OPER_TYPE,
           TRANS_AMT,
           RETURN_AMT,
           OPER_AMT,
           ORD_SEND_AMT,
           PRE_PLUS_WK_SEND_AMT, --전일휴일추가
           PLUS_SEND_AMT, --당일 하루치 추가현송
           OUT_AMT,
           IN_AMT,
           CLOSE_AMT,
           DIFFER_AMT,
           PRE_MAC_AMT,
           PRE_SAFE_AMT,
           PLUS_WK_SEND_AMT, --휴일추가
           MAC_AMT,
           SAFE_AMT,
           MAC_AMT2, --당일기기2
           SAFE_AMT2, -- 당일금고2          
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE)
        
          SELECT VPREACTDATE,
                 DEPT_CD,
                 OFFICE_CD,
                 ORG_CD,
                 OPER_TYPE,
                 NVL(SUM(TRANS_AMT), 0),
                 NVL(SUM(RETURN_AMT), 0),
                 NVL(SUM(OPER_AMT), 0),
                 NVL(SUM(ORD_SEND_AMT), 0),
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0),
                 NVL(SUM(PLUS_SEND_AMT), 0),
                 NVL(SUM(OUT_AMT), 0),
                 NVL(SUM(IN_AMT), 0),
                 NVL(SUM(CLOSE_AMT), 0),
                 NVL(SUM(DIFFER_AMT), 0),
                 NVL(SUM(PRE_MAC_AMT), 0),
                 NVL(SUM(PRE_SAFE_AMT), 0),
                 NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 -- NVL(SUM(pre_mac_amt),    02007-12-13)           
                 NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) +
                 NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
                 NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
                 
                 CASE
                   WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                    0
                   ELSE
                    NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                    - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                    NVL(SUM(ORD_SEND_AMT), 0) - NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) -
                    NVL(SUM(PLUS_SEND_AMT), 0) + NVL(SUM(CLOSE_AMT), 0) +
                    NVL(SUM(DIFFER_AMT), 0)
                 END,
                 
                 NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) +
                 NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
                 NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0) +
                 NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 
                 CASE
                   WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                    0
                   ELSE
                    NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                    - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                    NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) - NVL(SUM(ORD_SEND_AMT), 0) -
                    NVL(SUM(PLUS_SEND_AMT), 0) + NVL(SUM(CLOSE_AMT), 0) +
                    NVL(SUM(DIFFER_AMT), 0)
                 END - NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 
                 'SYSTEM',
                 SYSDATE,
                 'SYSTEM',
                 SYSDATE
          
            FROM (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         '1' OPER_TYPE,
                         DECODE(TRANS_TYPE, '1', -TRANS_AMT, '2', TRANS_AMT) TRANS_AMT,
                         0 RETURN_AMT,
                         0 OPER_AMT,
                         0 ORD_SEND_AMT,
                         0 PRE_PLUS_WK_SEND_AMT,
                         0 PLUS_SEND_AMT,
                         0 OUT_AMT,
                         0 IN_AMT,
                         0 CLOSE_AMT,
                         0 DIFFER_AMT,
                         0 PRE_MAC_AMT,
                         0 PRE_SAFE_AMT,
                         0 PLUS_WK_SEND_AMT
                    FROM OP.T_FN_TRANS
                   WHERE TRANS_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         '1',
                         0,
                         RETURN_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_RETURN
                   WHERE RETURN_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                     AND ORG_CD = '088'
                  
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         DEMAND_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_PACK_DEMAND
                   WHERE DEMAND_DATE = VPREACTDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  
                  --전영업일 휴일추가
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         0,
                         0,
                         PLUS_WK_SEND_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_PACK_INVENT_SH
                   WHERE CLOSE_DATE = VPREPREACTDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  
                  SELECT SIT.FDEPT_CD,
                         SIT.FOFFICE_CD,
                         AMT.ORG_CD,
                         DECODE(SIT.OPER_TYPE, CCVSOPERTYPE, '2', '1') OPER_TYPE,
                         0,
                         0,
                         0,
                         AMT.ORD_SEND_AMT,
                         0,
                         AMT.PLUS_SEND_AMT,
                         AMT.OUT_AMT,
                         AMT.IN_AMT,
                         AMT.CLOSE_AMT,
                         AMT.DIFFER_AMT,
                         0,
                         0,
                         AMT.PLUS_WK_SEND_AMT
                    FROM (SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 DECODE(SEND_TYPE, '1', SEND_AMT) ORD_SEND_AMT,
                                 0 PRE_PLUS_WK_SEND_AMT,
                                 0 PLUS_SEND_AMT,
                                 0 OUT_AMT,
                                 0 IN_AMT,
                                 0 CLOSE_AMT,
                                 0 DIFFER_AMT,
                                 0 PLUS_WK_SEND_AMT
                          
                            FROM OP.T_FN_SEND
                           WHERE SEND_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                                -- 2004.03.16수정  AND cancel_type  = '0'
                             AND SEND_STATUS >= '1'
                          
                          UNION ALL
                          
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0 ORD_SEND_AMT,
                                 0 PRE_PLUS_WK_SEND_AMT,
                                 DECODE(SEND_STATUS,
                                        '2',
                                        DECODE(SEND_TYPE,
                                               '2',
                                               SEND_AMT,
                                               '4',
                                               SEND_AMT),
                                        0) PLUS_SEND_AMT,
                                 0 OUT_AMT,
                                 0 IN_AMT,
                                 0 CLOSE_AMT,
                                 0 DIFFER_AMT,
                                 0 PLUS_WK_SEND_AMT
                            FROM OP.T_FN_SEND
                           WHERE SEND_DATE = VPREACTDATE
                                -- 2004.03.16수정  AND cancel_type  = '0'
                             AND SEND_STATUS >= '1'
                          
                          UNION ALL
                          
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0,
                                 0         PRE_PLUS_WK_SEND_AMT,
                                 0,
                                 OUT_AMT,
                                 IN_AMT,
                                 CLOSE_AMT,
                                 0,
                                 0         PLUS_WK_SEND_AMT
                            FROM OP.T_FN_CLOSE
                           WHERE CLOSE_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                          UNION ALL
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0,
                                 0         PRE_PLUS_WK_SEND_AMT,
                                 0,
                                 0,
                                 0,
                                 0,
                                 DEAL_AMT,
                                 0         PLUS_WK_SEND_AMT
                            FROM OP.T_FN_NOTEND
                           WHERE NOTEND_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                             AND OWNER_ORG_CD !=
                                 OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                          
                          UNION ALL
                          -- 휴일                  
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0 ORD_SEND_AMT,
                                 0 PRE_PLUS_WK_SEND_AMT,
                                 0 PLUS_SEND_AMT,
                                 0 OUT_AMT,
                                 0 IN_AMT,
                                 0 CLOSE_AMT,
                                 0 DIFFER_AMT,
                                 DECODE(SEND_STATUS,
                                        '2',
                                        DECODE(SEND_TYPE,
                                               '2',
                                               SEND_AMT,
                                               '4',
                                               SEND_AMT),
                                        0) PLUS_WK_SEND_AMT
                            FROM OP.T_FN_SEND
                           WHERE SEND_DATE BETWEEN VAFTERPREACTDATE AND
                                 VBEFOREDATE
                                -- 2004.03.16수정  AND cancel_type  = '0'
                             AND SEND_STATUS >= '1') AMT,
                         
                         OP.T_CM_SITE SIT,
                         OP.T_CM_MAC  MAC
                   WHERE AMT.ORG_CD = MAC.ORG_CD
                     AND AMT.BRANCH_CD = MAC.BRANCH_CD
                     AND AMT.MAC_NO = MAC.MAC_NO
                     AND MAC.ORG_CD = SIT.ORG_CD
                     AND MAC.BRANCH_CD = SIT.BRANCH_CD
                     AND MAC.SITE_CD = SIT.SITE_CD
                     AND AMT.ORG_CD = '088'
                  
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         MAC_AMT,
                         SAFE_AMT,
                         0
                    FROM OP.T_FN_PACK_INVENT_SH
                   WHERE CLOSE_DATE = VPREPREACTDATE
                     AND ORG_CD = '088')
           WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
           GROUP BY DEPT_CD, OFFICE_CD, ORG_CD, OPER_TYPE;
      
      ELSE
        --평일  
      
        INSERT INTO OP.T_FN_PACK_INVENT_SH
          (CLOSE_DATE,
           DEPT_CD,
           OFFICE_CD,
           ORG_CD,
           OPER_TYPE,
           TRANS_AMT,
           RETURN_AMT,
           OPER_AMT,
           ORD_SEND_AMT,
           PRE_PLUS_WK_SEND_AMT, --전일휴일추가
           PLUS_SEND_AMT, --당일 하루치 추가현송
           OUT_AMT,
           IN_AMT,
           CLOSE_AMT,
           DIFFER_AMT,
           PRE_MAC_AMT,
           PRE_SAFE_AMT,
           PLUS_WK_SEND_AMT, --휴일추가
           MAC_AMT,
           SAFE_AMT,
           MAC_AMT2, --당일기기2
           SAFE_AMT2, -- 당일금고2          
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE)
        
          SELECT VPREACTDATE,
                 DEPT_CD,
                 OFFICE_CD,
                 ORG_CD,
                 OPER_TYPE,
                 NVL(SUM(TRANS_AMT), 0),
                 NVL(SUM(RETURN_AMT), 0),
                 NVL(SUM(OPER_AMT), 0),
                 NVL(SUM(ORD_SEND_AMT), 0),
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0),
                 NVL(SUM(PLUS_SEND_AMT), 0),
                 NVL(SUM(OUT_AMT), 0),
                 NVL(SUM(IN_AMT), 0),
                 NVL(SUM(CLOSE_AMT), 0),
                 NVL(SUM(DIFFER_AMT), 0),
                 NVL(SUM(PRE_MAC_AMT), 0),
                 NVL(SUM(PRE_SAFE_AMT), 0),
                 NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 -- NVL(SUM(pre_mac_amt),    02007-12-13)           
                 NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) +
                 NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
                 NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
                 
                 CASE
                   WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                    0
                   ELSE
                    NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                    - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                    NVL(SUM(ORD_SEND_AMT), 0) -
                    NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) -
                    NVL(SUM(PLUS_SEND_AMT), 0) + NVL(SUM(CLOSE_AMT), 0) +
                    NVL(SUM(DIFFER_AMT), 0)
                 END,
                 
                 NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
                 NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) +
                 NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
                 NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0) +
                 NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 
                 CASE
                   WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                    0
                   ELSE
                    NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                    - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                    NVL(SUM(ORD_SEND_AMT), 0) -
                    NVL(SUM(PRE_PLUS_WK_SEND_AMT), 0) -
                    NVL(SUM(PLUS_SEND_AMT), 0) + NVL(SUM(CLOSE_AMT), 0) +
                    NVL(SUM(DIFFER_AMT), 0)
                 END - NVL(SUM(PLUS_WK_SEND_AMT), 0),
                 
                 'SYSTEM',
                 SYSDATE,
                 'SYSTEM',
                 SYSDATE
          
            FROM (SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         '1' OPER_TYPE,
                         DECODE(TRANS_TYPE, '1', -TRANS_AMT, '2', TRANS_AMT) TRANS_AMT,
                         0 RETURN_AMT,
                         0 OPER_AMT,
                         0 ORD_SEND_AMT,
                         0 PRE_PLUS_WK_SEND_AMT,
                         0 PLUS_SEND_AMT,
                         0 OUT_AMT,
                         0 IN_AMT,
                         0 CLOSE_AMT,
                         0 DIFFER_AMT,
                         0 PRE_MAC_AMT,
                         0 PRE_SAFE_AMT,
                         0 PLUS_WK_SEND_AMT
                    FROM OP.T_FN_TRANS
                   WHERE TRANS_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         '1',
                         0,
                         RETURN_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_RETURN
                   WHERE RETURN_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                     AND ORG_CD = '088'
                  
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         DEMAND_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_PACK_DEMAND
                   WHERE DEMAND_DATE = VPREACTDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  
                  --전영업일 휴일추가
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         0,
                         0,
                         PLUS_WK_SEND_AMT,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0
                    FROM OP.T_FN_PACK_INVENT_SH
                   WHERE CLOSE_DATE = VPREPREACTDATE
                     AND ORG_CD = '088'
                  UNION ALL
                  
                  SELECT SIT.FDEPT_CD,
                         SIT.FOFFICE_CD,
                         AMT.ORG_CD,
                         DECODE(SIT.OPER_TYPE, CCVSOPERTYPE, '2', '1') OPER_TYPE,
                         0,
                         0,
                         0,
                         AMT.ORD_SEND_AMT,
                         0,
                         AMT.PLUS_SEND_AMT,
                         AMT.OUT_AMT,
                         AMT.IN_AMT,
                         AMT.CLOSE_AMT,
                         AMT.DIFFER_AMT,
                         0,
                         0,
                         0
                    FROM (SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 DECODE(SEND_TYPE, '1', SEND_AMT) ORD_SEND_AMT,
                                 0 PRE_PLUS_WK_SEND_AMT,
                                 0 PLUS_SEND_AMT,
                                 0 OUT_AMT,
                                 0 IN_AMT,
                                 0 CLOSE_AMT,
                                 0 DIFFER_AMT,
                                 0 PLUS_WK_SEND_AMT
                          
                            FROM OP.T_FN_SEND
                           WHERE SEND_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                                -- 2004.03.16수정  AND cancel_type  = '0'
                             AND SEND_STATUS >= '1'
                          
                          UNION ALL
                          
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0 ORD_SEND_AMT,
                                 0 PRE_PLUS_WK_SEND_AMT,
                                 DECODE(SEND_STATUS,
                                        '2',
                                        DECODE(SEND_TYPE,
                                               '2',
                                               SEND_AMT,
                                               '4',
                                               SEND_AMT),
                                        0) PLUS_SEND_AMT,
                                 0 OUT_AMT,
                                 0 IN_AMT,
                                 0 CLOSE_AMT,
                                 0 DIFFER_AMT,
                                 0 PLUS_WK_SEND_AMT
                            FROM OP.T_FN_SEND
                           WHERE SEND_DATE = VPREACTDATE
                                -- 2004.03.16수정  AND cancel_type  = '0'
                             AND SEND_STATUS >= '1'
                          
                          UNION ALL
                          
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0,
                                 0         PRE_PLUS_WK_SEND_AMT,
                                 0,
                                 OUT_AMT,
                                 IN_AMT,
                                 CLOSE_AMT,
                                 0,
                                 0         PLUS_WK_SEND_AMT
                            FROM OP.T_FN_CLOSE
                           WHERE CLOSE_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                          UNION ALL
                          SELECT ORG_CD,
                                 BRANCH_CD,
                                 MAC_NO,
                                 0,
                                 0         PRE_PLUS_WK_SEND_AMT,
                                 0,
                                 0,
                                 0,
                                 0,
                                 DEAL_AMT,
                                 0         PLUS_WK_SEND_AMT
                            FROM OP.T_FN_NOTEND
                           WHERE NOTEND_DATE BETWEEN VPREACTDATE AND
                                 VBEFOREDATE
                             AND OWNER_ORG_CD !=
                                 OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                          
                          ) AMT,
                         
                         OP.T_CM_SITE SIT,
                         OP.T_CM_MAC  MAC
                   WHERE AMT.ORG_CD = MAC.ORG_CD
                     AND AMT.BRANCH_CD = MAC.BRANCH_CD
                     AND AMT.MAC_NO = MAC.MAC_NO
                     AND MAC.ORG_CD = SIT.ORG_CD
                     AND MAC.BRANCH_CD = SIT.BRANCH_CD
                     AND MAC.SITE_CD = SIT.SITE_CD
                     AND AMT.ORG_CD = '088'
                  
                  UNION ALL
                  SELECT DEPT_CD,
                         OFFICE_CD,
                         ORG_CD,
                         OPER_TYPE,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         MAC_AMT,
                         SAFE_AMT,
                         0
                    FROM OP.T_FN_PACK_INVENT_SH
                   WHERE CLOSE_DATE = VPREPREACTDATE
                     AND ORG_CD = '088')
           WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
           GROUP BY DEPT_CD, OFFICE_CD, ORG_CD, OPER_TYPE;
      
      END IF;
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    /*===> 경남은행 마감 방식 변경으로 인한 수정 2012.09.27 방혜진 */
  
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_PACK_INVENT_KN WHERE CLOSE_DATE = VPREACTDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_PACK_INVENT_KN
        (CLOSE_DATE,
         DEPT_CD,
         OFFICE_CD,
         ORG_CD,
         OPER_TYPE,
         TRANS_AMT,
         RETURN_AMT,
         OPER_AMT,
         ORD_SEND_AMT,
         PLUS_SEND_AMT,
         OUT_AMT,
         IN_AMT,
         CLOSE_AMT,
         DIFFER_AMT,
         PRE_MAC_AMT,
         PRE_SAFE_AMT,
         MAC_AMT,
         SAFE_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT VPREACTDATE,
               DEPT_CD,
               OFFICE_CD,
               ORG_CD,
               OPER_TYPE,
               NVL(SUM(TRANS_AMT), 0),
               NVL(SUM(RETURN_AMT), 0),
               NVL(SUM(OPER_AMT), 0),
               NVL(SUM(ORD_SEND_AMT), 0),
               NVL(SUM(PLUS_SEND_AMT), 0),
               NVL(SUM(OUT_AMT), 0),
               NVL(SUM(IN_AMT), 0),
               NVL(SUM(CLOSE_AMT), 0),
               NVL(SUM(DIFFER_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0),
               NVL(SUM(PRE_SAFE_AMT), 0),
               -- NVL(SUM(pre_mac_amt),    02007-12-13)
               NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
               NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
               NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
               CASE
                 WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                  0
                 ELSE
                  NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(TRANS_AMT), 0) -- 20040422 정희성수정(부호변경 - 에서 +로)
                  - NVL(SUM(RETURN_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                  NVL(SUM(ORD_SEND_AMT), 0) - NVL(SUM(PLUS_SEND_AMT), 0) +
                  NVL(SUM(CLOSE_AMT), 0) + NVL(SUM(DIFFER_AMT), 0)
               END,
               'SYSTEM',
               SYSDATE,
               'SYSTEM',
               SYSDATE
          FROM (SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       '1' OPER_TYPE,
                       DECODE(TRANS_TYPE, '1', -TRANS_AMT, '2', TRANS_AMT) TRANS_AMT,
                       0 RETURN_AMT,
                       0 OPER_AMT,
                       0 ORD_SEND_AMT,
                       0 PLUS_SEND_AMT,
                       0 OUT_AMT,
                       0 IN_AMT,
                       0 CLOSE_AMT,
                       0 DIFFER_AMT,
                       0 PRE_MAC_AMT,
                       0 PRE_SAFE_AMT
                  FROM OP.T_FN_TRANS
                 WHERE TRANS_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND ORG_CD IN ('039', '0WC')
                --AND ORG_CD IN ('039')
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       '1',
                       0,
                       RETURN_AMT,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_RETURN
                 WHERE RETURN_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND ORG_CD IN ('039', '0WC')
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       OPER_TYPE,
                       0,
                       0,
                       DEMAND_AMT,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_PACK_DEMAND
                 WHERE DEMAND_DATE = VPREACTDATE
                   AND ORG_CD IN ('039', '0WC')
                UNION ALL
                SELECT SIT.FDEPT_CD,
                       SIT.FOFFICE_CD,
                       AMT.ORG_CD,
                       DECODE(SIT.OPER_TYPE, CCVSOPERTYPE, '2', '1') OPER_TYPE,
                       0,
                       0,
                       0,
                       AMT.ORD_SEND_AMT,
                       AMT.PLUS_SEND_AMT,
                       AMT.OUT_AMT,
                       AMT.IN_AMT,
                       AMT.CLOSE_AMT,
                       AMT.DIFFER_AMT,
                       0,
                       0
                  FROM (SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               DECODE(SEND_TYPE, '1', SEND_AMT) ORD_SEND_AMT,
                               0 PLUS_SEND_AMT,
                               0 OUT_AMT,
                               0 IN_AMT,
                               0 CLOSE_AMT,
                               0 DIFFER_AMT
                          FROM OP.T_FN_SEND
                         WHERE SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                           AND SEND_STATUS >= '1'
                           AND ORG_CD IN ('039', '0WC') -- 2012.10.07 정희성
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               0 ORD_SEND_AMT,
                               DECODE(SEND_STATUS,
                                      '2',
                                      DECODE(SEND_TYPE,
                                             '2',
                                             SEND_AMT,
                                             '4',
                                             SEND_AMT),
                                      0) PLUS_SEND_AMT,
                               0 OUT_AMT,
                               0 IN_AMT,
                               0 CLOSE_AMT,
                               0 DIFFER_AMT
                          FROM OP.T_FN_SEND
                         WHERE SEND_DATE >=
                               TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 30,
                                       'YYYYMMDD')
                           AND SEND_DATE < PDEMANDDATE
                              -- 2004.03.16수정  AND cancel_type  = '0'
                           AND SEND_STATUS >= '1'
                           AND ORG_CD IN ('039', '0WC') -- 2012.09.27 방혜진
                           AND ADD_CASH_DATE = PDEMANDDATE -- 2012.09.27 방혜진
                        
                        /*            FROM (SELECT org_cd,
                            branch_cd,
                            mac_no,
                            DECODE(send_type,
                               '1', send_amt) ord_send_amt,
                        DECODE(send_status, 
                               '2', DECODE(send_type,
                                       '2', send_amt,
                                       '4', send_amt),
                              0)                plus_send_amt,
                            0                     out_amt,
                            0                     in_amt,
                            0                     close_amt,
                            0                     differ_amt
                         FROM op.t_fn_send
                        WHERE SEND_DATE >= TO_CHAR(TO_DATE(pDemandDate, 'YYYYMMDD')-30, 'YYYYMMDD')
                                        AND SEND_DATE < pDemandDate
                        -- 2004.03.16수정  AND cancel_type  = '0'
                          AND send_status >= '1'
                                        AND ORG_CD = '039'               -- 2012.09.27 방혜진
                                        AND ADD_CASH_DATE = pDemandDate  -- 2012.09.27 방혜진     */
                        
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               0,
                               0,
                               OUT_AMT,
                               IN_AMT,
                               CLOSE_AMT,
                               0
                          FROM OP.T_FN_CLOSE
                         WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                           AND ORG_CD IN ('039', '0WC')
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DEAL_AMT
                          FROM OP.T_FN_NOTEND
                         WHERE NOTEND_DATE BETWEEN VPREACTDATE AND
                               VBEFOREDATE
                           AND OWNER_ORG_CD !=
                               OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                           AND ORG_CD IN ('039', '0WC')) AMT,
                       OP.T_CM_SITE SIT,
                       OP.T_CM_MAC MAC
                 WHERE AMT.ORG_CD = MAC.ORG_CD
                   AND AMT.BRANCH_CD = MAC.BRANCH_CD
                   AND AMT.MAC_NO = MAC.MAC_NO
                   AND MAC.ORG_CD = SIT.ORG_CD
                   AND MAC.BRANCH_CD = SIT.BRANCH_CD
                   AND MAC.SITE_CD = SIT.SITE_CD
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       OPER_TYPE,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       MAC_AMT,
                       SAFE_AMT
                  FROM OP.T_FN_PACK_INVENT_KN
                 WHERE CLOSE_DATE = VPREPREACTDATE
                   AND ORG_CD IN ('039', '0WC'))
         WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
         GROUP BY DEPT_CD, OFFICE_CD, ORG_CD, OPER_TYPE;
    END;
    --=============================================================        
    /* 경남은행 마감 방식 변경으로 인한 수정 2012.09.27 방혜진 <===*/
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackInvent',
                                          VRESULT,
                                          PDEMANDDATE);
  
  END SP_CREATEPACKINVENT;

  /* 일괄관리 기관, 지점별 마감일 기준 재고데이타 생성 */
  PROCEDURE SP_CREATEPACKINVENTBRANCH(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                      PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VBEFOREDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VPREACTDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPREPREACTDATE OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE,
                                                                                            2);
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_PACK_INVENT_BRANCH WHERE CLOSE_DATE = VPREACTDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_PACK_INVENT_BRANCH
        (CLOSE_DATE,
         ORG_CD,
         BRANCH_CD,
         OPER_AMT,
         ORD_SEND_AMT,
         PLUS_SEND_AMT,
         OUT_AMT,
         IN_AMT,
         CLOSE_AMT,
         DIFFER_AMT,
         PRE_MAC_AMT,
         PRE_SAFE_AMT,
         MAC_AMT,
         SAFE_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT VPREACTDATE,
               ORG_CD,
               BRANCH_CD,
               NVL(SUM(OPER_AMT), 0),
               NVL(SUM(ORD_SEND_AMT), 0),
               NVL(SUM(PLUS_SEND_AMT), 0),
               NVL(SUM(OUT_AMT), 0),
               NVL(SUM(IN_AMT), 0),
               NVL(SUM(CLOSE_AMT), 0),
               NVL(SUM(DIFFER_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0),
               NVL(SUM(PRE_SAFE_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
               NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
               NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
               CASE
                 WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                  0
                 ELSE
                  NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                  NVL(SUM(ORD_SEND_AMT), 0) - NVL(SUM(PLUS_SEND_AMT), 0) +
                  NVL(SUM(CLOSE_AMT), 0) + NVL(SUM(DIFFER_AMT), 0)
               END,
               'SYSTEM',
               SYSDATE,
               'SYSTEM',
               SYSDATE
          FROM (SELECT ORG_CD,
                       BRANCH_CD,
                       DEMAND_AMT OPER_AMT,
                       0          ORD_SEND_AMT,
                       0          PLUS_SEND_AMT,
                       0          OUT_AMT,
                       0          IN_AMT,
                       0          CLOSE_AMT,
                       0          DIFFER_AMT,
                       0          PRE_MAC_AMT,
                       0          PRE_SAFE_AMT
                  FROM OP.T_FN_PACK_BRANCH
                 WHERE DEMAND_DATE = VPREACTDATE
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       0,
                       DECODE(SEND_TYPE, '1', SEND_AMT),
                       DECODE(SEND_STATUS,
                              '2',
                              DECODE(SEND_TYPE, '2', SEND_AMT, '4', SEND_AMT),
                              0),
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_SEND
                 WHERE SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                      -- 2004.03.16수정 AND cancel_type  = '0'
                   AND SEND_STATUS >= '1'
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       0,
                       0,
                       0,
                       OUT_AMT,
                       IN_AMT,
                       CLOSE_AMT,
                       0,
                       0,
                       0
                  FROM OP.T_FN_CLOSE
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                UNION ALL
                SELECT ORG_CD, BRANCH_CD, 0, 0, 0, 0, 0, 0, DEAL_AMT, 0, 0
                  FROM OP.T_FN_NOTEND
                 WHERE NOTEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND OWNER_ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       MAC_AMT,
                       SAFE_AMT
                  FROM OP.T_FN_PACK_INVENT_BRANCH
                 WHERE CLOSE_DATE = VPREPREACTDATE)
         WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
         GROUP BY ORG_CD, BRANCH_CD;
    
      --=============================================================
      FOR J IN (SELECT ORG_CD ORGCODE,
                       BRANCH_CD BRANCHCODE,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                             ELSE
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                           END) OUTAMT,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                              IN_CHULNAP
                             ELSE
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                           END) INAMT
                  FROM OP.T_FN_CALMAC_DSUM
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_BRANCH
           SET OUT_AMT = J.OUTAMT,
               IN_AMT  = J.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         J.INAMT - J.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND BRANCH_CD = J.BRANCHCODE
           AND ORG_CD = J.ORGCODE;
      
      END LOOP;
      --=============================================================                       
    
      --=============================================================
      -- kib
      --=============================================================
      FOR I IN (SELECT ORG_CD ORGCODE,
                       BRANCH_CD BRANCHCODE,
                       SUM(OUT_TOTAL_AMT) OUTAMT,
                       SUM(IN_TOTAL_AMT) INAMT
                  FROM OP.T_FN_KIB_MAC_DSUM
                 WHERE DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_BRANCH
           SET OUT_AMT = I.OUTAMT,
               IN_AMT  = I.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         I.INAMT - I.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND BRANCH_CD = I.BRANCHCODE
           AND ORG_CD = I.ORGCODE;
      
      END LOOP;
      --=============================================================                 
    
      --=============================================================
      -- 0kk
      --=============================================================
      FOR M IN (SELECT ORG_CD ORGCODE,
                       BRANCH_CD BRANCHCODE,
                       SUM(OUT_AMT) OUTAMT,
                       SUM(IN_AMT) INAMT
                  FROM OP.T_FN_NICE_ONNURI_DSUM
                 WHERE DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_BRANCH
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND BRANCH_CD = M.BRANCHCODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
      --=============================================================                 
    
      --=============================================================
      -- 0TR
      --=============================================================
      FOR M IN (SELECT ORG_CD ORGCODE,
                       BRANCH_CD BRANCHCODE,
                       SUM(CASH_OUT_AMT) OUTAMT,
                       0 INAMT
                  FROM OP.T_FN_DAY_CLOSE_KTIS
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_BRANCH
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND BRANCH_CD = M.BRANCHCODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
      --=============================================================                 
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackInventbranch',
                                          VRESULT,
                                          PDEMANDDATE);
  
  END SP_CREATEPACKINVENTBRANCH;

  /* 일괄관리 사무소, 기관, 지점별 마감일 기준 재고데이타 생성 */
  PROCEDURE SP_CREATEPACKINVENTOFCJJM(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                      PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VBEFOREDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VPREACTDATE    OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPREPREACTDATE OP.T_FN_PACK_INVENT.CLOSE_DATE%TYPE := op.SF_GETPREACTDATE(PDEMANDDATE,
                                                                                            2);
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
      -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
      IF PISDELETING = '1' THEN
        DELETE OP.T_FN_PACK_INVENT_OFCJJM WHERE CLOSE_DATE = VPREACTDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    
      INSERT INTO OP.T_FN_PACK_INVENT_OFCJJM
        (CLOSE_DATE,
         DEPT_CD,
         OFFICE_CD,
         ORG_CD,
         BRANCH_CD,
         OPER_AMT,
         ORD_SEND_AMT,
         PLUS_SEND_AMT,
         OUT_AMT,
         IN_AMT,
         CLOSE_AMT,
         DIFFER_AMT,
         PRE_MAC_AMT,
         PRE_SAFE_AMT,
         MAC_AMT,
         SAFE_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT VPREACTDATE,
               DEPT_CD,
               OFFICE_CD,
               ORG_CD,
               BRANCH_CD,
               NVL(SUM(OPER_AMT), 0),
               NVL(SUM(ORD_SEND_AMT), 0),
               NVL(SUM(PLUS_SEND_AMT), 0),
               NVL(SUM(OUT_AMT), 0),
               NVL(SUM(IN_AMT), 0),
               NVL(SUM(CLOSE_AMT), 0),
               NVL(SUM(DIFFER_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0),
               NVL(SUM(PRE_SAFE_AMT), 0),
               NVL(SUM(PRE_MAC_AMT), 0) + NVL(SUM(ORD_SEND_AMT), 0) +
               NVL(SUM(PLUS_SEND_AMT), 0) - NVL(SUM(OUT_AMT), 0) +
               NVL(SUM(IN_AMT), 0) - NVL(SUM(CLOSE_AMT), 0),
               CASE
                 WHEN ORG_CD = CNONGHYUPCODE AND NVL(SUM(OPER_AMT), 0) < 0 THEN
                  0
                 ELSE
                  NVL(SUM(PRE_SAFE_AMT), 0) + NVL(SUM(OPER_AMT), 0) -
                  NVL(SUM(ORD_SEND_AMT), 0) - NVL(SUM(PLUS_SEND_AMT), 0) +
                  NVL(SUM(CLOSE_AMT), 0) + NVL(SUM(DIFFER_AMT), 0)
               END,
               'SYSTEM',
               SYSDATE,
               'SYSTEM',
               SYSDATE
          FROM (SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       BRANCH_CD,
                       DEMAND_AMT OPER_AMT,
                       0          ORD_SEND_AMT,
                       0          PLUS_SEND_AMT,
                       0          OUT_AMT,
                       0          IN_AMT,
                       0          CLOSE_AMT,
                       0          DIFFER_AMT,
                       0          PRE_MAC_AMT,
                       0          PRE_SAFE_AMT
                  FROM OP.T_FN_PACK_OFCJJM
                 WHERE DEMAND_DATE = VPREACTDATE
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       BRANCH_CD,
                       0,
                       DECODE(SEND_TYPE, '1', SEND_AMT),
                       DECODE(SEND_STATUS,
                              '2',
                              DECODE(SEND_TYPE, '2', SEND_AMT, '4', SEND_AMT),
                              0),
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_SEND
                 WHERE SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                      -- 2004.03.16수정 AND cancel_type =  '0'
                   AND SEND_STATUS >= '1'
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       BRANCH_CD,
                       0,
                       0,
                       0,
                       OUT_AMT,
                       IN_AMT,
                       CLOSE_AMT,
                       0,
                       0,
                       0
                  FROM OP.T_FN_CLOSE
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       BRANCH_CD,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       DEAL_AMT,
                       0,
                       0
                  FROM OP.T_FN_NOTEND
                 WHERE NOTEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND OWNER_ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                UNION ALL
                SELECT DEPT_CD,
                       OFFICE_CD,
                       ORG_CD,
                       BRANCH_CD,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       MAC_AMT,
                       SAFE_AMT
                  FROM OP.T_FN_PACK_INVENT_OFCJJM
                 WHERE CLOSE_DATE = VPREPREACTDATE)
         WHERE ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
         GROUP BY DEPT_CD, OFFICE_CD, ORG_CD, BRANCH_CD;
    
      --=============================================================
      FOR J IN (SELECT ORG_CD ORGCODE,
                       DEPT_CD DEPTCODE,
                       OFFICE_CD OFFICECODE,
                       BRANCH_CD BRANCHCODE,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                             ELSE
                              OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                           END) OUTAMT,
                       SUM(CASE
                             WHEN ORG_CD = '0EM' THEN
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                              IN_CHULNAP
                             ELSE
                              IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                           END) INAMT
                  FROM OP.T_FN_CALMAC_DSUM
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                 GROUP BY ORG_CD, DEPT_CD, OFFICE_CD, BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_OFCJJM
           SET OUT_AMT = J.OUTAMT,
               IN_AMT  = J.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         J.INAMT - J.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = J.DEPTCODE
           AND OFFICE_CD = J.OFFICECODE
           AND BRANCH_CD = J.BRANCHCODE
           AND ORG_CD = J.ORGCODE;
      
      END LOOP;
    
      --=============================================================      
      -- kib
      --=============================================================
      FOR I IN (SELECT A.ORG_CD ORGCODE,
                       C.FDEPT_CD DEPTCODE,
                       C.FOFFICE_CD OFFICECODE,
                       A.BRANCH_CD BRANCHCODE,
                       SUM(A.OUT_TOTAL_AMT) OUTAMT,
                       SUM(A.IN_TOTAL_AMT) INAMT
                  FROM OP.T_FN_KIB_MAC_DSUM A, OP.T_CM_MAC B, OP.T_CM_SITE C
                 WHERE A.DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                 GROUP BY A.ORG_CD, C.FDEPT_CD, C.FOFFICE_CD, A.BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_OFCJJM
           SET OUT_AMT = I.OUTAMT,
               IN_AMT  = I.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         I.INAMT - I.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = I.DEPTCODE
           AND OFFICE_CD = I.OFFICECODE
           AND BRANCH_CD = I.BRANCHCODE
           AND ORG_CD = I.ORGCODE;
      
      END LOOP;
    
      --=============================================================      
      -- 0kk
      --=============================================================
      FOR M IN (SELECT A.ORG_CD ORGCODE,
                       C.FDEPT_CD DEPTCODE,
                       C.FOFFICE_CD OFFICECODE,
                       A.BRANCH_CD BRANCHCODE,
                       SUM(A.OUT_AMT) OUTAMT,
                       SUM(A.IN_AMT) INAMT
                  FROM OP.T_FN_NICE_ONNURI_DSUM A,
                       OP.T_CM_MAC              B,
                       OP.T_CM_SITE             C
                 WHERE A.DEAL_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                 GROUP BY A.ORG_CD, C.FDEPT_CD, C.FOFFICE_CD, A.BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_OFCJJM
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = M.DEPTCODE
           AND OFFICE_CD = M.OFFICECODE
           AND BRANCH_CD = M.BRANCHCODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
      --=============================================================            
    
      --=============================================================      
      -- 0TR
      --=============================================================
      FOR M IN (SELECT A.ORG_CD ORGCODE,
                       C.FDEPT_CD DEPTCODE,
                       C.FOFFICE_CD OFFICECODE,
                       A.BRANCH_CD BRANCHCODE,
                       SUM(A.CASH_OUT_AMT) OUTAMT,
                       0 INAMT
                  FROM OP.T_FN_DAY_CLOSE_KTIS A,
                       OP.T_CM_MAC            B,
                       OP.T_CM_SITE           C
                 WHERE A.CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND A.ORG_CD = B.ORG_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                 GROUP BY A.ORG_CD, C.FDEPT_CD, C.FOFFICE_CD, A.BRANCH_CD) LOOP
        UPDATE OP.T_FN_PACK_INVENT_OFCJJM
           SET OUT_AMT = M.OUTAMT,
               IN_AMT  = M.INAMT,
               MAC_AMT = PRE_MAC_AMT + ORD_SEND_AMT + PLUS_SEND_AMT +
                         M.INAMT - M.OUTAMT - CLOSE_AMT
         WHERE CLOSE_DATE = VPREACTDATE
           AND DEPT_CD = M.DEPTCODE
           AND OFFICE_CD = M.OFFICECODE
           AND BRANCH_CD = M.BRANCHCODE
           AND ORG_CD = M.ORGCODE;
      
      END LOOP;
      --=============================================================            
    
      COMMIT;
    
    EXCEPTION
      WHEN EALREADYEXISTSEXCEPTION THEN
        VRESULT := 'Aleady Data Exists!!';
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackInventOfcJjm',
                                          VRESULT,
                                          PDEMANDDATE);
  
  END SP_CREATEPACKINVENTOFCJJM;

  /* 일괄관리 지점,운영형태별 청구자료 생성 */
  PROCEDURE SP_CREATEPACKDEMAND(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                PISDELETING IN VARCHAR DEFAULT '1') IS
  
    /********************************************************************************
    *  일괄관리 청구액 계산 공식
    *    . 당일현송후 잔액 = 전일회수액 + 과여금 - 전일회수예상치
    *    . 전일회수예상치  = 전영업일의 당일회수예상치
    *    . 실제청구액 계산치 = 익일현송금액(익일정규현송계획금액+토요현송게획금액) 
    *                           - 당일현송후 잔액 - 사무소회수예상치
    *    . 당일청구액 = CEIL(실제청구액 계산치 / 1000000) * 1000000
    *    . 차액분 = 실제청구액 계산치 - 당일 청구액
    *    . 당일회수예상치 = 사무소회수예상치 - 차액분
    *********************************************************************************/
  
    VPREACTDATE      OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 전영업일
    VCOUNT           NUMBER(1) := 0;
    VCOUNT1          NUMBER(1) := 0;
    VRESULT          OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
    VSHINHANCASHAMT  NUMBER := 0; --신한은행 수도권 운영자금(cash는 -일경우 0으로)
    VSHINHANCHECKAMT NUMBER := 0; --신한은행 수도권 운영자금(check는 다 가감하여 표시)
    VSHINHANTOTALAMT NUMBER := 0; --신한은행 전체 운영자금(check는 다 가감하여 표시)
  
    VINAMT  NUMBER := 0; --이마트 입금
    VOUTAMT NUMBER := 0; --이마트 출금
  
    VREALAMT   NUMBER := 0;
    VROUNDAMT  NUMBER := 0;
    VJHSAMT    NUMBER := 0;
    VPREJHSAMT NUMBER := 0;
  
  BEGIN
    -- 기존데이타 존재여부 체크
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    SELECT COUNT(*)
      INTO VCOUNT
      FROM OP.T_FN_PACK_DEMAND
     WHERE DEMAND_DATE = PDEMANDDATE
       AND ROWNUM = 1;
  
    IF (VCOUNT > 0) THEN
      IF PISDELETING = '1' THEN
        -- 기존데이타 삭제
        DELETE OP.T_FN_PACK_DEMAND WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    END IF;
  
    VPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE);
  
    BEGIN
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PDEMANDDATE, -- 청구일자
               DMD.ORG_CD, -- 기관코드
               DMD.OPER_TYPE, -- 운영형태 ('1':영업점, '2':편의점)
               DMD.DEPT_CD, -- 부서코드
               DMD.OFFICE_CD, -- 사무소코드
               DMD.POST_TRANS_AMT, -- 익일현송액 (익일정규현송액 + 토요정규현송액)
               DMD.PRE_ADD_TRANS_AMT, -- 전일추가현송액
               DMD.PRE_COLLECT_AMT, -- 전일회수액
               DMD.DIFFER_AMT, -- 과여액
               DMD.PRE_RESPECT_AMT, -- 전일회수예상치
               DMD.BALANCE_AMT, -- 당일 현송후 잔액
               DMD.OFC_COLLECT_AMT -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT +
               DMD.REAL_AMT, -- 당일회수예상치 (사무소회수예상치 - 차액분)
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT, -- 당일청구액
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DTL.ORG_CD,
                       DTL.OPER_TYPE,
                       DTL.DEPT_CD,
                       DTL.OFFICE_CD,
                       MAX(ORG.AMT_UNIT) AMT_UNIT, -- 금전단위
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) POST_TRANS_AMT, -- 익일현송액
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) PRE_ADD_TRANS_AMT, -- 전일추가현송액
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) PRE_COLLECT_AMT, -- 전일회수액
                       NVL(SUM(DTL.DIFFER_AMT), 0) DIFFER_AMT, -- 과여액
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) PRE_RESPECT_AMT, -- 전일회수예상치
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                       NVL(SUM(DTL.DIFFER_AMT), 0) -
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) BALANCE_AMT, -- 당일 현송후 잔액
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) +
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) -
                       (NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                        NVL(SUM(DTL.DIFFER_AMT), 0) -
                        NVL(SUM(DTL.PRE_RESPECT_AMT), 0)) -
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) REAL_AMT, -- 실제청구액계산치
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) OFC_COLLECT_AMT -- 사무소 회수예상치
                  FROM (SELECT RPT.ORG_CD,
                               RPT.OPER_TYPE,
                               RPT.DEPT_CD,
                               RPT.OFFICE_CD,
                               RPT.POST_SENDPLAN_AMT + RPT.WKD_SENDPLAN_AMT POST_TRANS_AMT,
                               RPT.PLUS_SEND_AMT PRE_ADD_TRANS_AMT,
                               RPT.CLOSE_AMT PRE_COLLECT_AMT,
                               RPT.DIFFER_AMT DIFFER_AMT,
                               0 PRE_RESPECT_AMT,
                               0 OFC_COLLECT_AMT
                          FROM OP.T_FN_PACK_REPORT RPT
                         WHERE RPT.DEMAND_DATE = PDEMANDDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               CUR_RESPECT_AMT, -- 전일회수예상치
                               0
                          FROM OP.T_FN_PACK_DEMAND
                         WHERE DEMAND_DATE = VPREACTDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(op.SF_GETWEEKDAY(PDEMANDDATE),
                                      1,
                                      COLLECT_RESPECT1_AMT,
                                      2,
                                      COLLECT_RESPECT2_AMT,
                                      3,
                                      COLLECT_RESPECT3_AMT,
                                      4,
                                      COLLECT_RESPECT4_AMT,
                                      5,
                                      COLLECT_RESPECT5_AMT,
                                      6,
                                      COLLECT_RESPECT6_AMT,
                                      7,
                                      COLLECT_RESPECT7_AMT) COLLECT_RESPECT_AMT -- 사무소회수예상치
                          FROM OP.T_FN_COLLECT_RESPECT_AMT
                         WHERE START_DATE <= PDEMANDDATE
                           AND END_DATE >= PDEMANDDATE
                        
                        ) DTL,
                       OP.T_CM_ORG ORG
                 WHERE DTL.ORG_CD = ORG.ORG_CD
                   AND ORG.NICE_ORG_YN IN ('0', '2')
                 GROUP BY DTL.ORG_CD,
                          DTL.OPER_TYPE,
                          DTL.DEPT_CD,
                          DTL.OFFICE_CD) DMD
        --        where dmd.org_cd not in ('032','0EM','0EL','0KI','0KK','0SL'); 
        --where dmd.org_cd not in ('032','0KI','0KK','0SL','0EM','0EL','0HA','0SA','0MM','0CS','0EN');     -- 물류반영
         WHERE DMD.ORG_CD NOT IN ('032',
                                  '031',
                                  '0KI',
                                  '0KK',
                                  '0SL',
                                  '0EM',
                                  '0EL',
                                  '0HA',
                                  '0SA',
                                  '0MM',
                                  '0CS',
                                  '0EN',
                                  '0BH'); -- 물류반영
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE, -- 청구일자
               DMD.ORG_CD, -- 기관코드
               DMD.OPER_TYPE, -- 운영형태 ('1':영업점, '2':편의점)
               DMD.DEPT_CD, -- 부서코드
               DMD.OFFICE_CD, -- 사무소코드
               DMD.POST_TRANS_AMT, -- 익일현송액 (익일정규현송액 + 토요정규현송액)
               DMD.PRE_ADD_TRANS_AMT, -- 전일추가현송액
               DMD.PRE_COLLECT_AMT, -- 전일회수액
               DMD.DIFFER_AMT, -- 과여액
               DMD.PRE_RESPECT_AMT, -- 전일회수예상치
               DMD.BALANCE_AMT, -- 당일 현송후 잔액
               
               --         dmd.ofc_collect_amt - CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit + dmd.real_amt,               -- 당일회수예상치 (사무소회수예상치 - 차액분)
               DMD.OFC_COLLECT_AMT -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT +
               DMD.REAL_AMT -
               (NVL(BS.DEMAND_AMT, 0) -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT),
               
               --CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit,  -- 당일청구액
               NVL(BS.DEMAND_AMT, 0),
               
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DTL.ORG_CD,
                       DTL.OPER_TYPE,
                       DTL.DEPT_CD,
                       DTL.OFFICE_CD,
                       MAX(ORG.AMT_UNIT) AMT_UNIT, -- 금전단위
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) POST_TRANS_AMT, -- 익일현송액
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) PRE_ADD_TRANS_AMT, -- 전일추가현송액
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) PRE_COLLECT_AMT, -- 전일회수액
                       NVL(SUM(DTL.DIFFER_AMT), 0) DIFFER_AMT, -- 과여액
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) PRE_RESPECT_AMT, -- 전일회수예상치
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                       NVL(SUM(DTL.DIFFER_AMT), 0) -
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) BALANCE_AMT, -- 당일 현송후 잔액
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) +
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) -
                       (NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                        NVL(SUM(DTL.DIFFER_AMT), 0) -
                        NVL(SUM(DTL.PRE_RESPECT_AMT), 0)) -
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) REAL_AMT, -- 실제청구액계산치
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) OFC_COLLECT_AMT -- 사무소 회수예상치
                  FROM (SELECT RPT.ORG_CD,
                               RPT.OPER_TYPE,
                               RPT.DEPT_CD,
                               RPT.OFFICE_CD,
                               RPT.POST_SENDPLAN_AMT + RPT.WKD_SENDPLAN_AMT POST_TRANS_AMT,
                               RPT.PLUS_SEND_AMT PRE_ADD_TRANS_AMT,
                               RPT.CLOSE_AMT PRE_COLLECT_AMT,
                               RPT.DIFFER_AMT DIFFER_AMT,
                               0 PRE_RESPECT_AMT,
                               0 OFC_COLLECT_AMT
                          FROM OP.T_FN_PACK_REPORT RPT
                         WHERE RPT.DEMAND_DATE = PDEMANDDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               CUR_RESPECT_AMT, -- 전일회수예상치
                               0
                          FROM OP.T_FN_PACK_DEMAND
                         WHERE DEMAND_DATE = VPREACTDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(op.SF_GETWEEKDAY(PDEMANDDATE),
                                      1,
                                      COLLECT_RESPECT1_AMT,
                                      2,
                                      COLLECT_RESPECT2_AMT,
                                      3,
                                      COLLECT_RESPECT3_AMT,
                                      4,
                                      COLLECT_RESPECT4_AMT,
                                      5,
                                      COLLECT_RESPECT5_AMT,
                                      6,
                                      COLLECT_RESPECT6_AMT,
                                      7,
                                      COLLECT_RESPECT7_AMT) COLLECT_RESPECT_AMT -- 사무소회수예상치
                          FROM OP.T_FN_COLLECT_RESPECT_AMT
                         WHERE START_DATE <= PDEMANDDATE
                           AND END_DATE >= PDEMANDDATE
                        
                        ) DTL,
                       OP.T_CM_ORG ORG
                 WHERE DTL.ORG_CD = ORG.ORG_CD
                   AND ORG.NICE_ORG_YN IN ('0', '2')
                 GROUP BY DTL.ORG_CD,
                          DTL.OPER_TYPE,
                          DTL.DEPT_CD,
                          DTL.OFFICE_CD) DMD,
               (SELECT *
                  FROM OP.T_FN_BS_RECV_AMT
                 WHERE SEND_DATE = PDEMANDDATE) BS
         WHERE DMD.ORG_CD = '032'
           AND DMD.DEPT_CD = BS.DEPT_CD(+)
           AND DMD.OFFICE_CD = BS.OFFICE_CD(+);
      ----------------------------------------------------------------------------------------------------------------------------------------------------
      -- 대구은행 추가 20131025 BY BHJ
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE, -- 청구일자
               DMD.ORG_CD, -- 기관코드
               DMD.OPER_TYPE, -- 운영형태 ('1':영업점, '2':편의점)
               DMD.DEPT_CD, -- 부서코드
               DMD.OFFICE_CD, -- 사무소코드
               DMD.POST_TRANS_AMT, -- 익일현송액 (익일정규현송액 + 토요정규현송액)
               DMD.PRE_ADD_TRANS_AMT, -- 전일추가현송액
               DMD.PRE_COLLECT_AMT, -- 전일회수액
               DMD.DIFFER_AMT, -- 과여액
               DMD.PRE_RESPECT_AMT, -- 전일회수예상치
               DMD.BALANCE_AMT, -- 당일 현송후 잔액
               
               --         dmd.ofc_collect_amt - CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit + dmd.real_amt,               -- 당일회수예상치 (사무소회수예상치 - 차액분)
               DMD.OFC_COLLECT_AMT -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT +
               DMD.REAL_AMT -
               (NVL(BS.OPERFUND_AMT, 0) -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT),
               
               --CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit,  -- 당일청구액
               NVL(BS.OPERFUND_AMT, 0),
               
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DTL.ORG_CD,
                       DTL.OPER_TYPE,
                       DTL.DEPT_CD,
                       DTL.OFFICE_CD,
                       MAX(ORG.AMT_UNIT) AMT_UNIT, -- 금전단위
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) POST_TRANS_AMT, -- 익일현송액
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) PRE_ADD_TRANS_AMT, -- 전일추가현송액
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) PRE_COLLECT_AMT, -- 전일회수액
                       NVL(SUM(DTL.DIFFER_AMT), 0) DIFFER_AMT, -- 과여액
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) PRE_RESPECT_AMT, -- 전일회수예상치
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                       NVL(SUM(DTL.DIFFER_AMT), 0) -
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) BALANCE_AMT, -- 당일 현송후 잔액
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) +
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) -
                       (NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                        NVL(SUM(DTL.DIFFER_AMT), 0) -
                        NVL(SUM(DTL.PRE_RESPECT_AMT), 0)) -
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) REAL_AMT, -- 실제청구액계산치
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) OFC_COLLECT_AMT -- 사무소 회수예상치
                  FROM (SELECT RPT.ORG_CD,
                               RPT.OPER_TYPE,
                               RPT.DEPT_CD,
                               RPT.OFFICE_CD,
                               RPT.POST_SENDPLAN_AMT + RPT.WKD_SENDPLAN_AMT POST_TRANS_AMT,
                               RPT.PLUS_SEND_AMT PRE_ADD_TRANS_AMT,
                               RPT.CLOSE_AMT PRE_COLLECT_AMT,
                               RPT.DIFFER_AMT DIFFER_AMT,
                               0 PRE_RESPECT_AMT,
                               0 OFC_COLLECT_AMT
                          FROM OP.T_FN_PACK_REPORT RPT
                         WHERE RPT.DEMAND_DATE = PDEMANDDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               CUR_RESPECT_AMT, -- 전일회수예상치
                               0
                          FROM OP.T_FN_PACK_DEMAND
                         WHERE DEMAND_DATE = VPREACTDATE
                        UNION ALL
                        SELECT ORG_CD,
                               OPER_TYPE,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(op.SF_GETWEEKDAY(PDEMANDDATE),
                                      1,
                                      COLLECT_RESPECT1_AMT,
                                      2,
                                      COLLECT_RESPECT2_AMT,
                                      3,
                                      COLLECT_RESPECT3_AMT,
                                      4,
                                      COLLECT_RESPECT4_AMT,
                                      5,
                                      COLLECT_RESPECT5_AMT,
                                      6,
                                      COLLECT_RESPECT6_AMT,
                                      7,
                                      COLLECT_RESPECT7_AMT) COLLECT_RESPECT_AMT -- 사무소회수예상치
                          FROM OP.T_FN_COLLECT_RESPECT_AMT
                         WHERE START_DATE <= PDEMANDDATE
                           AND END_DATE >= PDEMANDDATE
                        
                        ) DTL,
                       OP.T_CM_ORG ORG
                 WHERE DTL.ORG_CD = ORG.ORG_CD
                   AND ORG.NICE_ORG_YN IN ('0', '2')
                 GROUP BY DTL.ORG_CD,
                          DTL.OPER_TYPE,
                          DTL.DEPT_CD,
                          DTL.OFFICE_CD) DMD,
               (SELECT *
                  FROM OP.T_FN_REG_OPERFUND
                 WHERE REQ_DATE = PDEMANDDATE) BS
         WHERE DMD.ORG_CD = '031'
           AND DMD.DEPT_CD = BS.DEPT_CD(+)
           AND DMD.OFFICE_CD = BS.OFFICE_CD(+);
      ----------------------------------------------------------------------------------------------------------------------------------------------------
    
      --이마트 용 
    
      --이마트/이랜드
    
      /*
      FOR j IN
          (
                select org_cd,
                       branch_cd,
                       dept_cd,
                       office_cd,
                       start_date,
                       end_date 
                from op.t_fn_emart_demand_date
                where base_date=pDemandDate                
          
      )
        LOOP
            
            if j.start_date= j.end_date then
        
              INSERT INTO op.t_fn_pack_demand (
                 demand_date,
                 org_cd,
                 oper_type,
                 dept_cd,
                 office_cd,
                 post_trans_amt,
                 pre_add_trans_amt,
                 pre_collect_amt,
                 differ_amt,
                 pre_respect_amt,
                 balance_amt,
                 cur_respect_amt,
                 demand_amt,
                 insert_uid,
                 insert_date,
                 update_uid,
                 update_date)
                 
            select pDemandDate,
                   aa.org_cd,
                   aa.oper_type,  
                   aa.fdept_cd,
                   aa.foffice_cd,
                   0 post_trans_amt,
                   0 pre_add_trans_amt,
                   0 pre_collect_amt,
                   0 differ_amt,
                   0 pre_respect_amt,
                   0 balance_amt,
                   0 cur_respect_amt,
                   -(nvl(aa.inAmt,0)-nvl(aa.outAmt,0)) demand_amt,
                  'INSERT',
                   SYSDATE,
                   'INSERT',
                   SYSDATE
                   
            from 
                   (
                  
                      select a.org_cd,
                             c.fdept_cd,
                             c.foffice_cd,
                             DECODE(c.oper_type,'1400', '2', '1') oper_type,               
                             sum(case when a.org_cd='0EM' then in_chk_tot_amt+in_cash_tot_amt +in_good else in_chk_tot_amt+in_cash_tot_amt end )  inAmt,
                             sum(case when a.org_cd='0EM' then out_chk_tot_amt+out_cash_tot_amt +out_good else out_chk_tot_amt+out_cash_tot_amt end )  outAmt
      
                      from op.T_FN_calmac_dsum a,
                           op.t_cm_mac b,
                           op.t_cm_site c,
                           op.t_fn_emart_demand_date d                    
                      where  d.base_date = pDemandDate     
                      and d.org_cd = a.org_cd
                      and d.branch_cd = a.branch_cd
                      and d.org_cd = c.org_cd
                      and d.branch_cd = c.branch_cd
                      
                      and A.CLOSE_DATE= d.start_date
                      
                      and b.org_cd = c.org_cd
                      and b.branch_cd = c.branch_cd
                      and b.site_cd = c.site_cd
                      and a.branch_cd = b.branch_cd
                      and a.mac_no = b.mac_no
                      
                      and d.org_cd= j.org_cd
                      and d.branch_cd = j.branch_cd
                      and d.dept_cd = j.dept_cd
                      and d.office_cd = j.office_cd
                      
                      group by a.org_cd,
                               c.fdept_cd,
                               c.foffice_cd,
                               DECODE(c.oper_type,'1400', '2', '1')
                      ) aa  ;    
      
              else  */
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               AA.ORG_CD,
               AA.OPER_TYPE,
               AA.FDEPT_CD,
               AA.FOFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               (NVL(-AA.INAMT, 0) + NVL(AA.OUTAMT, 0)) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM (
                
                SELECT A.ORG_CD,
                        C.FDEPT_CD,
                        C.FOFFICE_CD,
                        DECODE(C.OPER_TYPE, '1400', '2', '1') OPER_TYPE,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                               IN_CHULNAP
                              ELSE
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                            END) INAMT,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                              ELSE
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                            END) OUTAMT
                
                  FROM OP.T_FN_CALMAC_DSUM       A,
                        OP.T_CM_MAC               B,
                        OP.T_CM_SITE              C,
                        OP.T_FN_EMART_DEMAND_DATE D
                 WHERE D.BASE_DATE = PDEMANDDATE
                   AND D.ORG_CD = A.ORG_CD
                   AND D.BRANCH_CD = A.BRANCH_CD
                   AND D.ORG_CD = C.ORG_CD
                   AND D.BRANCH_CD = C.BRANCH_CD
                   AND A.CLOSE_DATE >= D.START_DATE
                   AND A.CLOSE_DATE <=
                       op.SF_GETBEFOREDATE(D.END_DATE)
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                
                 GROUP BY A.ORG_CD,
                           C.FDEPT_CD,
                           C.FOFFICE_CD,
                           DECODE(C.OPER_TYPE, '1400', '2', '1')) AA;
    
      --kib 
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               '0KI',
               '1',
               DEPT_CD,
               OFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               NVL(DEMAND_AMT, 0) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM OP.T_FN_KIB_DEMAND
         WHERE DEMAND_DATE = PDEMANDDATE;
    
      --삼성생명(20120815)
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               '0SL',
               '1',
               DEPT_CD,
               OFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               NVL(DEMAND_AMT, 0) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM OP.T_FN_SSLIFE_DEMAND
         WHERE DEMAND_DATE = PDEMANDDATE;
    
      -- 물류반영
      --물류업체기관청구등록(20130727 정희성반영)
    
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               ORG_CD,
               '1',
               DEPT_CD,
               OFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               SUM(DEMAND_AMT) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM OP.T_FN_CALMAC_DEMAND
         WHERE DEMAND_DATE = PDEMANDDATE
         GROUP BY ORG_CD, DEPT_CD, OFFICE_CD;
    
      /*        end if;             
      END LOOP;  */
    
      --==================================================================
      --kk 기업 키오스크 
      --==================================================================
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               '0KK',
               '1',
               DEPT_CD,
               OFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               SUM(NVL(DEMAND_AMT, 0)) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM OP.T_FN_ONNURI_DEMAND
         WHERE DEMAND_DATE = PDEMANDDATE
         GROUP BY DEPT_CD, OFFICE_CD;
      --==================================================================
    
      --==========================================================================
      -- 대구은행 자체자금..         2013.05.03
      --==========================================================================         
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               'A31',
               '1' OPER_TYPE,
               AA.DEPT_CD,
               AA.OFFICE_CD,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               NVL(BB.AMT, 0) - NVL(AA.AMT, 0) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DEPT_CD, OFFICE_CD, (SAFE_AMT) AMT
                  FROM OP.T_FN_PACK_INVENT
                 WHERE CLOSE_DATE =
                       op.SF_GETPREACTDATE(PDEMANDDATE)
                   AND ORG_CD = 'A31') AA,
               
               (SELECT DEPT_CD, OFFICE_CD, SELF.SELF_AMT * RATE AMT
                  FROM (SELECT CASE
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                                  SUN_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                                  MON_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                                  TUE_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                                  WED_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                                  THU_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                                  FRI_AMT
                                 WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                                  SAT_AMT
                               END SELF_AMT
                          FROM OP.T_FN_PACK_DEMAND_SELFAMT
                         WHERE PDEMANDDATE BETWEEN FROM_DATE AND TO_DATE
                           AND ORG_CD2 = 'A31') SELF,
                       
                       (SELECT '08' DEPT_CD, '20' OFFICE_CD, 1.0 RATE
                          FROM DUAL
                        UNION ALL
                        SELECT '08' DEPT_CD, '50' OFFICE_CD, 0.0 RATE
                          FROM DUAL) OFF) BB
         WHERE AA.DEPT_CD = BB.DEPT_CD
           AND AA.OFFICE_CD = BB.OFFICE_CD;
    
      --==================================================================
      /*    
      --==========================================================================
      -- 시티은행 자체현송..         
      --==========================================================================
      INSERT INTO OP.T_FN_PACK_DEMAND
        (DEMAND_DATE,
         ORG_CD,
         OPER_TYPE,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               'A27',
               '1' OPER_TYPE,
               --office_amt.send_date,
               OFFICE_AMT.DEPT_CD,
               OFFICE_AMT.OFFICE_CD,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               --office_amt.send_amt,
               --round(office_amt.send_amt/total_amt.tot_amt,4) ,
               --round(office_amt.send_amt/total_amt.tot_amt,4) * self_amt.self_amt,
               --invent.safe_amt,
               (-1) * NVL(INVENT.SAFE_AMT, 0) +
               (ROUND(OFFICE_AMT.SEND_AMT / TOTAL_AMT.TOT_AMT, 8) *
               SELF_AMT.SELF_AMT) DEMAND_AMT,
               -- (-1) * nvl(invent.safe_amt,0) + (round(office_amt.send_amt/total_amt.tot_amt,4) * self_amt.self_amt) demand_amt,
               --round( (-1 * invent.safe_amt + (round(office_amt.send_amt/total_amt.tot_amt,4) * self_amt.self_amt))/1000000)*1000000,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT ORG_CD,
                       DEPT_CD,
                       OFFICE_CD,
                       SUM(CASE
                             WHEN LAST_SEND_TYPE = '1' THEN
                              PLAN_SEND_AMT
                             ELSE
                              CHANGE_SEND_AMT
                           END) SEND_AMT
                  FROM OP.T_FN_SENDPLAN
                 WHERE SEND_DATE =
                       op.SF_GETPOSTACTDATE(PDEMANDDATE)
                   AND ORG_CD = '027'
                   AND CONFIRM_YN = '1'
                   AND CANCEL_TYPE = '0'
                 GROUP BY ORG_CD, DEPT_CD, OFFICE_CD) OFFICE_AMT,
               (SELECT SUM(CASE
                             WHEN LAST_SEND_TYPE = '1' THEN
                              PLAN_SEND_AMT
                             ELSE
                              CHANGE_SEND_AMT
                           END) TOT_AMT
                  FROM OP.T_FN_SENDPLAN
                 WHERE SEND_DATE =
                       op.SF_GETPOSTACTDATE(PDEMANDDATE)
                   AND ORG_CD = '027'
                   AND CONFIRM_YN = '1'
                   AND CANCEL_TYPE = '0'
                
                ) TOTAL_AMT,
               (SELECT CASE
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                          SUN_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                          MON_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                          TUE_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                          WED_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                          THU_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                          FRI_AMT
                         WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                          SAT_AMT
                       END SELF_AMT
                  FROM OP.T_FN_PACK_DEMAND_SELFAMT
                 WHERE PDEMANDDATE BETWEEN FROM_DATE AND TO_DATE
                   AND ORG_CD2 = '027') SELF_AMT,
               (SELECT '027' ORG_CD, DEPT_CD, OFFICE_CD, OPER_TYPE, SAFE_AMT
                  FROM OP.T_FN_PACK_INVENT
                 WHERE CLOSE_DATE =
                       op.SF_GETPREACTDATE(PDEMANDDATE)
                   AND ORG_CD = 'A27') INVENT
         WHERE OFFICE_AMT.ORG_CD = INVENT.ORG_CD(+)
           AND OFFICE_AMT.DEPT_CD = INVENT.DEPT_CD(+)
           AND OFFICE_AMT.OFFICE_CD = INVENT.OFFICE_CD(+);
    
      --시티은행 자체자금 전일sum
      SELECT CASE
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '1' THEN
                SUN_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '2' THEN
                MON_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '3' THEN
                TUE_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '4' THEN
                WED_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '5' THEN
                THU_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '6' THEN
                FRI_AMT
               WHEN op.SF_GETWEEKDAY(op.SF_GETPREACTDATE(PDEMANDDATE)) = '7' THEN
                SAT_AMT
             END SELF_AMT
        INTO VPREJHSAMT
        FROM OP.T_FN_PACK_DEMAND_SELFAMT
       WHERE op.SF_GETPREACTDATE(PDEMANDDATE) BETWEEN
             FROM_DATE AND TO_DATE
         AND ORG_CD2 = '027';
    
      --시티은행 자체자금 당일sum
      SELECT CASE
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                SUN_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                MON_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                TUE_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                WED_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                THU_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                FRI_AMT
               WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                SAT_AMT
             END SELF_AMT
        INTO VJHSAMT
        FROM OP.T_FN_PACK_DEMAND_SELFAMT
       WHERE PDEMANDDATE BETWEEN FROM_DATE AND TO_DATE
         AND ORG_CD2 = '027';
    
      SELECT SUM(DEMAND_AMT), SUM(ROUND(DEMAND_AMT / 1000000) * 1000000)
        INTO VREALAMT, VROUNDAMT
        FROM OP.T_FN_PACK_DEMAND
       WHERE ORG_CD = 'A27'
         AND DEMAND_DATE = PDEMANDDATE
         AND DEPT_CD || OFFICE_CD <> '0510';
    
      UPDATE OP.T_FN_PACK_DEMAND
         SET DEMAND_AMT = ROUND(DEMAND_AMT / 1000000) * 1000000
       WHERE ORG_CD = 'A27'
         AND DEMAND_DATE = PDEMANDDATE
         AND DEPT_CD || OFFICE_CD <> '0510';
    
      UPDATE OP.T_FN_PACK_DEMAND
         SET DEMAND_AMT =
             (VJHSAMT - VPREJHSAMT) - VROUNDAMT
      --      set demand_amt = VPreJhsAmt vJhsAmt - vRoundAmt
      --      set demand_amt = demand_amt - (vRoundAmt -vRealAmt)
       WHERE ORG_CD = 'A27'
         AND DEMAND_DATE = PDEMANDDATE
         AND DEPT_CD || OFFICE_CD = '0510';
            */
      --==========================================================================        
    
      /*
           INSERT INTO op.t_fn_pack_demand (
                 demand_date,
                 org_cd,
                 oper_type,
                 dept_cd,
                 office_cd,
                 post_trans_amt,
                 pre_add_trans_amt,
                 pre_collect_amt,
                 differ_amt,
                 pre_respect_amt,
                 balance_amt,
                 cur_respect_amt,
                 demand_amt,
                 insert_uid,
                 insert_date,
                 update_uid,
                 update_date)
            SELECT pDemandDate,              -- 청구일자
                 dmd.org_cd,            -- 기관코드
                 dmd.oper_type,          -- 운영형태 ('1':영업점, '2':편의점)
                 dmd.dept_cd,            -- 부서코드
                 dmd.office_cd,          -- 사무소코드
                 dmd.post_trans_amt,        -- 익일현송액 (익일정규현송액 + 토요정규현송액)
                 dmd.pre_add_trans_amt,      -- 전일추가현송액
                 dmd.pre_collect_amt,        -- 전일회수액
                 dmd.differ_amt,          -- 과여액
                 dmd.pre_respect_amt,        -- 전일회수예상치
                 dmd.balance_amt,          -- 당일 현송후 잔액
                 dmd.ofc_collect_amt 
                - CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit
                + dmd.real_amt,               -- 당일회수예상치 (사무소회수예상치 - 차액분)
                 CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit,  -- 당일청구액
                 'INSERT',
                 SYSDATE,
                 'INSERT',
                 SYSDATE
              FROM (SELECT dtl.org_cd,                  
                     dtl.oper_type,                
                     dtl.dept_cd,                  
                     dtl.office_cd,
                     MAX(org.amt_unit)                    amt_unit,        -- 금전단위
                     NVL(SUM(dtl.post_trans_amt), 0)    post_trans_amt,    -- 익일현송액
                     NVL(SUM(dtl.pre_add_trans_amt), 0)  pre_add_trans_amt,  -- 전일추가현송액
                     NVL(SUM(dtl.pre_collect_amt), 0)    pre_collect_amt,  -- 전일회수액
                     NVL(SUM(dtl.differ_amt), 0)      differ_amt,      -- 과여액
                     NVL(SUM(dtl.pre_respect_amt), 0)    pre_respect_amt,  -- 전일회수예상치
                     NVL(SUM(dtl.pre_collect_amt), 0) 
                    + NVL(SUM(dtl.differ_amt), 0) 
                    - NVL(SUM(dtl.pre_respect_amt), 0)  balance_amt,    -- 당일 현송후 잔액
                     NVL(SUM(dtl.post_trans_amt), 0) 
                    + NVL(SUM(dtl.pre_add_trans_amt), 0)
                    - (NVL(SUM(dtl.pre_collect_amt), 0) 
                       + NVL(SUM(dtl.differ_amt), 0) 
                       - NVL(SUM(dtl.pre_respect_amt), 0))  
                    - NVL(SUM(dtl.ofc_collect_amt), 0)  real_amt,      -- 실제청구액계산치
                     NVL(SUM(dtl.ofc_collect_amt), 0)    ofc_collect_amt    -- 사무소 회수예상치
                  FROM (SELECT rpt.org_cd,
                         rpt.oper_type,
                         rpt.dept_cd,
                         rpt.office_cd,
                         rpt.post_sendplan_amt    
                        + rpt.wkd_sendplan_amt  post_trans_amt,
                         0    pre_add_trans_amt,
                         0      pre_collect_amt,
                         0      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = pDemandDate
                     
                     UNION ALL               
                     SELECT rpt.org_cd,
                         rpt.oper_type,
                         rpt.dept_cd,
                         rpt.office_cd,
                         0  post_trans_amt,
                         rpt.plus_send_amt    pre_add_trans_amt,
                         rpt.close_amt      pre_collect_amt,
                         rpt.differ_amt      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = vPreActDate
                     
                     UNION ALL
                    SELECT org_cd,
                         oper_type,
                         dept_cd,
                         office_cd,
                         0,
                         0,
                         0,
                         0,
                         cur_respect_amt,                -- 전일회수예상치
                         0
                      FROM op.t_fn_pack_demand
                     WHERE demand_date = vPreActDate
                     UNION ALL
                    SELECT org_cd,
                         oper_type,
                         dept_cd,
                         office_cd,
                         0,
                         0,
                         0,
                         0,
                         0,
                         decode(op.sf_getWeekday(pDemandDate),1,collect_respect1_amt,
                            2,collect_respect2_amt,
                            3,collect_respect3_amt,
                            4,collect_respect4_amt,
                            5,collect_respect5_amt,
                            6,collect_respect6_amt,
                             7,collect_respect7_amt
                            )  collect_respect_amt              -- 사무소회수예상치
                      FROM op.t_fn_collect_respect_amt
                     WHERE start_date <= pDemandDate
                       AND end_date   >= pDemandDate
      
                     ) dtl,
                     op.t_cm_org org
                 WHERE dtl.org_cd       = org.org_cd
                   AND org.nice_org_yn IN ('0', '2')
                GROUP BY dtl.org_cd,
                     dtl.oper_type,
                     dtl.dept_cd,
                     dtl.office_cd
                 ) dmd
              where dmd.org_cd = '32';
      */
      /* 부산수령자금 파출수납 등록 20080926 정희성 */
      DELETE OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '04'
         AND CARRY_ORG_CD = '1410402';
    
      INSERT INTO OP.T_FN_CARRY
        (CARRY_DATE,
         CARRY_GROUP_CD,
         CARRY_ORG_CD,
         CASH_AMT,
         CHECK_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE,
         INS_AMT,
         OUTS_AMT)
        (SELECT PDEMANDDATE CARRY_DATE,
                '04' CARRY_GROUP_CD,
                '1410402' CARRY_ORG_CD,
                AMT AMT,
                0 CHECK_AMT,
                'SYSTEM' INSERT_UID,
                SYSDATE INSERT_DATE,
                'SYSTEM' UPDATE_UID,
                SYSDATE UPDATE_DATE,
                0 INS_AMT,
                0 OUTS_AMT
           FROM (SELECT NVL(SUM(DEMAND_AMT), 0) AMT
                   FROM OP.T_FN_BS_RECV_AMT
                  WHERE SEND_DATE = PDEMANDDATE));
    
      /* 이마트정산기 수표 20100406 정희성 */
      /*    DELETE op.t_fn_carry
      WHERE carry_date = pDemandDate
      and carry_group_cd ='02' 
      and carry_org_cd ='1110201';
      
      insert into op.t_fn_carry
      (CARRY_DATE,
      CARRY_GROUP_CD,
      CARRY_ORG_CD,
      CASH_AMT,
      CHECK_AMT,
      INSERT_UID,
      INSERT_DATE,
      UPDATE_UID,
      UPDATE_DATE,
      INS_AMT,
      OUTS_AMT
      )
      (select pDemandDate           CARRY_DATE,
               '02'                 CARRY_GROUP_CD,
               '1110201'            CARRY_ORG_CD, 
               0                    AMT, 
               checkAmt             CHECK_AMT,
               'SYSTEM'             INSERT_UID,
               sysdate              INSERT_DATE,
               'SYSTEM'             UPDATE_UID,
               sysdate              UPDATE_DATE,
               0                    INS_AMT,
               0                    OUTS_AMT
                from
                   (select sum(check100Amt)+sum(check50Amt)+sum(check30Amt)+sum(check10Amt)+sum(checkEtcAmt) checkAmt     
                          from                    
                          (select a.deal_date, --거래일자
                                     a.branch_cd, --지점
                                     a.mac_no, --기번
                                     a.seq, -- 순번
                                     a.member_id,
                                     a.deal_time, --거래시간
                                     case when a.inout_gb ='0001' then '입금' else '출금' end inout_gb, --입출금구분
                                     case when kj_gubun ='0011' then kj_amt else 0 end check100Amt, --백만원
                                     case when kj_gubun ='0010' then kj_amt else 0 end check50Amt, --오십만원
                                     case when kj_gubun ='0009' then kj_amt else 0 end check30Amt, --삼십만원
                                     case when kj_gubun ='0008' then kj_amt else 0 end check10Amt, --십만원권
                                     case when kj_gubun ='9999' then kj_amt else 0 end checkEtcAmt --기타권종
                              from op.t_fn_inout_org a,
                                   op.t_fn_box b
                              where A.deal_date||a.deal_time>=op.sf_getPreActDate(pDemandDate)||'013000'
                              AND   A.deal_date||a.deal_time<=pDemandDate||'013000'
                              and   a.branch_cd='4700'
                              and   a.branch_cd = b.branch_cd
                              and   a.mac_no = b.mac_no
                              and   a.deal_date = b.deal_date
                              and   a.seq = b.seq
                              and   b.box_gubun1 ='0003' -- 수표
                          )
                   )
        );    */
    
      /* 주말수득금 운영자금에서 차감함 20080905 정희성 */
      DELETE OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '01'
            --        and carry_org_cd in ('1310102','1320102','1340102','1410102','1420102','1470102','1020102','1040102','1120102');
         AND CARRY_ORG_CD IN ('1310102',
                              '1320102',
                              '1340102',
                              '1410102',
                              '1420102',
                              '1470102',
                              '1020102',
                              '1040102',
                              '1120102');
    
      INSERT INTO OP.T_FN_CARRY
        (CARRY_DATE,
         CARRY_GROUP_CD,
         CARRY_ORG_CD,
         CASH_AMT,
         CHECK_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE,
         INS_AMT,
         OUTS_AMT)
        (SELECT PDEMANDDATE CARRY_DATE,
                CARRY_GROUP_CD CARRY_GROUP_CD,
                CARRY_ORG_CD CARRY_ORG_CD,
                A.NICEAMT CASH_AMT,
                0 CHECK_AMT,
                'SYSTEM' INSERT_UID,
                SYSDATE INSERT_DATE,
                'SYSTEM' UPDATE_UID,
                SYSDATE UPDATE_DATE,
                0 INS_AMT,
                0 OUTS_AMT
           FROM (SELECT DEPT_CD,
                        OFFICE_CD,
                        SUM(CASE
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                               NVL(SUN_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                               NVL(MON_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                               NVL(TUE_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                               NVL(WED_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                               NVL(THU_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                               NVL(FRI_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                               NVL(SAT_DAY, 0)
                            END) NICEAMT
                   FROM OP.T_FN_NICE_SHARE_AMT
                  WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
                    AND ORG_CD = 'HS'
                  GROUP BY DEPT_CD, OFFICE_CD) A,
                (SELECT *
                   FROM OP.T_FN_CARRY_MASTER
                  WHERE CARRY_GROUP_CD = '01'
                       --            and carry_org_cd in ('1310102','1320102','1340102','1410102','1420102','1470102','1020102','1040102','1120102')
                    AND CARRY_ORG_CD IN ('1310102',
                                         '1320102',
                                         '1340102',
                                         '1410102',
                                         '1420102',
                                         '1020102',
                                         '1040102',
                                         '1120102')) B
          WHERE A.DEPT_CD = B.DEPT_CD
            AND A.OFFICE_CD = B.OFFICE_CD);
      /* 주말수득금 운영자금에서 차감함 20080905 정희성 */
      DELETE OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '01'
         AND SUBSTR(CARRY_ORG_CD, 5, 3) = '103';
    
      INSERT INTO OP.T_FN_CARRY
        (CARRY_DATE,
         CARRY_GROUP_CD,
         CARRY_ORG_CD,
         CASH_AMT,
         CHECK_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE,
         INS_AMT,
         OUTS_AMT)
        (SELECT PDEMANDDATE CARRY_DATE,
                CARRY_GROUP_CD CARRY_GROUP_CD,
                CARRY_ORG_CD CARRY_ORG_CD,
                A.NICEAMT CASH_AMT,
                0 CHECK_AMT,
                'SYSTEM' INSERT_UID,
                SYSDATE INSERT_DATE,
                'SYSTEM' UPDATE_UID,
                SYSDATE UPDATE_DATE,
                0 INS_AMT,
                0 OUTS_AMT
           FROM (SELECT DEPT_CD,
                        OFFICE_CD,
                        SUM(CASE
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                               NVL(SUN_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                               NVL(MON_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                               NVL(TUE_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                               NVL(WED_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                               NVL(THU_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                               NVL(FRI_DAY, 0)
                              WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                               NVL(SAT_DAY, 0)
                            END) NICEAMT
                   FROM OP.T_FN_NICE_SHARE_AMT
                  WHERE PDEMANDDATE BETWEEN START_DATE AND END_DATE
                    AND ORG_CD IN ('GL')
                  GROUP BY DEPT_CD, OFFICE_CD) A,
                (SELECT *
                   FROM OP.T_FN_CARRY_MASTER
                  WHERE CARRY_GROUP_CD = '01'
                    AND SUBSTR(CARRY_ORG_CD, 5, 3) = '103') B
          WHERE A.DEPT_CD = B.DEPT_CD
            AND A.OFFICE_CD = B.OFFICE_CD);
    
      /*신한은행 atm관리 수도권지사 운영자금 현금수령*/
      /*수령처는 인천지사 파출수납업체 신한자금센터로 일괄 적용 */
      SELECT SUM(A.DEMAND_AMT) SHINHAN_AMT
        INTO VSHINHANCHECKAMT
        FROM OP.T_FN_PACK_DEMAND A, OP.T_CM_OFFICE B
       WHERE A.DEMAND_DATE = PDEMANDDATE
         AND A.ORG_CD = '088'
         AND A.DEPT_CD = B.DEPT_CD
         AND A.OFFICE_CD = B.OFFICE_CD
         AND B.RECV_ORG_CD <> '99';
    
      SELECT SUM(A.DEMAND_AMT) SHINHAN_AMT
        INTO VSHINHANTOTALAMT
        FROM OP.T_FN_PACK_DEMAND A, OP.T_CM_OFFICE B
       WHERE A.DEMAND_DATE = PDEMANDDATE
         AND A.ORG_CD = '088'
         AND A.DEPT_CD = B.DEPT_CD
         AND A.OFFICE_CD = B.OFFICE_CD;
    
      IF VSHINHANCHECKAMT < 0 THEN
        VSHINHANCASHAMT := 0; --check가 -일경우
      ELSE
        -- check가 +일경우
        IF VSHINHANTOTALAMT < VSHINHANCHECKAMT THEN
          IF VSHINHANTOTALAMT >= 0 THEN
            -- 합계가 0이상이면서 수도권자금보다는 작은경우
            VSHINHANCASHAMT := VSHINHANTOTALAMT;
          ELSE
            -- -이면서 수도권자금보다는 작은경우             
            VSHINHANCASHAMT := 0;
          END IF;
        ELSE
          -- 합계가 수도권자금보다 큰거나 같은경우  
          VSHINHANCASHAMT := VSHINHANCHECKAMT;
        END IF;
      END IF;
    
      SELECT COUNT(*)
        INTO VCOUNT
        FROM OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '04'
         AND CARRY_ORG_CD = '1030401'
         AND ROWNUM = 1;
    
      IF (VCOUNT = 0) THEN
        -- 기존데이타 있으면 스킵
        /*
        DELETE op.t_fn_carry
        WHERE carry_date = pDemandDate
              and carry_group_cd ='04' 
              and carry_org_cd='1030401'  
             */
      
        INSERT INTO OP.T_FN_CARRY
          (CARRY_DATE,
           CARRY_GROUP_CD,
           CARRY_ORG_CD,
           CASH_AMT,
           CHECK_AMT,
           INSERT_UID,
           INSERT_DATE,
           UPDATE_UID,
           UPDATE_DATE,
           INS_AMT,
           OUTS_AMT)
        VALUES
          (PDEMANDDATE,
           '04',
           '1030401',
           VSHINHANCASHAMT,
           VSHINHANCHECKAMT,
           'SYSTEM',
           SYSDATE,
           'SYSTEM',
           SYSDATE,
           0,
           0);
      
      END IF;
    
      -----------------------------------------------------------------------------
      -- 경륜 수득금 등록 heesung 20090213
      -----------------------------------------------------------------------------        
      DELETE OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '03'
         AND SUBSTR(CARRY_ORG_CD, 5, 3) = '302';
    
      INSERT INTO OP.T_FN_CARRY
        (CARRY_DATE,
         CARRY_GROUP_CD,
         CARRY_ORG_CD,
         CASH_AMT,
         CHECK_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE,
         INS_AMT,
         OUTS_AMT)
        (SELECT PDEMANDDATE CARRY_DATE,
                CA.CARRY_GROUP_CD,
                CA.CARRY_ORG_CD,
                NVL(BIKE.AMT, 0) CASH_AMT,
                --  nvl(bike.amt,0)-nvl(bike2.amt,0) cash_amt,
                0       CHECK_AMT,
                'system',
                SYSDATE,
                'system',
                SYSDATE,
                0,
                0
           FROM (SELECT DEPT_CD,
                        OFFICE_CD,
                        SUM(RECV_AMT + EXG_COIN_AMT + EXG_CHECK_AMT + PX_AMT +
                            ENTER_AMT + ETC_AMT) AMT
                   FROM OP.T_FN_BIKE_CLOSE
                  WHERE CARRY_DATE >=
                        op.SF_GETPREACTDATE(PDEMANDDATE)
                    AND CARRY_DATE <=
                        op.SF_GETBEFOREDATE(PDEMANDDATE)
                    AND WORK_GUBUN = '1'
                  GROUP BY DEPT_CD, OFFICE_CD) BIKE,
                /*           ------- 금,토에 등록한 환전금과 교부금은 이체할대 뺀다...  20090909 정희성작성  
                (select dept_Cd, office_cd, sum(exg_coin_amt+exg_check_amt) amt 
                    from op.t_fn_bike_close
                    where carry_date>=op.sf_getPreActDate('20090907')
                    and carry_date<=op.sf_getAfterPreActDate('20090907')
                    AND WORK_GUBUN='1'
                    group by dept_Cd, office_cd) bike2,*/
                
                (SELECT DEPT_CD, OFFICE_CD, CARRY_GROUP_CD, CARRY_ORG_CD
                   FROM OP.T_FN_CARRY_MASTER
                  WHERE CARRY_GROUP_CD = '03'
                    AND SUBSTR(CARRY_ORG_CD, 5, 3) = '302') CA
          WHERE CA.DEPT_CD = BIKE.DEPT_CD(+)
            AND CA.OFFICE_CD = BIKE.OFFICE_CD(+)
         --            and ca.dept_Cd = bike2.dept_Cd(+)
         --            and ca.office_cd = bike2.office_cd(+)
         );
      --------------------------------------------------------------       
      -- 마사회 지점이체 hossong 20080122       
      ----------------------------------------------------------------------------       
      /*
                   SELECT COUNT(*)
                   INTO vCount1
                   FROM op.t_fn_carry
                   WHERE carry_date = pDemandDate
                   and carry_group_cd ='09'
                   AND ROWNUM      = 1;
              
                   IF (vCount1 = 0) THEN
                    -- 기존데이타 있으면 스킵
      */
    
      DELETE OP.T_FN_CARRY
       WHERE CARRY_DATE = PDEMANDDATE
         AND CARRY_GROUP_CD = '09';
    
      INSERT INTO OP.T_FN_CARRY
        (CARRY_DATE,
         CARRY_GROUP_CD,
         CARRY_ORG_CD,
         CASH_AMT,
         CHECK_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE,
         INS_AMT,
         OUTS_AMT)
        (SELECT PDEMANDDATE CARRY_DATE,
                F.CARRY_GROUP_CD,
                F.CARRY_ORG_CD,
                NVL(HORSE_AMT, 0) CASH_AMT,
                0 CHECK_AMT,
                'system',
                SYSDATE,
                'system',
                SYSDATE,
                0,
                0
           FROM (SELECT AA.DEPT_CD, AA.OFFICE_CD, SUM(HORSE_AMT) HORSE_AMT
                   FROM (
                         
                         SELECT CENTER_CD,
                                 BRANCH_CD,
                                 H_BRANCH_CD,
                                 DEPT_CD,
                                 OFFICE_CD,
                                 SUM(AMT) HORSE_AMT
                           FROM (SELECT CLO.CLOSE_DATE,
                                         CLO.CENTER_CD,
                                         CLO.BRANCH_CD,
                                         CLO.H_BRANCH_CD
                                         --정희성20080208 , jum.dept_cd,  jum.office_cd           -- 강서센타와 수원만 합침(강동분리)
                                        ,
                                         '09' DEPT_CD,
                                         '30' OFFICE_CD
                                         --, '09' dept_cd,  '20' office_cd
                                        ,
                                         SUM(MOD(CLOSE_CW54_AMT, 50000000) +
                                             MOD(CLOSE_CW14_AMT, 10000000) +
                                             MOD(CLOSE_CW53_AMT, 5000000) +
                                             MOD(CLOSE_CW13_AMT, 1000000) +
                                             COIN_AMT) AMT
                                  --, SUM( MOD(close_CW14_amt,10000000)+MOD(close_CW53_amt,5000000)+MOD(close_CW13_amt,1000000)+COIN_AMT) amt
                                    FROM OP.T_FN_HORSE_CLOSE  CLO,
                                         OP.T_CM_HORSE_BRANCH JUM
                                   WHERE CLO.CLOSE_DATE >=
                                         op.SF_GETPREACTDATE(PDEMANDDATE)
                                     AND CLO.CLOSE_DATE <=
                                         op.SF_GETBEFOREDATE(PDEMANDDATE)
                                     AND JUM.CENTER_CD = CLO.CENTER_CD
                                     AND JUM.BRANCH_CD = CLO.BRANCH_CD
                                     AND JUM.H_BRANCH_CD = CLO.H_BRANCH_CD
                                     AND JUM.AREA_YN = '0'
                                     AND JUM.GIVE_DEPT_CD <> '06'
                                   GROUP BY CLO.CLOSE_DATE,
                                            CLO.CENTER_CD,
                                            CLO.BRANCH_CD,
                                            CLO.H_BRANCH_CD,
                                            JUM.DEPT_CD,
                                            JUM.OFFICE_CD
                                  UNION ALL
                                  /* 강동 소속을 강서센타에서 분리 20110415 작업 및 20110418 시행*/
                                  SELECT CLO.CLOSE_DATE,
                                         CLO.CENTER_CD,
                                         CLO.BRANCH_CD,
                                         CLO.H_BRANCH_CD,
                                         '06' DEPT_CD,
                                         '10' OFFICE_CD,
                                         SUM(MOD(CLOSE_CW54_AMT, 50000000) +
                                             MOD(CLOSE_CW14_AMT, 10000000) +
                                             MOD(CLOSE_CW53_AMT, 5000000) +
                                             MOD(CLOSE_CW13_AMT, 1000000) +
                                             COIN_AMT) AMT
                                  --, SUM( MOD(close_CW14_amt,10000000)+MOD(close_CW53_amt,5000000)+MOD(close_CW13_amt,1000000)+COIN_AMT) amt
                                    FROM OP.T_FN_HORSE_CLOSE  CLO,
                                         OP.T_CM_HORSE_BRANCH JUM
                                   WHERE CLO.CLOSE_DATE >=
                                         op.SF_GETPREACTDATE(PDEMANDDATE)
                                     AND CLO.CLOSE_DATE <=
                                         op.SF_GETBEFOREDATE(PDEMANDDATE)
                                     AND JUM.CENTER_CD = CLO.CENTER_CD
                                     AND JUM.BRANCH_CD = CLO.BRANCH_CD
                                     AND JUM.H_BRANCH_CD = CLO.H_BRANCH_CD
                                     AND JUM.AREA_YN = '0'
                                     AND JUM.GIVE_DEPT_CD = '06'
                                   GROUP BY CLO.CLOSE_DATE,
                                            CLO.CENTER_CD,
                                            CLO.BRANCH_CD,
                                            CLO.H_BRANCH_CD,
                                            JUM.DEPT_CD,
                                            JUM.OFFICE_CD
                                  UNION ALL
                                  /* 지방지사 수득금 각 지사 배분 (입장료표함)*/
                                  SELECT CLO.CLOSE_DATE,
                                         CLO.CENTER_CD,
                                         CLO.BRANCH_CD,
                                         CLO.H_BRANCH_CD,
                                         JUM.DEPT_CD,
                                         JUM.OFFICE_CD,
                                         SUM(CLOSE_CW54_AMT + CLOSE_CW14_AMT +
                                             CLOSE_CW53_AMT + CLOSE_CW13_AMT +
                                             COIN_AMT + NVL(PX_AMT, 0) +
                                             (HW16_CNT * 1000000) +
                                             (HW55_CNT * 500000) +
                                             (HW35_CNT * 300000) +
                                             (HW15_CNT * 100000)) AMT
                                  --, sum(close_CW14_amt+close_CW53_amt+close_CW13_amt+coin_amt+(HW16_cnt*1000000)+(HW55_cnt*500000)+(HW35_cnt*300000)+(HW15_cnt*100000)) amt 
                                  --정희성20080208    , sum(close_CW14_amt+close_CW53_amt+close_CW13_amt+coin_amt+own_check_amt+etc_check_amt) amt 
                                    FROM OP.T_FN_HORSE_CLOSE  CLO,
                                         OP.T_CM_HORSE_BRANCH JUM
                                   WHERE CLO.CLOSE_DATE >=
                                         op.SF_GETPREACTDATE(PDEMANDDATE)
                                     AND CLO.CLOSE_DATE <=
                                         op.SF_GETBEFOREDATE(PDEMANDDATE)
                                     AND JUM.CENTER_CD = CLO.CENTER_CD
                                     AND JUM.BRANCH_CD = CLO.BRANCH_CD
                                     AND JUM.H_BRANCH_CD = CLO.H_BRANCH_CD
                                     AND JUM.AREA_YN = '1'
                                   GROUP BY CLO.CLOSE_DATE,
                                            CLO.CENTER_CD,
                                            CLO.BRANCH_CD,
                                            CLO.H_BRANCH_CD,
                                            JUM.DEPT_CD,
                                            JUM.OFFICE_CD
                                  UNION ALL
                                  /* 수도권지사 입장료 각 지사배분 */
                                  SELECT CLO.CLOSE_DATE,
                                         CLO.CENTER_CD,
                                         CLO.BRANCH_CD,
                                         CLO.H_BRANCH_CD,
                                         JUM.DEPT_CD,
                                         JUM.OFFICE_CD
                                         --, sum(nvl(PX_AMT,0)) amt 
                                        ,
                                         SUM(NVL(PX_AMT, 0)) +
                                         SUM(NVL(ENTER_AMT, 0)) AMT
                                  --, sum(close_CW14_amt+close_CW53_amt+close_CW13_amt+coin_amt+(HW16_cnt*1000000)+(HW55_cnt*500000)+(HW35_cnt*300000)+(HW15_cnt*100000)) amt 
                                  --정희성20091202   , sum(close_CW14_amt+close_CW53_amt+close_CW13_amt+coin_amt+own_check_amt+etc_check_amt) amt 
                                    FROM OP.T_FN_HORSE_CLOSE  CLO,
                                         OP.T_CM_HORSE_BRANCH JUM
                                   WHERE CLO.CLOSE_DATE >=
                                         op.SF_GETPREACTDATE(PDEMANDDATE)
                                     AND CLO.CLOSE_DATE <=
                                         op.SF_GETBEFOREDATE(PDEMANDDATE)
                                     AND JUM.CENTER_CD = CLO.CENTER_CD
                                     AND JUM.BRANCH_CD = CLO.BRANCH_CD
                                     AND JUM.H_BRANCH_CD = CLO.H_BRANCH_CD
                                     AND JUM.AREA_YN = '0'
                                   GROUP BY CLO.CLOSE_DATE,
                                            CLO.CENTER_CD,
                                            CLO.BRANCH_CD,
                                            CLO.H_BRANCH_CD,
                                            JUM.DEPT_CD,
                                            JUM.OFFICE_CD
                                  UNION ALL
                                  -- 마사회이체자금(활용금)루틴 추가 정희성20090417                         
                                  SELECT PDEMANDDATE CLOSE_DATE,
                                         '0' CENTER_CD,
                                         '0' BRANCH_CD,
                                         '0' H_BRANCH_CD,
                                         DEPT_CD,
                                         OFFICE_CD,
                                         CASE
                                           WHEN NICEAMT < 0 THEN
                                            -NICEAMT
                                           WHEN NICEAMT >= 0 THEN
                                            0
                                         END AMT
                                    FROM (SELECT DEPT_CD,
                                                 OFFICE_CD,
                                                 SUM(CASE
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '1' THEN
                                                        NVL(SUN_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '2' THEN
                                                        NVL(MON_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '3' THEN
                                                        NVL(TUE_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '4' THEN
                                                        NVL(WED_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '5' THEN
                                                        NVL(THU_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '6' THEN
                                                        NVL(FRI_DAY, 0)
                                                       WHEN op.SF_GETWEEKDAY(PDEMANDDATE) = '7' THEN
                                                        NVL(SAT_DAY, 0)
                                                     END) NICEAMT
                                            FROM OP.T_FN_NICE_SHARE_AMT
                                           WHERE PDEMANDDATE BETWEEN START_DATE AND
                                                 END_DATE
                                             AND DEPT_CD || OFFICE_CD IN
                                                 ('0510', '0610', '0920')
                                             AND ORG_CD = 'HS'
                                           GROUP BY DEPT_CD, OFFICE_CD)
                                  
                                  /* 20091201 입장료 화면개발로 해당테이블 미사용
                                       UNION ALL
                                  -- 마사회입장료루틴 추가 정희성20090417
                                       SELECT CLOSE_DATE, '0' CENTER_CD, '0' branch_CD, '0' H_branch_CD, DEPT_CD, OFFICE_CD, ENT_AMT AMT
                                       FROM OP.T_FN_HORSE_ENT
                                       WHERE CLOSE_DATE=pDemandDate  */
                                  )
                          GROUP BY CENTER_CD,
                                    BRANCH_CD,
                                    H_BRANCH_CD,
                                    DEPT_CD,
                                    OFFICE_CD
                         
                         ) AA
                  GROUP BY AA.DEPT_CD, AA.OFFICE_CD) H,
                (SELECT *
                   FROM OP.T_FN_CARRY_MASTER
                  WHERE CARRY_GROUP_CD = '09') F
          WHERE F.DEPT_CD = H.DEPT_CD(+)
            AND F.OFFICE_CD = H.OFFICE_CD(+));
    
      --         END IF;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackDemand',
                                          VRESULT,
                                          PDEMANDDATE);
  
  EXCEPTION
    WHEN EALREADYEXISTSEXCEPTION THEN
      OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackDemand',
                                            'Aleady Data Exists!!',
                                            PDEMANDDATE);
    
  END SP_CREATEPACKDEMAND;

  PROCEDURE SP_CREATEPACKBRANCH(PDEMANDDATE IN OP.T_FN_PACK_BRANCH.DEMAND_DATE%TYPE DEFAULT null,
                                PISDELETING IN VARCHAR DEFAULT '1') IS
    VPREACTDATE OP.T_FN_PACK_BRANCH.DEMAND_DATE%TYPE; -- 전영업일
    VCOUNT      NUMBER(1) := 0;
    VRESULT     OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    -- 기존데이타 존재여부 체크
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    SELECT COUNT(*)
      INTO VCOUNT
      FROM OP.T_FN_PACK_BRANCH
     WHERE DEMAND_DATE = PDEMANDDATE
       AND ROWNUM = 1;
  
    IF (VCOUNT > 0) THEN
      IF PISDELETING = '1' THEN
        -- 기존데이타 삭제
        DELETE OP.T_FN_PACK_BRANCH WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    END IF;
  
    VPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE);
  
    BEGIN
      INSERT INTO OP.T_FN_PACK_BRANCH
        (DEMAND_DATE,
         ORG_CD,
         BRANCH_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PDEMANDDATE, -- 청구일자
               DMD.ORG_CD, -- 기관코드
               DMD.BRANCH_CD, -- 지점코드
               DMD.POST_TRANS_AMT, -- 익일현송액 (익일정규현송액 + 토요정규현송액)
               DMD.PRE_ADD_TRANS_AMT, -- 전일추가현송액
               DMD.PRE_COLLECT_AMT, -- 전일회수액
               DMD.DIFFER_AMT, -- 과여액
               DMD.PRE_RESPECT_AMT, -- 전일회수예상치
               DMD.BALANCE_AMT, -- 당일 현송후 잔액
               
               CASE
                 WHEN DMD.ORG_CD IN ('0SL', '0YN', '0KI', '027', '0KK') THEN
                  DMD.OFC_COLLECT_AMT --삼성생명 원단위(20080526 hossong)
                 ELSE
                  DMD.OFC_COLLECT_AMT -
                  CEIL(DMD.REAL_AMT / CDEMANDUNIT) * CDEMANDUNIT +
                  DMD.REAL_AMT -- 당일회수예상치 (사무소회수예상치 - 차액분)
               END,
               CASE
                 WHEN DMD.ORG_CD IN ('0SL', '0YN', '0KI', '027', '0KK') THEN
                  DMD.REAL_AMT --삼성생명 원단위(20080526 hossong)
                 ELSE
                  CEIL(DMD.REAL_AMT / CDEMANDUNIT) * CDEMANDUNIT -- 당일청구액
               END,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DTL.ORG_CD,
                       DTL.BRANCH_CD,
                       MAX(ORG.AMT_UNIT) AMT_UNIT, -- 금전단위
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) POST_TRANS_AMT, -- 익일현송액
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) PRE_ADD_TRANS_AMT, -- 전일추가현송액
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) PRE_COLLECT_AMT, -- 전일회수액
                       NVL(SUM(DTL.DIFFER_AMT), 0) DIFFER_AMT, -- 과여액
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) PRE_RESPECT_AMT, -- 전일회수예상치
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                       NVL(SUM(DTL.DIFFER_AMT), 0) -
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) BALANCE_AMT, -- 당일 현송후 잔액
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) +
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) -
                       (NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                        NVL(SUM(DTL.DIFFER_AMT), 0) -
                        NVL(SUM(DTL.PRE_RESPECT_AMT), 0)) -
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) REAL_AMT, -- 실제청구액계산치
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) OFC_COLLECT_AMT -- 사무소 회수예상치
                  FROM (SELECT RPT.ORG_CD,
                               RPT.BRANCH_CD,
                               RPT.POST_SENDPLAN_AMT + RPT.WKD_SENDPLAN_AMT POST_TRANS_AMT,
                               RPT.PLUS_SEND_AMT PRE_ADD_TRANS_AMT,
                               RPT.CLOSE_AMT PRE_COLLECT_AMT,
                               RPT.DIFFER_AMT DIFFER_AMT,
                               0 PRE_RESPECT_AMT,
                               0 OFC_COLLECT_AMT
                          FROM OP.T_FN_PACK_REPORT RPT
                         WHERE RPT.DEMAND_DATE = PDEMANDDATE
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               0,
                               0,
                               0,
                               0,
                               CUR_RESPECT_AMT, -- 전일회수예상치
                               0
                          FROM OP.T_FN_PACK_BRANCH
                         WHERE DEMAND_DATE = VPREACTDATE
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(op.SF_GETWEEKDAY(PDEMANDDATE),
                                      1,
                                      COLLECT_RESPECT1_AMT,
                                      2,
                                      COLLECT_RESPECT2_AMT,
                                      3,
                                      COLLECT_RESPECT3_AMT,
                                      4,
                                      COLLECT_RESPECT4_AMT,
                                      5,
                                      COLLECT_RESPECT5_AMT,
                                      6,
                                      COLLECT_RESPECT6_AMT,
                                      7,
                                      COLLECT_RESPECT7_AMT) COLLECT_RESPECT_AMT -- 사무소회수예상치
                          FROM OP.T_FN_COLLECT_RESPECT_AMT
                         WHERE START_DATE <= PDEMANDDATE
                           AND END_DATE >= PDEMANDDATE) DTL,
                       OP.T_CM_ORG ORG
                 WHERE DTL.ORG_CD = ORG.ORG_CD
                   AND ORG.NICE_ORG_YN IN ('0', '2')
                 GROUP BY DTL.ORG_CD, DTL.BRANCH_CD) DMD
        --          where dmd.org_cd not in ('0EM','0EL') ; --이마트 제외
         WHERE DMD.ORG_CD NOT IN
               ('0EM', '0EL', '0HA', '0SA', '0MM', '0CS', '0EN', '0BH'); --물류반영
    
      --이마트 용 
    
      INSERT INTO OP.T_FN_PACK_BRANCH
        (DEMAND_DATE,
         ORG_CD,
         BRANCH_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PDEMANDDATE,
               AA.ORG_CD,
               AA.BRANCH_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               (NVL(-AA.INAMT, 0) + NVL(AA.OUTAMT, 0)) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM (
                
                SELECT A.ORG_CD,
                        A.BRANCH_CD,
                        DECODE(C.OPER_TYPE, '1400', '2', '1') OPER_TYPE,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                               IN_CHULNAP
                              ELSE
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                            END) INAMT,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                              ELSE
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                            END) OUTAMT
                
                  FROM OP.T_FN_CALMAC_DSUM       A,
                        OP.T_CM_MAC               B,
                        OP.T_CM_SITE              C,
                        OP.T_FN_EMART_DEMAND_DATE D
                 WHERE D.BASE_DATE = PDEMANDDATE
                   AND D.ORG_CD = A.ORG_CD
                   AND D.BRANCH_CD = A.BRANCH_CD
                   AND D.ORG_CD = C.ORG_CD
                   AND D.BRANCH_CD = C.BRANCH_CD
                   AND A.CLOSE_DATE >= D.START_DATE
                   AND A.CLOSE_DATE <=
                       op.SF_GETBEFOREDATE(D.END_DATE)
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                
                 GROUP BY A.ORG_CD,
                           A.BRANCH_CD,
                           DECODE(C.OPER_TYPE, '1400', '2', '1')) AA;
    
      --         where dmd.org_cd <> '32'; 
    
      -- 부산은행은 다른기준
      /*        
            INSERT INTO op.t_fn_pack_branch (
                 demand_date,
                 org_cd,
                 branch_cd,
                 post_trans_amt,
                 pre_add_trans_amt,
                 pre_collect_amt,
                 differ_amt,
                 pre_respect_amt,
                 balance_amt,
                 cur_respect_amt,
                 demand_amt,
                 insert_uid,
                 insert_date,
                 update_uid,
                 update_date)
            SELECT pDemandDate,              -- 청구일자
                 dmd.org_cd,            -- 기관코드
                 dmd.branch_cd,          -- 지점코드
                 dmd.post_trans_amt,        -- 익일현송액 (익일정규현송액 + 토요정규현송액)
                 dmd.pre_add_trans_amt,      -- 전일추가현송액
                 dmd.pre_collect_amt,        -- 전일회수액
                 dmd.differ_amt,          -- 과여액
                 dmd.pre_respect_amt,        -- 전일회수예상치
                 dmd.balance_amt,          -- 당일 현송후 잔액
                 
                 dmd.ofc_collect_amt 
                           - CEIL(dmd.real_amt / cDemandUnit) * cDemandUnit
                           + dmd.real_amt,               -- 당일회수예상치 (사무소회수예상치 - 차액분)
                  CEIL(dmd.real_amt / cDemandUnit) * cDemandUnit,  -- 당일청구액
                 'INSERT',
                 SYSDATE,
                 'INSERT',
                 SYSDATE
              FROM (SELECT dtl.org_cd,  
                           dtl.branch_cd,                
                     MAX(org.amt_unit)                    amt_unit,        -- 금전단위
                     NVL(SUM(dtl.post_trans_amt), 0)    post_trans_amt,    -- 익일현송액
                     NVL(SUM(dtl.pre_add_trans_amt), 0)  pre_add_trans_amt,  -- 전일추가현송액
                     NVL(SUM(dtl.pre_collect_amt), 0)    pre_collect_amt,  -- 전일회수액
                     NVL(SUM(dtl.differ_amt), 0)      differ_amt,      -- 과여액
                     NVL(SUM(dtl.pre_respect_amt), 0)    pre_respect_amt,  -- 전일회수예상치
                     NVL(SUM(dtl.pre_collect_amt), 0) 
                    + NVL(SUM(dtl.differ_amt), 0) 
                    - NVL(SUM(dtl.pre_respect_amt), 0)  balance_amt,    -- 당일 현송후 잔액
                     NVL(SUM(dtl.post_trans_amt), 0) -- O
                    + NVL(SUM(dtl.pre_add_trans_amt), 0) -- X
                    - (NVL(SUM(dtl.pre_collect_amt), 0) -- X
                       + NVL(SUM(dtl.differ_amt), 0) --X
                       - NVL(SUM(dtl.pre_respect_amt), 0))   -- O
                    - NVL(SUM(dtl.ofc_collect_amt), 0)  real_amt,      -- 실제청구액계산치
                     NVL(SUM(dtl.ofc_collect_amt), 0)    ofc_collect_amt    -- 사무소 회수예상치
                  FROM (SELECT rpt.org_cd,
                         rpt.branch_cd,
                         rpt.post_sendplan_amt    
                        + rpt.wkd_sendplan_amt  post_trans_amt,
                         0                      pre_add_trans_amt,
                         0                      pre_collect_amt,
                         0                      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = pDemandDate
                     
                     UNION ALL               
                     SELECT rpt.org_cd,
                         rpt.branch_cd,
                         0  post_trans_amt,
                         rpt.plus_send_amt    pre_add_trans_amt,
                         rpt.close_amt      pre_collect_amt,
                         rpt.differ_amt      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = vPreActDate
                     
                     UNION ALL
                    SELECT org_cd,
                         branch_cd,
                         0,
                         0,
                         0,
                         0,
                         cur_respect_amt,                -- 전일회수예상치
                         0
                      FROM op.t_fn_pack_branch
                     WHERE demand_date = vPreActDate
                     UNION ALL
                    SELECT org_cd,
                         branch_cd,
                         0,
                         0,
                         0,
                         0,
                         0,
                         decode(op.sf_getWeekday(pDemandDate),1,collect_respect1_amt,
                            2,collect_respect2_amt,
                            3,collect_respect3_amt,
                            4,collect_respect4_amt,
                            5,collect_respect5_amt,
                            6,collect_respect6_amt,
                             7,collect_respect7_amt
                            )  collect_respect_amt              -- 사무소회수예상치
                      FROM op.t_fn_collect_respect_amt
                     WHERE start_date <= pDemandDate
                       AND end_date   >= pDemandDate
                     ) dtl,
                     op.t_cm_org org
                 WHERE dtl.org_cd       = org.org_cd
                   AND org.nice_org_yn IN ('0', '2')
                GROUP BY dtl.org_cd,
                         dtl.branch_cd
                 ) dmd
               where dmd.org_cd = '32';      
      */
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackJijm',
                                          VRESULT,
                                          PDEMANDDATE);
  
  EXCEPTION
    WHEN EALREADYEXISTSEXCEPTION THEN
      OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackbranch',
                                            'Aleady Data Exists!!',
                                            PDEMANDDATE);
    
  END SP_CREATEPACKBRANCH;

  PROCEDURE SP_CREATEPACKOFCJJM(PDEMANDDATE IN OP.T_FN_PACK_OFCJJM.DEMAND_DATE%TYPE DEFAULT null,
                                PISDELETING IN VARCHAR DEFAULT '1') IS
    VPREACTDATE OP.T_FN_PACK_OFCJJM.DEMAND_DATE%TYPE; -- 전영업일
    VCOUNT      NUMBER(1) := 0;
    VRESULT     OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    -- 기존데이타 존재여부 체크
    SELECT COUNT(*)
      INTO VCOUNT
      FROM OP.T_FN_PACK_OFCJJM
     WHERE DEMAND_DATE = PDEMANDDATE
       AND ROWNUM = 1;
  
    IF (VCOUNT > 0) THEN
      IF PISDELETING = '1' THEN
        -- 기존데이타 삭제
        DELETE OP.T_FN_PACK_OFCJJM WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    END IF;
  
    VPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE);
  
    BEGIN
      INSERT INTO OP.T_FN_PACK_OFCJJM
        (DEMAND_DATE,
         ORG_CD,
         BRANCH_CD,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PDEMANDDATE, -- 청구일자
               DMD.ORG_CD, -- 기관코드
               DMD.BRANCH_CD, -- 지점코드
               DMD.DEPT_CD,
               DMD.OFFICE_CD,
               DMD.POST_TRANS_AMT, -- 익일현송액 (익일정규현송액 + 토요정규현송액)
               DMD.PRE_ADD_TRANS_AMT, -- 전일추가현송액
               DMD.PRE_COLLECT_AMT, -- 전일회수액
               DMD.DIFFER_AMT, -- 과여액
               DMD.PRE_RESPECT_AMT, -- 전일회수예상치
               DMD.BALANCE_AMT, -- 당일 현송후 잔액
               DMD.OFC_COLLECT_AMT -
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT +
               DMD.REAL_AMT, -- 당일회수예상치 (사무소회수예상치 - 차액분)
               CEIL(DMD.REAL_AMT / DMD.AMT_UNIT) * DMD.AMT_UNIT, -- 당일청구액
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT DTL.ORG_CD,
                       DTL.BRANCH_CD,
                       DTL.DEPT_CD,
                       DTL.OFFICE_CD,
                       MAX(ORG.AMT_UNIT) AMT_UNIT, -- 금전단위
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) POST_TRANS_AMT, -- 익일현송액
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) PRE_ADD_TRANS_AMT, -- 전일추가현송액
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) PRE_COLLECT_AMT, -- 전일회수액
                       NVL(SUM(DTL.DIFFER_AMT), 0) DIFFER_AMT, -- 과여액
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) PRE_RESPECT_AMT, -- 전일회수예상치
                       NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                       NVL(SUM(DTL.DIFFER_AMT), 0) -
                       NVL(SUM(DTL.PRE_RESPECT_AMT), 0) BALANCE_AMT, -- 당일 현송후 잔액
                       NVL(SUM(DTL.POST_TRANS_AMT), 0) +
                       NVL(SUM(DTL.PRE_ADD_TRANS_AMT), 0) -
                       (NVL(SUM(DTL.PRE_COLLECT_AMT), 0) +
                        NVL(SUM(DTL.DIFFER_AMT), 0) -
                        NVL(SUM(DTL.PRE_RESPECT_AMT), 0)) -
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) REAL_AMT, -- 실제청구액계산치
                       NVL(SUM(DTL.OFC_COLLECT_AMT), 0) OFC_COLLECT_AMT -- 사무소 회수예상치
                  FROM (SELECT RPT.ORG_CD,
                               RPT.BRANCH_CD,
                               RPT.DEPT_CD,
                               RPT.OFFICE_CD,
                               RPT.POST_SENDPLAN_AMT + RPT.WKD_SENDPLAN_AMT POST_TRANS_AMT,
                               RPT.PLUS_SEND_AMT PRE_ADD_TRANS_AMT,
                               RPT.CLOSE_AMT PRE_COLLECT_AMT,
                               RPT.DIFFER_AMT DIFFER_AMT,
                               0 PRE_RESPECT_AMT,
                               0 OFC_COLLECT_AMT
                          FROM OP.T_FN_PACK_REPORT RPT
                         WHERE RPT.DEMAND_DATE = PDEMANDDATE
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               CUR_RESPECT_AMT, -- 전일회수예상치
                               0
                          FROM OP.T_FN_PACK_OFCJJM
                         WHERE DEMAND_DATE = VPREACTDATE
                        UNION ALL
                        SELECT ORG_CD,
                               BRANCH_CD,
                               DEPT_CD,
                               OFFICE_CD,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(op.SF_GETWEEKDAY(PDEMANDDATE),
                                      1,
                                      COLLECT_RESPECT1_AMT,
                                      2,
                                      COLLECT_RESPECT2_AMT,
                                      3,
                                      COLLECT_RESPECT3_AMT,
                                      4,
                                      COLLECT_RESPECT4_AMT,
                                      5,
                                      COLLECT_RESPECT5_AMT,
                                      6,
                                      COLLECT_RESPECT6_AMT,
                                      7,
                                      COLLECT_RESPECT7_AMT) COLLECT_RESPECT_AMT -- 사무소회수예상치
                          FROM OP.T_FN_COLLECT_RESPECT_AMT
                         WHERE START_DATE <= PDEMANDDATE
                           AND END_DATE >= PDEMANDDATE) DTL,
                       OP.T_CM_ORG ORG
                 WHERE DTL.ORG_CD = ORG.ORG_CD
                   AND ORG.NICE_ORG_YN IN ('0', '2')
                 GROUP BY DTL.ORG_CD,
                          DTL.BRANCH_CD,
                          DTL.DEPT_CD,
                          DTL.OFFICE_CD) DMD
        --where dmd.org_cd not in ('0EM','0EL');         
         WHERE DMD.ORG_CD NOT IN
               ('0EM', '0EL', '0HA', '0SA', '0MM', '0CS', '0EN', '0BH'); -- 물류반영
    
      INSERT INTO OP.T_FN_PACK_OFCJJM
        (DEMAND_DATE,
         ORG_CD,
         BRANCH_CD,
         DEPT_CD,
         OFFICE_CD,
         POST_TRANS_AMT,
         PRE_ADD_TRANS_AMT,
         PRE_COLLECT_AMT,
         DIFFER_AMT,
         PRE_RESPECT_AMT,
         BALANCE_AMT,
         CUR_RESPECT_AMT,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
      
        SELECT PDEMANDDATE,
               AA.ORG_CD,
               AA.BRANCH_CD, --지점
               AA.FDEPT_CD,
               AA.FOFFICE_CD,
               0 POST_TRANS_AMT,
               0 PRE_ADD_TRANS_AMT,
               0 PRE_COLLECT_AMT,
               0 DIFFER_AMT,
               0 PRE_RESPECT_AMT,
               0 BALANCE_AMT,
               0 CUR_RESPECT_AMT,
               (NVL(-AA.INAMT, 0) + NVL(AA.OUTAMT, 0)) DEMAND_AMT,
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
        
          FROM (
                
                SELECT A.ORG_CD,
                        A.BRANCH_CD,
                        A.DEPT_CD FDEPT_CD,
                        A.OFFICE_CD FOFFICE_CD,
                        DECODE(C.OPER_TYPE, '1400', '2', '1') OPER_TYPE,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT + IN_GOOD +
                               IN_CHULNAP
                              ELSE
                               IN_CHK_TOT_AMT + IN_CASH_TOT_AMT
                            END) INAMT,
                        SUM(CASE
                              WHEN A.ORG_CD = '0EM' THEN
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT + OUT_GOOD
                              ELSE
                               OUT_CHK_TOT_AMT + OUT_CASH_TOT_AMT
                            END) OUTAMT
                
                  FROM OP.T_FN_CALMAC_DSUM       A,
                        OP.T_CM_MAC               B,
                        OP.T_CM_SITE              C,
                        OP.T_FN_EMART_DEMAND_DATE D
                 WHERE D.BASE_DATE = PDEMANDDATE
                   AND D.ORG_CD = A.ORG_CD
                   AND D.BRANCH_CD = A.BRANCH_CD
                   AND D.ORG_CD = C.ORG_CD
                   AND D.BRANCH_CD = C.BRANCH_CD
                   AND A.CLOSE_DATE >= D.START_DATE
                   AND A.CLOSE_DATE <=
                       op.SF_GETBEFOREDATE(D.END_DATE)
                   AND B.ORG_CD = C.ORG_CD
                   AND B.BRANCH_CD = C.BRANCH_CD
                   AND B.SITE_CD = C.SITE_CD
                   AND A.BRANCH_CD = B.BRANCH_CD
                   AND A.MAC_NO = B.MAC_NO
                
                 GROUP BY A.ORG_CD,
                           A.BRANCH_CD,
                           A.DEPT_CD,
                           A.OFFICE_CD,
                           DECODE(C.OPER_TYPE, '1400', '2', '1')) AA;
    
      /*         
            INSERT INTO op.t_fn_pack_ofcjjm (
                 demand_date,
                 org_cd,
                 branch_cd,
                 dept_cd,
                 office_cd,
                 post_trans_amt,
                 pre_add_trans_amt,
                 pre_collect_amt,
                 differ_amt,
                 pre_respect_amt,
                 balance_amt,
                 cur_respect_amt,
                 demand_amt,
                 insert_uid,
                 insert_date,
                 update_uid,
                 update_date)
            SELECT pDemandDate,              -- 청구일자
                 dmd.org_cd,            -- 기관코드
                 dmd.branch_cd,          -- 지점코드
                 dmd.dept_cd,
                 dmd.office_cd,
                 dmd.post_trans_amt,        -- 익일현송액 (익일정규현송액 + 토요정규현송액)
                 dmd.pre_add_trans_amt,      -- 전일추가현송액
                 dmd.pre_collect_amt,        -- 전일회수액
                 dmd.differ_amt,          -- 과여액
                 dmd.pre_respect_amt,        -- 전일회수예상치
                 dmd.balance_amt,          -- 당일 현송후 잔액
                 dmd.ofc_collect_amt 
                - CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit
                + dmd.real_amt,               -- 당일회수예상치 (사무소회수예상치 - 차액분)
                 CEIL(dmd.real_amt / dmd.amt_unit) * dmd.amt_unit,  -- 당일청구액
                 'INSERT',
                 SYSDATE,
                 'INSERT',
                 SYSDATE
              FROM (SELECT dtl.org_cd,  
                           dtl.branch_cd,  
                     dtl.dept_cd,
                     dtl.office_cd,              
                     MAX(org.amt_unit)                    amt_unit,        -- 금전단위
                     NVL(SUM(dtl.post_trans_amt), 0)    post_trans_amt,    -- 익일현송액
                     NVL(SUM(dtl.pre_add_trans_amt), 0)  pre_add_trans_amt,  -- 전일추가현송액
                     NVL(SUM(dtl.pre_collect_amt), 0)    pre_collect_amt,  -- 전일회수액
                     NVL(SUM(dtl.differ_amt), 0)      differ_amt,      -- 과여액
                     NVL(SUM(dtl.pre_respect_amt), 0)    pre_respect_amt,  -- 전일회수예상치
                     NVL(SUM(dtl.pre_collect_amt), 0) 
                    + NVL(SUM(dtl.differ_amt), 0) 
                    - NVL(SUM(dtl.pre_respect_amt), 0)  balance_amt,    -- 당일 현송후 잔액
                     NVL(SUM(dtl.post_trans_amt), 0) 
                    + NVL(SUM(dtl.pre_add_trans_amt), 0)
                    - (NVL(SUM(dtl.pre_collect_amt), 0) 
                       + NVL(SUM(dtl.differ_amt), 0) 
                       - NVL(SUM(dtl.pre_respect_amt), 0))  
                    - NVL(SUM(dtl.ofc_collect_amt), 0)  real_amt,      -- 실제청구액계산치
                     NVL(SUM(dtl.ofc_collect_amt), 0)    ofc_collect_amt    -- 사무소 회수예상치
                  FROM (SELECT rpt.org_cd,
                         rpt.branch_cd,
                         rpt.dept_cd,
                         rpt.office_cd,
                         rpt.post_sendplan_amt    
                        + rpt.wkd_sendplan_amt  post_trans_amt,
                         0      pre_add_trans_amt,
                         0      pre_collect_amt,
                         0      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = pDemandDate
                     
                     UNION ALL
                                    
                     SELECT rpt.org_cd,
                         rpt.branch_cd,
                         rpt.dept_cd,
                         rpt.office_cd,
                         0  post_trans_amt,
                         rpt.plus_send_amt    pre_add_trans_amt,
                         rpt.close_amt      pre_collect_amt,
                         rpt.differ_amt      differ_amt,
                         0            pre_respect_amt,
                         0            ofc_collect_amt
                      FROM op.t_fn_pack_report rpt
                     WHERE rpt.demand_date = vPreActDate
                                    
                     UNION ALL
                    SELECT org_cd,
                         branch_cd,
                         dept_cd,
                         office_cd,
                         0,
                         0,
                         0,
                         0,
                         cur_respect_amt,                -- 전일회수예상치
                         0
                      FROM op.t_fn_pack_ofcjjm
                     WHERE demand_date = vPreActDate
                     UNION ALL
                    SELECT org_cd,
                         branch_cd,
                         dept_cd,
                         office_cd,
                         0,
                         0,
                         0,
                         0,
                         0,
                         decode(op.sf_getWeekday(pDemandDate),1,collect_respect1_amt,
                            2,collect_respect2_amt,
                            3,collect_respect3_amt,
                            4,collect_respect4_amt,
                            5,collect_respect5_amt,
                            6,collect_respect6_amt,
                             7,collect_respect7_amt
                            )  collect_respect_amt              -- 사무소회수예상치
                      FROM op.t_fn_collect_respect_amt
                     WHERE start_date <= pDemandDate
                       AND end_date   >= pDemandDate
                     ) dtl,
                     op.t_cm_org org
                 WHERE dtl.org_cd       = org.org_cd
                   AND org.nice_org_yn IN ('0', '2')
                GROUP BY dtl.org_cd,
                         dtl.branch_cd,
                     dtl.dept_cd,
                     dtl.office_cd
                 ) dmd
               where dmd.org_cd = '32';    
      */
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackOfcJjm',
                                          VRESULT,
                                          PDEMANDDATE);
  
  EXCEPTION
    WHEN EALREADYEXISTSEXCEPTION THEN
      OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackOfcJjm',
                                            'Aleady Data Exists!!',
                                            PDEMANDDATE);
    
  END SP_CREATEPACKOFCJJM;

  /* 일괄관리 기기별 청구자료 생성 */
  PROCEDURE SP_CREATEPACKREPORT(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                                PISDELETING IN VARCHAR DEFAULT '1') IS
    VBEFOREDATE    OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 전일
    VAFTERDATE     OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 익일
    VPREACTDATE    OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 전영업일
    VPOSTACTDATE   OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 익영업일
    VPREPREACTDATE OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE; -- 전전영업일
  
    VCOUNT  NUMBER(1) := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    -- 기존데이타 존재여부 체크
    SELECT COUNT(*)
      INTO VCOUNT
      FROM OP.T_FN_PACK_REPORT
     WHERE DEMAND_DATE = PDEMANDDATE
       AND ROWNUM = 1;
  
    IF (VCOUNT > 0) THEN
      IF PISDELETING = '1' THEN
        -- 기존데이타 삭제
        DELETE OP.T_FN_PACK_REPORT WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    END IF;
  
    VBEFOREDATE    := op.SF_GETBEFOREDATE(PDEMANDDATE);
    VAFTERDATE     := op.SF_GETAFTERDATE(PDEMANDDATE);
    VPREACTDATE    := op.SF_GETPREACTDATE(PDEMANDDATE);
    VPOSTACTDATE   := op.SF_GETPOSTACTDATE(PDEMANDDATE);
    VPREPREACTDATE := op.SF_GETPREACTDATE(PDEMANDDATE, 2);
  
    BEGIN
      INSERT INTO OP.T_FN_PACK_REPORT
        (DEMAND_DATE,
         ORG_CD,
         BRANCH_CD,
         MAC_NO,
         DEPT_CD,
         OFFICE_CD,
         OPER_TYPE,
         CLOSE_DATE,
         OUT_AMT,
         IN_AMT,
         CLOSE_AMT,
         DIFFER_CNT,
         DIFFER_AMT,
         PRE_SEND_AMT,
         PRE_AMT,
         ORD_SEND_AMT,
         PLUS_SEND_AMT,
         OPER_AMT,
         END_AMT,
         POST_SENDPLAN_AMT,
         WKD_SENDPLAN_AMT,
         DEMAND_AMT,
         PRE_DIFFER_AMT,
         PRE_SAFE_AMT,
         PRE_MAC_AMT,
         SAFE_AMT,
         MAC_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT PDEMANDDATE,
               MAC.ORG_CD,
               MAC.BRANCH_CD,
               MAC.MAC_NO,
               MAC.FDEPT_CD,
               MAC.FOFFICE_CD,
               MAC.OPER_TYPE,
               VPREACTDATE,
               NVL(SUM(RPT.OUT_AMT), 0), -- 지급액
               NVL(SUM(RPT.IN_AMT), 0), -- 입금액
               NVL(SUM(RPT.CLOSE_AMT), 0), -- 마감액 (회수액)
               NVL(SUM(RPT.DIFFER_CNT), 0), -- 과여건수
               NVL(SUM(RPT.DIFFER_AMT), 0), -- 과여금액
               NVL(SUM(RPT.PRE_SEND_AMT), 0), -- 전일장전현금
               NVL(SUM(RPT.PRE_AMT), 0), -- 전일 보유액
               NVL(SUM(RPT.ORD_SEND_AMT), 0), -- 당일 현송예측액
               NVL(SUM(RPT.PLUS_SEND_AMT), 0), -- 추가현송액
               NVL(SUM(RPT.OPER_AMT), 0), -- 운영자금수령액
               NVL(SUM(RPT.PRE_AMT), 0) + NVL(SUM(RPT.CLOSE_AMT), 0) -
               NVL(SUM(RPT.ORD_SEND_AMT), 0) -
               NVL(SUM(RPT.PLUS_SEND_AMT), 0) + NVL(SUM(OPER_AMT), 0), -- 당일보유말잔
               NVL(SUM(RPT.POST_SENDPLAN_AMT), 0), -- 익일현송예측액
               NVL(SUM(RPT.WKD_SENDPLAN_AMT), 0), -- 주말현송예측액
               NVL(SUM(RPT.POST_SENDPLAN_AMT), 0) +
               NVL(SUM(RPT.WKD_SENDPLAN_AMT), 0) +
               NVL(SUM(RPT.PLUS_SEND_AMT), 0) - NVL(SUM(RPT.CLOSE_AMT), 0) -
               NVL(SUM(RPT.DIFFER_AMT), 0), -- 청구금액
               NVL(SUM(RPT.PRE_DIFFER_AMT), 0), -- 전일과여액
               NVL(SUM(RPT.PRE_SAFE_AMT), 0), -- 전일 금고시재
               NVL(SUM(RPT.PRE_MAC_AMT), 0), -- 전일 기기시재
               NVL(SUM(RPT.PRE_SAFE_AMT), 0) -
               NVL(SUM(RPT.ORD_SEND_AMT), 0) -
               NVL(SUM(RPT.PLUS_SEND_AMT), 0) + NVL(SUM(RPT.OPER_AMT), 0) +
               NVL(SUM(RPT.CLOSE_AMT), 0) + NVL(SUM(RPT.PRE_DIFFER_AMT), 0) +
               NVL(SUM(RPT.DIFFER_AMT), 0), -- 금고시재
               NVL(SUM(RPT.PRE_MAC_AMT), 0) + NVL(SUM(RPT.ORD_SEND_AMT), 0) +
               NVL(SUM(RPT.PLUS_SEND_AMT), 0) - NVL(SUM(RPT.OUT_AMT), 0) +
               NVL(SUM(RPT.IN_AMT), 0) - NVL(SUM(RPT.CLOSE_AMT), 0), -- 기기시재
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM (SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       OUT_AMT, -- 전일 마감기준 지급금액
                       IN_AMT, -- 전일 마감기준 입금금액
                       CLOSE_AMT, -- 전일 마감기준 마감금액
                       PRE_AMT   PRE_SEND_AMT, -- 전일마감기준 전일장전현금
                       0         PLUS_SEND_AMT, -- 전일 추가현송액 
                       0         ORD_SEND_AMT, -- 당일 정규현송현송예측액 
                       0         POST_SENDPLAN_AMT, -- 익영업일 현송예측액
                       0         WKD_SENDPLAN_AMT, -- 주말 현송예측액
                       0         PRE_AMT, -- 전일 보유액
                       0         OPER_AMT, -- 운영자금 수령액
                       0         DIFFER_CNT, -- 과여건수
                       0         DIFFER_AMT, -- 과여금액
                       0         PRE_DIFFER_AMT, -- 전일 과여금액
                       0         PRE_SAFE_AMT, -- 전일 금고시재
                       0         PRE_MAC_AMT -- 전일 기기시재
                  FROM OP.T_FN_CLOSE
                 WHERE CLOSE_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       NVL(SUM(SEND_AMT), 0), -- 전영업일 ~ 전일 추가현송액
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_SEND
                 WHERE SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND ORG_CD NOT IN ('039', '0WC') -- 경남은행 추가현송 집계 방식 변경에따른.. 2012.09.27 방혜진
                      -- AND ORG_CD NOT IN ('039') -- 경남은행 추가현송 집계 방식 변경에따른.. 2012.09.27 방혜진
                   AND SEND_TYPE = '2'
                   AND SEND_STATUS = '2'
                   AND CANCEL_TYPE = '0'
                 GROUP BY ORG_CD, BRANCH_CD, MAC_NO
                ---------------> 경남은행 추가현송 기준 변경으로 인한 수정 2012.09.27 방혜진
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       NVL(SUM(SEND_AMT), 0), -- 전영업일 ~ 전일 추가현송액
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM OP.T_FN_SEND
                 WHERE SEND_DATE >= TO_CHAR(TO_DATE(PDEMANDDATE, 'YYYYMMDD') - 30,
                                            'YYYYMMDD')
                   AND SEND_DATE < PDEMANDDATE
                      -- 경남은행 추가현송분은 청구일 = 추가 적용인 경우만                    
                   AND ORG_CD IN ('039', '0WC')
                      --AND org_cd IN ('039')
                   AND ADD_CASH_DATE = PDEMANDDATE
                   AND SEND_TYPE = '2'
                   AND SEND_STATUS = '2'
                   AND CANCEL_TYPE = '0'
                 GROUP BY ORG_CD, BRANCH_CD, MAC_NO
                --------------<----- 경남은행 추가현송 기준 변경으로 인한 수정 2012.09.27 방혜진                           
                UNION ALL
                
                --삼성생명 변경 hossong 20080602     
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       0,
                       DECODE(SEND_DATE, '29991231', SEND_AMT, 0), -- 청구일기준 전영업일 ~ 전일 현송계획액
                       DECODE(SEND_DATE, VPOSTACTDATE, SEND_AMT, 0), -- 청구일기준 익영업일정규현송계힉액
                       DECODE(op.SF_GETWEEKDAY(SEND_DATE),
                              '7',
                              SEND_AMT,
                              0), -- 토요 정규현송계획액 (청구일이 금요일일 때만)
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM (SELECT CASE
                                 WHEN SEND_DATE BETWEEN VPREACTDATE AND
                                      VBEFOREDATE THEN
                                  '29991231'
                                 ELSE
                                  SEND_DATE
                               END SEND_DATE,
                               ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               NVL(SUM(DECODE(LAST_SEND_TYPE,
                                              '1',
                                              PLAN_SEND_AMT,
                                              '2',
                                              CHANGE_SEND_AMT,
                                              '3',
                                              FORCE_SEND_AMT)),
                                   0) SEND_AMT
                          FROM OP.T_FN_SENDPLAN
                         WHERE (SEND_DATE BETWEEN VAFTERDATE AND VPOSTACTDATE OR
                               SEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE)
                           AND CONFIRM_YN = '1'
                           AND ORG_CD NOT IN
                               ('0SL', '0KI', '0YN', '027', '0KK') --삼성생명이 아닌경우 HOSSONG 20090615 0YN추가
                           AND CANCEL_TYPE = '0'
                         GROUP BY CASE
                                    WHEN SEND_DATE BETWEEN VPREACTDATE AND
                                         VBEFOREDATE THEN
                                     '29991231'
                                    ELSE
                                     SEND_DATE
                                  END,
                                  ORG_CD,
                                  BRANCH_CD,
                                  MAC_NO)
                
                UNION ALL
                
                /*           SELECT org_cd,
                               branch_cd,
                               mac_no,
                               0,
                               0,
                               0,
                               0,
                               0,
                               DECODE(send_date, 
                                  '29991231', send_amt,
                                       0),                               -- 청구일기준 전영업일 ~ 전일 현송계획액
                               DECODE(send_date, 
                                  vPreActDate, send_amt,
                                                       0),    -- 청구일기준 익영업일정규현송계힉액
                               DECODE(op.sf_getWeekday(send_date),
                                  '7', send_amt,
                                     0),                         -- 토요 정규현송계획액 (청구일이 금요일일 때만)
                               0,
                               0,
                               0,
                               0,
                               0,
                               0,
                               0
                            FROM (SELECT send_date,
                                   org_cd,
                                   branch_cd,
                                   mac_no,
                                   NVL(SUM(DECODE(last_send_type, 
                                          '1', plan_send_amt,
                                          '2', change_send_amt,
                                          '3', force_send_amt)), 0) send_amt       
                                FROM op.t_fn_sendPLAN
                               WHERE send_date = vPreActDate   -- 정희성20080604 
                                 AND confirm_yn      = '1'
                                          -- AND org_cd in ('0SL','0KI')-- 삼성생명인 경우
                                             AND org_cd in ('0SL')-- 삼성생명인 경우
                               AND cancel_type     = '0'
                                 GROUP BY send_date,
                                  org_cd,
                                  branch_cd,
                                  mac_no)
                --------------------------------------------------------------------------                                    
                           UNION ALL*/
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       0,
                       DECODE(SEND_DATE, '29991231', SEND_AMT, 0), -- 청구일기준 전영업일 ~ 전일 현송계획액
                       DECODE(SEND_DATE, PDEMANDDATE, SEND_AMT, 0), -- 청구일기준 익영업일정규현송계힉액
                       DECODE(op.SF_GETWEEKDAY(SEND_DATE),
                              '7',
                              SEND_AMT,
                              0), -- 토요 정규현송계획액 (청구일이 금요일일 때만)
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0
                  FROM (SELECT SEND_DATE,
                               ORG_CD,
                               BRANCH_CD,
                               MAC_NO,
                               NVL(SUM(DECODE(LAST_SEND_TYPE,
                                              '1',
                                              PLAN_SEND_AMT,
                                              '2',
                                              CHANGE_SEND_AMT,
                                              '3',
                                              FORCE_SEND_AMT)),
                                   0) SEND_AMT
                          FROM OP.T_FN_SENDPLAN
                         WHERE SEND_DATE = PDEMANDDATE -- 정희성20090608 
                           AND CONFIRM_YN = '1'
                           AND ORG_CD IN ('0SL', '0KI', '0YN', '027', '0KK') -- 삼성생명, 롯데뱅크인 경우HOSSONG 20090615 0YN추가
                           AND CANCEL_TYPE = '0'
                         GROUP BY SEND_DATE, ORG_CD, BRANCH_CD, MAC_NO)
                --------------------------------------------------------------------------                                    
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       END_AMT, -- 전일 보유말잔
                       DEMAND_AMT, -- 운영자금 수령액 (전영업일 청구액)
                       0,
                       0,
                       DIFFER_AMT,
                       SAFE_AMT,
                       MAC_AMT
                  FROM OP.T_FN_PACK_REPORT
                 WHERE DEMAND_DATE = VPREPREACTDATE
                UNION ALL
                SELECT ORG_CD,
                       BRANCH_CD,
                       MAC_NO,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       0,
                       COUNT(ORG_CD),
                       NVL(SUM(DEAL_AMT), 0),
                       0,
                       0,
                       0
                  FROM OP.T_FN_NOTEND
                 WHERE NOTEND_DATE BETWEEN VPREACTDATE AND VBEFOREDATE
                   AND ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                   AND OWNER_ORG_CD != OP.PKG_FN_NICEDEMAND.CNICEORGCODE
                --             AND process_yn        = '1'
                 GROUP BY ORG_CD, BRANCH_CD, MAC_NO) RPT,
               (SELECT MAC.ORG_CD,
                       MAC.BRANCH_CD,
                       MAC.MAC_NO,
                       DECODE(SIT.OPER_TYPE, '1400', '2', '1') OPER_TYPE,
                       SIT.FDEPT_CD,
                       SIT.FOFFICE_CD
                  FROM OP.T_CM_MAC MAC, OP.T_CM_SITE SIT
                 WHERE MAC.ORG_CD = SIT.ORG_CD
                   AND MAC.BRANCH_CD = SIT.BRANCH_CD
                   AND MAC.SITE_CD = SIT.SITE_CD
                   AND EXISTS
                 (SELECT 1
                          FROM OP.T_CM_ORG ORG
                         WHERE ORG.ORG_CD = MAC.ORG_CD
                           AND ORG.NICE_ORG_YN IN ('0', '2'))
                 GROUP BY MAC.ORG_CD,
                          MAC.BRANCH_CD,
                          MAC.MAC_NO,
                          DECODE(SIT.OPER_TYPE, '1400', '2', '1'),
                          SIT.FDEPT_CD,
                          SIT.FOFFICE_CD) MAC
         WHERE MAC.ORG_CD = RPT.ORG_CD(+)
           AND MAC.BRANCH_CD = RPT.BRANCH_CD(+)
           AND MAC.MAC_NO = RPT.MAC_NO(+)
         GROUP BY MAC.ORG_CD,
                  MAC.BRANCH_CD,
                  MAC.MAC_NO,
                  MAC.OPER_TYPE,
                  MAC.FDEPT_CD,
                  MAC.FOFFICE_CD;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackReport',
                                          VRESULT,
                                          PDEMANDDATE);
  
  EXCEPTION
    WHEN EALREADYEXISTSEXCEPTION THEN
      OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createPackReport',
                                            'Aleady Data Exists!!',
                                            PDEMANDDATE);
  END SP_CREATEPACKREPORT;

  /* 일괄관리 기관별 청구액 금전단위 적용 */
  PROCEDURE SP_UPDATEPACKDEMAND(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null) IS
    VREALAMT    OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
    VDEMANDAMT  OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
    VDEPTAMT    OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
    VRESPECTAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    VNHDEMANDAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
    VNHDEPTAMT   OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    V1000DEMANDAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
    V1000DEPTAMT   OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    VDGDEMANDAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE; -- 억단위 청구 칼수마 정 적용 20090731
    VDGDEPTAMT   OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    VWRDEMANDAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE; -- 천만단위 청구 칼수마 정 적용 20130216
    VWRDEPTAMT   OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    V1DEMANDAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE; -- 원단위 청구 칼수마 정 적용 20100222
    V1DEPTAMT   OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE;
  
    VORGCODE    OP.T_FN_PACK_DEMAND.ORG_CD%TYPE;
    VBRANCHCODE OP.T_CM_BRANCH.BRANCH_CD%TYPE;
    VOPERTYPE   OP.T_FN_PACK_DEMAND.OPER_TYPE%TYPE;
  
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
    CURSOR VORGCUR IS
      SELECT DISTINCT DMD.ORG_CD,
                      DMD.OPER_TYPE,
                      NVL(ORG.BRANCH_YN, '0') BRANCH_YN
        FROM OP.T_FN_PACK_DEMAND DMD, OP.T_CM_ORG ORG
       WHERE DMD.DEMAND_DATE = PDEMANDDATE
         AND DMD.ORG_CD = ORG.ORG_CD;
  
    CURSOR VBRANCHCUR IS
      SELECT BRANCH_CD
        FROM OP.T_FN_PACK_BRANCH
       WHERE DEMAND_DATE = PDEMANDDATE
         AND ORG_CD = VORGCODE;
  
    CURSOR VOFCJJMCUR IS
      SELECT DISTINCT BRANCH_CD
        FROM OP.T_FN_PACK_OFCJJM
       WHERE DEMAND_DATE = PDEMANDDATE
         AND ORG_CD = VORGCODE;
  
    CURSOR VOFFICECUR IS
      SELECT DISTINCT DEPT_CD, OFFICE_CD
        FROM OP.T_FN_PACK_OFCJJM
       WHERE DEMAND_DATE = PDEMANDDATE
         AND ORG_CD = VORGCODE;
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
    
      FOR VORGREC IN VORGCUR LOOP
        VORGCODE := VORGREC.ORG_CD;
      
        /**********************************    
             지점별 데이타 관리 (기업은행)
        **********************************/
        IF VORGREC.BRANCH_YN = '1' THEN
        
          /****************************************************
             op.t_fn_pack_demand와 데이타 동기화 
           차이분을 강남사무소로.....
          ****************************************************/
          SELECT NVL(SUM(ORGDEMANDAMT), 0) - NVL(SUM(JJMDEMANDAMT), 0),
                 NVL(SUM(ORGRESPECTAMT), 0) - NVL(SUM(JJMRESPECTAMT), 0)
            INTO VDEMANDAMT, VRESPECTAMT
            FROM (SELECT DEMAND_AMT      ORGDEMANDAMT,
                         CUR_RESPECT_AMT ORGRESPECTAMT,
                         0               JJMDEMANDAMT,
                         0               JJMRESPECTAMT
                    FROM OP.T_FN_PACK_DEMAND
                   WHERE DEMAND_DATE = PDEMANDDATE
                     AND ORG_CD = VORGREC.ORG_CD
                  UNION ALL
                  SELECT 0, 0, DEMAND_AMT, CUR_RESPECT_AMT
                    FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = PDEMANDDATE
                     AND ORG_CD = VORGREC.ORG_CD);
        
          -- 차이분을 강남사무소로....
          -- 대구은행은 대구지사로 hossong 20130131
          IF VORGREC.ORG_CD = '031' THEN
          
            UPDATE OP.T_FN_PACK_DEMAND
               SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                   CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                   UPDATE_DATE     = SYSDATE,
                   UPDATE_UID      = 'UPDATE'
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGREC.ORG_CD
               AND OPER_TYPE = '1'
               AND DEPT_CD = CDAGUDEPTCODE
               AND OFFICE_CD = CDAGUOFFICECODE;
          
          ELSE
          
            UPDATE OP.T_FN_PACK_DEMAND
               SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                   CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                   UPDATE_DATE     = SYSDATE,
                   UPDATE_UID      = 'UPDATE'
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGREC.ORG_CD
               AND OPER_TYPE = '1'
               AND DEPT_CD = CGANGNAMDEPTCODE
               AND OFFICE_CD = CGANGNAMOFFICECODE;
          END IF;
        
          /****************************************************
             op.t_fn_pack_ofcjjm와 데이타 동기화 
           각 지점별 차이분을 강남사무소로.....
          ****************************************************/
          FOR VBRANCHREC IN VBRANCHCUR LOOP
          
            SELECT NVL(SUM(OFCDEMANDAMT), 0) - NVL(SUM(JJMDEMANDAMT), 0),
                   NVL(SUM(OFCRESPECTAMT), 0) - NVL(SUM(JJMRESPECTAMT), 0)
              INTO VDEMANDAMT, VRESPECTAMT
              FROM (SELECT DEMAND_AMT      OFCDEMANDAMT,
                           CUR_RESPECT_AMT OFCRESPECTAMT,
                           0               JJMDEMANDAMT,
                           0               JJMRESPECTAMT
                      FROM OP.T_FN_PACK_OFCJJM
                     WHERE DEMAND_DATE = PDEMANDDATE
                       AND ORG_CD = VORGREC.ORG_CD
                       AND BRANCH_CD = VBRANCHREC.BRANCH_CD
                    UNION ALL
                    SELECT 0, 0, DEMAND_AMT, CUR_RESPECT_AMT
                      FROM OP.T_FN_PACK_BRANCH
                     WHERE DEMAND_DATE = PDEMANDDATE
                       AND ORG_CD = VORGREC.ORG_CD
                       AND BRANCH_CD = VBRANCHREC.BRANCH_CD);
          
            -- 차이분을 강남사무소로....
          
            -- 대구은행은 대구지사로 hossong 20130131
            IF VORGREC.ORG_CD = '031' THEN
            
              UPDATE OP.T_FN_PACK_OFCJJM
                 SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                     CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                     UPDATE_DATE     = SYSDATE,
                     UPDATE_UID      = 'UPDATE'
               WHERE DEMAND_DATE = PDEMANDDATE
                 AND ORG_CD = VORGREC.ORG_CD
                 AND BRANCH_CD = VBRANCHREC.BRANCH_CD
                 AND DEPT_CD = CDAGUDEPTCODE
                 AND OFFICE_CD = CDAGUOFFICECODE;
            
            ELSE
              UPDATE OP.T_FN_PACK_OFCJJM
                 SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                     CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                     UPDATE_DATE     = SYSDATE,
                     UPDATE_UID      = 'UPDATE'
               WHERE DEMAND_DATE = PDEMANDDATE
                 AND ORG_CD = VORGREC.ORG_CD
                 AND BRANCH_CD = VBRANCHREC.BRANCH_CD
                 AND DEPT_CD = CGANGNAMDEPTCODE
                 AND OFFICE_CD = CGANGNAMOFFICECODE;
            END IF;
          
          END LOOP;
        
          /*******************************************    
               사무소, 지점별 데이타 관리 (조흥은행)
          *******************************************/
        ELSIF VORGREC.BRANCH_YN IN ('2') THEN
          /* 지점별 테이블 데이타 재생성 */
          DELETE OP.T_FN_PACK_BRANCH
           WHERE DEMAND_DATE = PDEMANDDATE
             AND ORG_CD = VORGCODE;
        
          INSERT INTO OP.T_FN_PACK_BRANCH
            (DEMAND_DATE,
             ORG_CD,
             BRANCH_CD,
             POST_TRANS_AMT,
             PRE_ADD_TRANS_AMT,
             PRE_COLLECT_AMT,
             DIFFER_AMT,
             PRE_RESPECT_AMT,
             BALANCE_AMT,
             CUR_RESPECT_AMT,
             DEMAND_AMT,
             INSERT_UID,
             INSERT_DATE,
             UPDATE_UID,
             UPDATE_DATE)
            SELECT DEMAND_DATE,
                   ORG_CD,
                   BRANCH_CD,
                   NVL(SUM(POST_TRANS_AMT), 0),
                   NVL(SUM(PRE_ADD_TRANS_AMT), 0),
                   NVL(SUM(PRE_COLLECT_AMT), 0),
                   NVL(SUM(DIFFER_AMT), 0),
                   NVL(SUM(PRE_RESPECT_AMT), 0),
                   NVL(SUM(BALANCE_AMT), 0),
                   NVL(SUM(CUR_RESPECT_AMT), 0),
                   NVL(SUM(DEMAND_AMT), 0),
                   'DELINS',
                   SYSDATE,
                   'DELINS',
                   SYSDATE
              FROM OP.T_FN_PACK_OFCJJM
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
             GROUP BY DEMAND_DATE, ORG_CD, BRANCH_CD;
        
          /* 기관,사무소별 데이타 재생성 */
          DELETE OP.T_FN_PACK_DEMAND
           WHERE DEMAND_DATE = PDEMANDDATE
             AND ORG_CD = VORGCODE;
        
          INSERT INTO OP.T_FN_PACK_DEMAND
            (DEMAND_DATE,
             ORG_CD,
             OPER_TYPE,
             DEPT_CD,
             OFFICE_CD,
             POST_TRANS_AMT,
             PRE_ADD_TRANS_AMT,
             PRE_COLLECT_AMT,
             DIFFER_AMT,
             PRE_RESPECT_AMT,
             BALANCE_AMT,
             CUR_RESPECT_AMT,
             DEMAND_AMT,
             INSERT_UID,
             INSERT_DATE,
             UPDATE_UID,
             UPDATE_DATE)
            SELECT DEMAND_DATE,
                   ORG_CD,
                   '1',
                   DEPT_CD,
                   OFFICE_CD,
                   NVL(SUM(POST_TRANS_AMT), 0),
                   NVL(SUM(PRE_ADD_TRANS_AMT), 0),
                   NVL(SUM(PRE_COLLECT_AMT), 0),
                   NVL(SUM(DIFFER_AMT), 0),
                   NVL(SUM(PRE_RESPECT_AMT), 0),
                   NVL(SUM(BALANCE_AMT), 0),
                   NVL(SUM(CUR_RESPECT_AMT), 0),
                   NVL(SUM(DEMAND_AMT), 0),
                   'DELINS',
                   SYSDATE,
                   'DELINS',
                   SYSDATE
              FROM OP.T_FN_PACK_OFCJJM
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
             GROUP BY DEMAND_DATE, ORG_CD, DEPT_CD, OFFICE_CD;
        
          /****************************************************    
               사무소, 기관, 운영형태별 데이타 관리 (일반기관)
          ****************************************************/
        ELSE
          -- 청구금액과 당일회수예상치   
          SELECT SUM(DEMAND_AMT), SUM(CUR_RESPECT_AMT)
            INTO VREALAMT, VRESPECTAMT
            FROM OP.T_FN_PACK_DEMAND
           WHERE DEMAND_DATE = PDEMANDDATE
             AND ORG_CD = VORGCODE
             AND OPER_TYPE = VORGREC.OPER_TYPE;
        
          -- 백만원단위 환산 (청구계산치와 회수예상치의 합계를 기준으로)
          /* vDemandAmt := CEIL((vRealAmt + vRespectAmt) / cDemandUnit) * cDemandUnit   20040625 일반기관 회수예상치 관련 수정전*/
          VDEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / CDEMANDUNIT) *
                        CDEMANDUNIT; -- 수정후
          VDEPTAMT   := CEIL(VREALAMT / CDEMANDUNIT) * CDEMANDUNIT;
        
          --농협용 테이타 10000단위
          VNHDEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / CNHDEMANDUNIT) *
                          CNHDEMANDUNIT; -- 수정후
          VNHDEPTAMT   := CEIL(VREALAMT / CNHDEMANDUNIT) * CNHDEMANDUNIT;
        
          --1000단위
          V1000DEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / C1000DEMANDUNIT) *
                            C1000DEMANDUNIT; -- 수정후
          V1000DEPTAMT   := CEIL(VREALAMT / C1000DEMANDUNIT) *
                            C1000DEMANDUNIT;
        
          --억단위단위
          VDGDEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / CDGDEMANDUNIT) *
                          CDGDEMANDUNIT; -- 수정후
          VDGDEPTAMT   := CEIL(VREALAMT / CDGDEMANDUNIT) * CDGDEMANDUNIT;
        
          --천만단위
          VWRDEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / CWRDEMANDUNIT) *
                          CWRDEMANDUNIT; -- 수정후
          VWRDEPTAMT   := CEIL(VREALAMT / CWRDEMANDUNIT) * CWRDEMANDUNIT;
        
          --1원단위
          V1DEMANDAMT := CEIL((VREALAMT + VRESPECTAMT) / C1DEMANDUNIT) *
                         C1DEMANDUNIT; -- 수정후
          V1DEPTAMT   := CEIL(VREALAMT / C1DEMANDUNIT) * C1DEMANDUNIT;
          -- 수정후 2
          /***************************************************************
            차이액 = 백만원단위 환산청구액 - 실청구계산치
            청구금액 = 청구금액 + 차이액
            회수예상치 = 회수예상치 - 차이액
          **************************************************************/
          IF VORGCODE = '031' THEN
          
            UPDATE OP.T_FN_PACK_DEMAND
               SET DEMAND_AMT      = CASE
                                       WHEN VORGCODE = '011' THEN
                                        DEMAND_AMT + (VNHDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '004' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '032' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '045' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '012' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20120706 정희성추가
                                       WHEN VORGCODE = '071' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20101116 정희성추가
                                       WHEN VORGCODE = '035' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20101119 정희성추가
                                       WHEN VORGCODE = '0DJ' THEN
                                        DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '0TR' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '031' THEN
                                        DEMAND_AMT + (VDGDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '039' THEN
                                        DEMAND_AMT + (VWRDEPTAMT - VREALAMT) -- 20141026 정희성추가
                                       WHEN VORGCODE = '020' THEN
                                        DEMAND_AMT + (VWRDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EM' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EL' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0HA' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0SA' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0BH' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0MM' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0CS' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EN' THEN
                                        DEMAND_AMT + (V1DEPTAMT - VREALAMT) -- 물류반영
                                     
                                       WHEN VORGCODE = '0SL' THEN
                                        DEMAND_AMT
                                       WHEN VORGCODE = '0YN' THEN
                                        DEMAND_AMT
                                       WHEN VORGCODE = '0KI' THEN
                                        DEMAND_AMT
                                       WHEN VORGCODE = '0KK' THEN
                                        DEMAND_AMT
                                       WHEN VORGCODE = 'A27' THEN
                                        DEMAND_AMT --시티은행
                                       WHEN VORGCODE = '027' THEN
                                        DEMAND_AMT --시티은행                                        
                                       ELSE
                                        DEMAND_AMT + (VDEPTAMT - VREALAMT)
                                     END,
                   CUR_RESPECT_AMT = CASE
                                       WHEN VORGCODE = '011' THEN
                                        CUR_RESPECT_AMT - (VNHDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '004' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '032' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '045' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '012' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT) -- 20120706 정희성추가
                                       WHEN VORGCODE = '071' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT) -- 20101116 정희성추가
                                       WHEN VORGCODE = '035' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT) -- 20101119 정희성추가
                                       WHEN VORGCODE = '0DJ' THEN
                                        CUR_RESPECT_AMT - (V1000DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '0TR' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '031' THEN
                                        CUR_RESPECT_AMT - (VDGDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '039' THEN
                                        CUR_RESPECT_AMT - (VWRDEPTAMT - VREALAMT) -- 20141026 정희성추가
                                       WHEN VORGCODE = '020' THEN
                                        CUR_RESPECT_AMT - (VWRDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EM' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EL' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0HA' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0SA' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0BH' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0MM' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0CS' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EN' THEN
                                        CUR_RESPECT_AMT - (V1DEPTAMT - VREALAMT) -- 물류반영
                                     
                                       WHEN VORGCODE = '0SL' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0YN' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0KI' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0KK' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = 'A27' THEN
                                        CUR_RESPECT_AMT --시티은행   
                                       WHEN VORGCODE = '027' THEN
                                        CUR_RESPECT_AMT --시티은행  
                                       ELSE
                                        CUR_RESPECT_AMT - (VDEPTAMT - VREALAMT)
                                     END,
                   UPDATE_DATE     = SYSDATE,
                   UPDATE_UID      = 'UPDATE'
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
               AND OPER_TYPE = VORGREC.OPER_TYPE
               AND DEPT_CD = CDAGUDEPTCODE
               AND OFFICE_CD = CDAGUOFFICECODE;
          
          ELSE
          
            UPDATE OP.T_FN_PACK_DEMAND
               SET DEMAND_AMT = CASE
                                  WHEN VORGCODE = '011' THEN
                                   DEMAND_AMT + (VNHDEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '004' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '032' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '045' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '012' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20120706 정희성추가
                                  WHEN VORGCODE = '071' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20101116 정희성추가
                                  WHEN VORGCODE = '035' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20101119 정희성추가
                                  WHEN VORGCODE = '0DJ' THEN
                                   DEMAND_AMT + (V1000DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                  WHEN VORGCODE = '0TR' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                  WHEN VORGCODE = '031' THEN
                                   DEMAND_AMT + (VDGDEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '039' THEN
                                   DEMAND_AMT + (VWRDEPTAMT - VREALAMT) -- 20141026 정희성추가
                                  WHEN VORGCODE = '020' THEN
                                   DEMAND_AMT + (VWRDEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0EM' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0EL' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0HA' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0SA' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0BH' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0MM' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0CS' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT)
                                  WHEN VORGCODE = '0EN' THEN
                                   DEMAND_AMT + (V1DEPTAMT - VREALAMT) -- 물류반영
                                
                                  WHEN VORGCODE = '0SL' THEN
                                   DEMAND_AMT
                                  WHEN VORGCODE = '0YN' THEN
                                   DEMAND_AMT
                                  WHEN VORGCODE = '0KI' THEN
                                   DEMAND_AMT
                                  WHEN VORGCODE = '0KK' THEN
                                   DEMAND_AMT
                                  WHEN VORGCODE = 'A27' THEN
                                   DEMAND_AMT --시티은행
                                  WHEN VORGCODE = '027' THEN
                                   DEMAND_AMT --시티은행                                        
                                  ELSE
                                   DEMAND_AMT + (VDEPTAMT - VREALAMT)
                                END,
                   CUR_RESPECT_AMT = CASE
                                       WHEN VORGCODE = '011' THEN
                                        CUR_RESPECT_AMT -
                                        (VNHDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '004' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '032' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '045' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '012' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT) -- 20120706 정희성추가
                                       WHEN VORGCODE = '071' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT) -- 20101116 정희성추가
                                       WHEN VORGCODE = '035' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT) -- 20101119 정희성추가
                                       WHEN VORGCODE = '0DJ' THEN
                                        CUR_RESPECT_AMT -
                                        (V1000DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '0TR' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT) -- 20130621 정희성추가
                                       WHEN VORGCODE = '031' THEN
                                        CUR_RESPECT_AMT -
                                        (VDGDEPTAMT - VREALAMT)         
                                       WHEN VORGCODE = '039' THEN
                                        CUR_RESPECT_AMT -
                                        (VWRDEPTAMT - VREALAMT) -- 20141026 정희성추가
                                       WHEN VORGCODE = '020' THEN
                                        CUR_RESPECT_AMT -
                                        (VWRDEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EM' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EL' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0HA' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0SA' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0BH' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0MM' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0CS' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT)
                                       WHEN VORGCODE = '0EN' THEN
                                        CUR_RESPECT_AMT -
                                        (V1DEPTAMT - VREALAMT) -- 불류반영
                                     
                                       WHEN VORGCODE = '0SL' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0YN' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0KI' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = '0KK' THEN
                                        CUR_RESPECT_AMT
                                       WHEN VORGCODE = 'A27' THEN
                                        CUR_RESPECT_AMT --시티은행   
                                       WHEN VORGCODE = '027' THEN
                                        CUR_RESPECT_AMT --시티은행    
                                       ELSE
                                        CUR_RESPECT_AMT -
                                        (VDEPTAMT - VREALAMT)
                                     END,
                   UPDATE_DATE     = SYSDATE,
                   UPDATE_UID      = 'UPDATE'
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
               AND OPER_TYPE = VORGREC.OPER_TYPE
               AND DEPT_CD = CGANGNAMDEPTCODE
               AND OFFICE_CD = CGANGNAMOFFICECODE;
          END IF;
        
          IF SQL%NOTFOUND THEN
            IF VORGCODE = '11' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   VNHDEPTAMT - VREALAMT,
                   - (VNHDEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            ELSIF VORGCODE = '031' THEN
              -- 대구은행 억단위 적용 카리스마 정 작업 20090731
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CDAGUDEPTCODE,
                   CDAGUOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   VDGDEPTAMT - VREALAMT,
                   - (VDGDEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            ELSIF VORGCODE = '039' THEN
              -- 경남은행 천만단위 적용 카리스마 정 작업 20141026, 천원단위변경 20141028
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   VWRDEPTAMT - VREALAMT,
                   - (VWRDEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            ELSIF VORGCODE = '020' THEN
              -- 우리은행 천만단위 적용 카리스마 정 작업 20130216
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   VWRDEPTAMT - VREALAMT,
                   - (VWRDEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            ELSIF VORGCODE = '004' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            ELSIF VORGCODE = '032' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            
            ELSIF VORGCODE = '045' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            
            ELSIF VORGCODE = '012' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            
            ELSIF VORGCODE = '071' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            
            ELSIF VORGCODE = '035' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
              ------------------------------- 20130621  jhs수정(동양 천원단위청구 추가)---------------
            
            ELSIF VORGCODE = '0DJ' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   --  vDemandAmt - vRealAmt,
                   --  -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재           
                   V1000DEPTAMT - VREALAMT,
                   - (V1000DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
              ------------------------------- 20130902  jhs수정(공항 천원단위청구 추가)---------------
            
            ELSIF VORGCODE = '0TR' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   --  vDemandAmt - vRealAmt,
                   --  -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재           
                   V1DEPTAMT - VREALAMT,
                   - (V1DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
              --             elsif vOrgCode = '0EM' or vOrgCode = '0EL' then
            ELSIF VORGCODE = '0EM' OR VORGCODE = '0EL' OR VORGCODE = '0HA' OR
                  VORGCODE = '0SA' OR VORGCODE = '0MM' OR VORGCODE = '0CS' OR
                  VORGCODE = '0EN' OR VORGCODE = '0BH' THEN
              -- 물류반영
            
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20100222 카리스마정 */
                   V1DEPTAMT - VREALAMT,
                   - (V1DEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
              ------------------------------------------------------2008.05.26 삼성생명------------------------------------------------
            ELSIF VORGCODE = '0SL' OR VORGCODE = '0YN' OR VORGCODE = '0KI' OR
                  VORGCODE = '027' OR VORGCODE = '0KK' THEN
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   0,
                   0,
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
              ------------------------------------------------------2008.02.18 씨티은행 업무종료 자금반환 종료 ------------------------------------------------             
            ELSE
              BEGIN
                INSERT INTO OP.T_FN_PACK_DEMAND
                  (DEMAND_DATE,
                   ORG_CD,
                   OPER_TYPE,
                   DEPT_CD,
                   OFFICE_CD,
                   DEMAND_AMT,
                   CUR_RESPECT_AMT,
                   INSERT_DATE,
                   INSERT_UID,
                   UPDATE_DATE,
                   UPDATE_UID)
                VALUES
                  (PDEMANDDATE,
                   VORGCODE,
                   VORGREC.OPER_TYPE,
                   CGANGNAMDEPTCODE,
                   CGANGNAMOFFICECODE,
                   /*  vDemandAmt - vRealAmt,
                   -(vDemandAmt - vRealAmt),               20040625 회수예상치 강남 엎어치기 수정 이영재 */
                   VDEPTAMT - VREALAMT,
                   - (VDEPTAMT - VREALAMT),
                   SYSDATE,
                   'INSERT',
                   SYSDATE,
                   'INSERT');
              END;
            END IF;
          END IF;
        
          /************************************************
             op.t_fn_pack_branch 데이타 동기화
           차이분을 최초 지점코드로 반영
          ************************************************/
        
          BEGIN
            SELECT BRANCH_CD
              INTO VBRANCHCODE
              FROM OP.T_FN_PACK_BRANCH
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
               AND ROWNUM = 1;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              VBRANCHCODE := '    ';
          END;
        
          SELECT NVL(SUM(JJMDEMANDAMT), 0) - NVL(SUM(ORGDEMANDAMT), 0),
                 NVL(SUM(JJMRESPECTAMT), 0) - NVL(SUM(ORGRESPECTAMT), 0)
            INTO VDEMANDAMT, VRESPECTAMT
            FROM (SELECT DEMAND_AMT      JJMDEMANDAMT,
                         CUR_RESPECT_AMT JJMRESPECTAMT,
                         0               ORGDEMANDAMT,
                         0               ORGRESPECTAMT
                    FROM OP.T_FN_PACK_BRANCH
                   WHERE DEMAND_DATE = PDEMANDDATE
                     AND ORG_CD = VORGCODE
                  UNION ALL
                  SELECT 0, 0, DEMAND_AMT, CUR_RESPECT_AMT
                    FROM OP.T_FN_PACK_DEMAND
                   WHERE DEMAND_DATE = PDEMANDDATE
                     AND ORG_CD = VORGCODE);
        
          IF VORGCODE NOT IN ('0SL', '0YN', '0KI', '027', '0KK') THEN
            -- 삼성제외
            UPDATE OP.T_FN_PACK_BRANCH
               SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                   CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                   UPDATE_UID      = 'UPDATE',
                   UPDATE_DATE     = SYSDATE
             WHERE DEMAND_DATE = PDEMANDDATE
               AND ORG_CD = VORGCODE
               AND BRANCH_CD = VBRANCHCODE;
          END IF;
        
          /************************************************
             op.t_fn_pack_ofcjjm 데이타 동기화
           각 기관,사무소별 차이분을 최초 지점코드로 반영
          ************************************************/
          FOR VOFFICEREC IN VOFFICECUR LOOP
            BEGIN
              SELECT BRANCH_CD
                INTO VBRANCHCODE
                FROM OP.T_FN_PACK_OFCJJM
               WHERE DEMAND_DATE = PDEMANDDATE
                 AND ORG_CD = VORGCODE
                 AND DEPT_CD = VOFFICEREC.DEPT_CD
                 AND OFFICE_CD = VOFFICEREC.OFFICE_CD
                 AND ROWNUM = 1;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                VBRANCHCODE := '    ';
            END;
          
            SELECT NVL(SUM(JJMDEMANDAMT), 0) - NVL(SUM(ORGDEMANDAMT), 0),
                   NVL(SUM(JJMRESPECTAMT), 0) - NVL(SUM(ORGRESPECTAMT), 0)
              INTO VDEMANDAMT, VRESPECTAMT
              FROM (SELECT DEMAND_AMT      JJMDEMANDAMT,
                           CUR_RESPECT_AMT JJMRESPECTAMT,
                           0               ORGDEMANDAMT,
                           0               ORGRESPECTAMT
                      FROM OP.T_FN_PACK_OFCJJM
                     WHERE DEMAND_DATE = PDEMANDDATE
                       AND ORG_CD = VORGCODE
                       AND DEPT_CD = VOFFICEREC.DEPT_CD
                       AND OFFICE_CD = VOFFICEREC.OFFICE_CD
                    UNION ALL
                    SELECT 0, 0, DEMAND_AMT, CUR_RESPECT_AMT
                      FROM OP.T_FN_PACK_DEMAND
                     WHERE DEMAND_DATE = PDEMANDDATE
                       AND ORG_CD = VORGCODE
                       AND DEPT_CD = VOFFICEREC.DEPT_CD
                       AND OFFICE_CD = VOFFICEREC.OFFICE_CD);
          
            IF VORGCODE NOT IN ('0SL', '0YN', '0KI', '027', '0KK') THEN
              --삼성제외
              UPDATE OP.T_FN_PACK_OFCJJM
                 SET DEMAND_AMT      = DEMAND_AMT - VDEMANDAMT,
                     CUR_RESPECT_AMT = CUR_RESPECT_AMT - VRESPECTAMT,
                     UPDATE_UID      = 'UPDATE',
                     UPDATE_DATE     = SYSDATE
               WHERE DEMAND_DATE = PDEMANDDATE
                 AND ORG_CD = VORGCODE
                 AND BRANCH_CD = VBRANCHCODE
                 AND DEPT_CD = VOFFICEREC.DEPT_CD
                 AND OFFICE_CD = VOFFICEREC.OFFICE_CD;
            
            END IF;
          
          END LOOP;
        END IF;
      END LOOP;
    
      /* 마사회 데이타(op.t_fn_pack_special) 반영 -- hossong막음 20041125 농협적용건발생*/
      /*hossong 200500713 다시 품*/
      SP_REFLECTPACKSPECIAL(PDEMANDDATE);
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_updatePackDemand',
                                          VRESULT,
                                          PDEMANDDATE);
  END SP_UPDATEPACKDEMAND;

  /* 일괄관리 기기별 청구자료 회수예상치 반영 */
  PROCEDURE SP_UPDATEPACKREPORT(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null) IS
    /****************************************************************
      * 청구금액 = 기기별 청구금액 + 전일회수예상치 - 당일회수예상치
    ****************************************************************/
  
    CURSOR VCUR IS
      SELECT ROWID RID, ORG_CD
        FROM OP.T_FN_PACK_REPORT
       WHERE DEMAND_DATE = PDEMANDDATE
         AND ORG_CD || BRANCH_CD || ':' || MAC_NO IN
             (SELECT MIN(ORG_CD || BRANCH_CD || ':' || MAC_NO)
                FROM OP.T_FN_PACK_REPORT
               WHERE DEMAND_DATE = PDEMANDDATE
               GROUP BY ORG_CD);
  
    VDIFFAMT OP.T_FN_PACK_DEMAND.DEMAND_AMT%TYPE := 0;
    VRESULT  OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
    BEGIN
      FOR VREC IN VCUR LOOP
        SELECT NVL(SUM(ORGAMT), 0) - NVL(SUM(MACAMT), 0)
          INTO VDIFFAMT
          FROM (SELECT DEMAND_AMT ORGAMT, 0 MACAMT
                  FROM OP.T_FN_PACK_DEMAND
                 WHERE DEMAND_DATE = PDEMANDDATE
                   AND ORG_CD = VREC.ORG_CD
                UNION ALL
                SELECT 0, DEMAND_AMT
                  FROM OP.T_FN_PACK_REPORT
                 WHERE DEMAND_DATE = PDEMANDDATE
                   AND ORG_CD = VREC.ORG_CD);
      
        UPDATE OP.T_FN_PACK_REPORT
           SET DEMAND_AMT  = DEMAND_AMT + VDIFFAMT,
               UPDATE_DATE = SYSDATE,
               UPDATE_UID  = 'UPDATE'
         WHERE ROWID = VREC.RID;
      END LOOP;
    
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
  
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_updatePackReport',
                                          VRESULT,
                                          PDEMANDDATE);
  END SP_UPDATEPACKREPORT;

  /* 하나은행 전송용 자료 생성 */
  PROCEDURE SP_CREATEHANABANK(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null,
                              PISDELETING IN VARCHAR DEFAULT '1') IS
  
    VCOUNT  NUMBER(1) := 0;
    VRESULT OP.T_CM_BATCH_RESULT.PGM_RESULT%TYPE := 'OK'; -- 처리결과
  
  BEGIN
    -- 기존데이타 존재여부 체크
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    SELECT COUNT(*)
      INTO VCOUNT
      FROM OP.T_FN_PACK_DEMAND_SUM
     WHERE DEMAND_DATE = PDEMANDDATE
       AND ROWNUM = 1;
  
    IF (VCOUNT > 0) THEN
      IF PISDELETING = '1' THEN
        -- 기존데이타 삭제
        DELETE OP.T_FN_PACK_DEMAND_SUM WHERE DEMAND_DATE = PDEMANDDATE;
      ELSE
        RAISE EALREADYEXISTSEXCEPTION;
      END IF;
    END IF;
  
    BEGIN
    
      INSERT INTO OP.T_FN_PACK_DEMAND_SUM
        (ORG_CD,
         DEMAND_DATE,
         DEMAND_AMT,
         INSERT_UID,
         INSERT_DATE,
         UPDATE_UID,
         UPDATE_DATE)
        SELECT ORG_CD,
               PDEMANDDATE,
               NVL(SUM(DEMAND_AMT), 0),
               'INSERT',
               SYSDATE,
               'INSERT',
               SYSDATE
          FROM OP.T_FN_PACK_DEMAND
         WHERE DEMAND_DATE = PDEMANDDATE
           AND ORG_CD = CHANABANKCODE
         GROUP BY ORG_CD;
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        VRESULT := SQLERRM;
    END;
    OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createHanaBank',
                                          VRESULT,
                                          PDEMANDDATE);
  EXCEPTION
    WHEN EALREADYEXISTSEXCEPTION THEN
      OP.PKG_FN_COMMON.SP_CREATEBATCHRESULT('pkg_fn_PackDemand.sp_createHanaBank',
                                            'Aleady Data Exists!!',
                                            PDEMANDDATE);
  END SP_CREATEHANABANK;

  PROCEDURE SP_REFLECTPACKSPECIAL(PDEMANDDATE IN OP.T_FN_PACK_DEMAND.DEMAND_DATE%TYPE DEFAULT null) IS
  
  BEGIN
    IF PDEMANDDATE IS NULL or PDEMANDDATE = '' THEN
      PDEMANDDATE := TO_CHAR(SYSDATE, 'YYYYMMDD');
    END IF;
  
    /* op.t_fn_pack_demand */
    DELETE OP.T_FN_PACK_DEMAND DMD
     WHERE DEMAND_DATE = PDEMANDDATE
       AND OPER_TYPE = '1'
       AND EXISTS (SELECT 1
              FROM OP.T_FN_PACK_SPECIAL SPC
             WHERE SPC.ENTRY_DATE BETWEEN
                   op.SF_GETPREACTDATE(PDEMANDDATE) AND
                   op.SF_GETBEFOREDATE(PDEMANDDATE)
               AND SPC.ORG_CD = DMD.ORG_CD
               AND SPC.DEPT_CD = DMD.DEPT_CD
               AND SPC.OFFICE_CD = DMD.OFFICE_CD);
  
    INSERT INTO OP.T_FN_PACK_DEMAND
      (DEMAND_DATE,
       ORG_CD,
       OPER_TYPE,
       DEPT_CD,
       OFFICE_CD,
       POST_TRANS_AMT,
       PRE_ADD_TRANS_AMT,
       PRE_COLLECT_AMT,
       DIFFER_AMT,
       PRE_RESPECT_AMT,
       BALANCE_AMT,
       CUR_RESPECT_AMT,
       DEMAND_AMT,
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PDEMANDDATE,
             ORG_CD,
             '1',
             DEPT_CD,
             OFFICE_CD,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             NVL(SUM(DECODE(FLAG, '1', DEMAND_AMT, -DEMAND_AMT)), 0),
             'INSERT',
             SYSDATE,
             'INSERT',
             SYSDATE
        FROM OP.T_FN_PACK_SPECIAL
       WHERE ENTRY_DATE BETWEEN
             op.SF_GETPREACTDATE(PDEMANDDATE) AND
             op.SF_GETBEFOREDATE(PDEMANDDATE)
       GROUP BY ORG_CD, DEPT_CD, OFFICE_CD;
  
    /* op.t_fn_pack_branch */
    DELETE OP.T_FN_PACK_BRANCH JJM
     WHERE DEMAND_DATE = PDEMANDDATE
       AND EXISTS (SELECT 1
              FROM OP.T_FN_PACK_SPECIAL SPC
             WHERE SPC.ENTRY_DATE BETWEEN
                   op.SF_GETPREACTDATE(PDEMANDDATE) AND
                   op.SF_GETBEFOREDATE(PDEMANDDATE)
               AND SPC.ORG_CD = JJM.ORG_CD);
  
    INSERT INTO OP.T_FN_PACK_BRANCH
      (DEMAND_DATE,
       ORG_CD,
       BRANCH_CD,
       POST_TRANS_AMT,
       PRE_ADD_TRANS_AMT,
       PRE_COLLECT_AMT,
       DIFFER_AMT,
       PRE_RESPECT_AMT,
       BALANCE_AMT,
       CUR_RESPECT_AMT,
       DEMAND_AMT,
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PDEMANDDATE,
             ORG_CD,
             '0000',
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             NVL(SUM(DECODE(FLAG, '1', DEMAND_AMT, -DEMAND_AMT)), 0),
             'INSERT',
             SYSDATE,
             'INSERT',
             SYSDATE
        FROM OP.T_FN_PACK_SPECIAL
       WHERE ENTRY_DATE BETWEEN
             op.SF_GETPREACTDATE(PDEMANDDATE) AND
             op.SF_GETBEFOREDATE(PDEMANDDATE)
       GROUP BY ORG_CD;
  
    /* op.t_fn_pack_ofcjjm */
    DELETE OP.T_FN_PACK_OFCJJM OFC
     WHERE DEMAND_DATE = PDEMANDDATE
       AND EXISTS (SELECT 1
              FROM OP.T_FN_PACK_SPECIAL SPC
             WHERE SPC.ENTRY_DATE BETWEEN
                   op.SF_GETPREACTDATE(PDEMANDDATE) AND
                   op.SF_GETBEFOREDATE(PDEMANDDATE)
               AND SPC.ORG_CD = OFC.ORG_CD
               AND SPC.DEPT_CD = OFC.DEPT_CD
               AND SPC.OFFICE_CD = OFC.OFFICE_CD);
  
    INSERT INTO OP.T_FN_PACK_OFCJJM
      (DEMAND_DATE,
       ORG_CD,
       BRANCH_CD,
       DEPT_CD,
       OFFICE_CD,
       POST_TRANS_AMT,
       PRE_ADD_TRANS_AMT,
       PRE_COLLECT_AMT,
       DIFFER_AMT,
       PRE_RESPECT_AMT,
       BALANCE_AMT,
       CUR_RESPECT_AMT,
       DEMAND_AMT,
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PDEMANDDATE,
             ORG_CD,
             '0000',
             DEPT_CD,
             OFFICE_CD,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             NVL(SUM(DECODE(FLAG, '1', DEMAND_AMT, -DEMAND_AMT)), 0),
             'INSERT',
             SYSDATE,
             'INSERT',
             SYSDATE
        FROM OP.T_FN_PACK_SPECIAL
       WHERE ENTRY_DATE BETWEEN
             op.SF_GETPREACTDATE(PDEMANDDATE) AND
             op.SF_GETBEFOREDATE(PDEMANDDATE)
       GROUP BY ORG_CD, DEPT_CD, OFFICE_CD;
  
    /* 대구수령자금 파출수납 등록 20090729 정희성 */
    DELETE OP.T_FN_CARRY
     WHERE CARRY_DATE = PDEMANDDATE
       AND CARRY_GROUP_CD = '04'
       AND CARRY_ORG_CD = '1420401';
  
    INSERT INTO OP.T_FN_CARRY
      (CARRY_DATE,
       CARRY_GROUP_CD,
       CARRY_ORG_CD,
       CASH_AMT,
       CHECK_AMT,
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE,
       INS_AMT,
       OUTS_AMT)
      (SELECT PDEMANDDATE CARRY_DATE,
              '04' CARRY_GROUP_CD,
              '1420401' CARRY_ORG_CD,
              AMT AMT,
              0 CHECK_AMT,
              'SYSTEM' INSERT_UID,
              SYSDATE INSERT_DATE,
              'SYSTEM' UPDATE_UID,
              SYSDATE UPDATE_DATE,
              0 INS_AMT,
              0 OUTS_AMT
         FROM (SELECT NVL(SUM(DEMAND_AMT), 0) AMT
                 FROM OP.T_FN_PACK_DEMAND
                WHERE DEMAND_DATE = PDEMANDDATE
                  AND ORG_CD = '031'));
  
    /* op.t_fn_pack_report */
    DELETE OP.T_FN_PACK_REPORT RPT
     WHERE DEMAND_DATE = PDEMANDDATE
       AND OPER_TYPE = '1'
       AND EXISTS (SELECT 1
              FROM OP.T_FN_PACK_SPECIAL SPC
             WHERE SPC.ENTRY_DATE BETWEEN
                   op.SF_GETPREACTDATE(PDEMANDDATE) AND
                   op.SF_GETBEFOREDATE(PDEMANDDATE)
               AND SPC.ORG_CD = RPT.ORG_CD
               AND SPC.DEPT_CD = RPT.DEPT_CD
               AND SPC.OFFICE_CD = RPT.OFFICE_CD);
  
    INSERT INTO OP.T_FN_PACK_REPORT
      (DEMAND_DATE,
       ORG_CD,
       BRANCH_CD,
       MAC_NO,
       OPER_TYPE,
       DEPT_CD,
       OFFICE_CD,
       CLOSE_DATE,
       DEMAND_AMT,
       INSERT_UID,
       INSERT_DATE,
       UPDATE_UID,
       UPDATE_DATE)
      SELECT PDEMANDDATE,
             ORG_CD,
             '0000',
             '000000000000',
             '1',
             DEPT_CD,
             OFFICE_CD,
             op.SF_GETPREACTDATE(PDEMANDDATE),
             NVL(SUM(DECODE(FLAG, '1', DEMAND_AMT, -DEMAND_AMT)), 0),
             'INSERT',
             SYSDATE,
             'INSERT',
             SYSDATE
        FROM OP.T_FN_PACK_SPECIAL
       WHERE ENTRY_DATE BETWEEN
             op.SF_GETPREACTDATE(PDEMANDDATE) AND
             op.SF_GETBEFOREDATE(PDEMANDDATE)
       GROUP BY ORG_CD, DEPT_CD, OFFICE_CD;
  
  END SP_REFLECTPACKSPECIAL;

END PKG_FN_PACKDEMAND;

CREATE OR REPLACE PACKAGE BODY OP.PKG_FN_WRATMS_DEMAND AS

    /* 경남은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_WRcreateAtmsOperFundsDemand (
        pDemandDate  IN OP.t_fn_close.close_date%TYPE DEFAULT null    ,
        pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    )
    IS

        vBeforeDate OP.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate OP.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate OP.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.T_FN_PACK_INVENT.close_date%TYPE    := OP.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN

------------------------------------------------------------------------------------------

            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.T_FN_ATMS_OPERFUNDS_DEMAND    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
                 and   org_cd ='020';

                 DELETE OP.T_FN_ATMS_DEMAND_MAC    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE demand_date = pDemandDate
                 and   org_cd ='T39';

            ELSE
                RAISE eAlreadyExistsException;
            END IF;


        insert into  OP.T_FN_ATMS_OPERFUNDS_DEMAND
     (ORG_CD, branch_CD, REQ_DATE, OPERFUNDS_SUM, REQUIR_START_DATE, REQUIR_END_DATE, REQUIR_TERM, OPER_FUNDS,
      NEXT_CASH_AMT, BEFORE_ADD_AMT, BEFORE_COLLECT_AMT, OVER_AMT, UNSET_BEFORE_AMT, REQUIR_AMT, UNSET_AMT,
      STOCK_AMT, OFFICE_NM, ORG_SEND_YN, UPDATE_DATE, UPDATE_UID, PREPRE_STOCK_AMT, PRE_OPER_AMT, PRE_DIFFER_AMT,
      PRE_OUT_AMT, PRE_IN_AMT, CLOSE_DATE,
      REMAIN_AMT,BEFORE_CASH_AMT,PRE_SEND_AMT,PRE_NOT_SEND_AMT1,OPER_FUNDS_AFTER_AMT,OUT_RATE,COLLECT_RATE,SAT_CLOSE
      )
        select '020' org_cd, '20999' branch_Cd, a.demand_Date, ''
              ,OP.sf_getPostActDate(a.demand_Date) startdate
              ,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(a.demand_Date)) enddate
              ,to_date(OP.sf_getBeforePostActDate(OP.sf_getPostActDate(a.demand_Date)),'YYYYMMDD')
              -to_date(OP.sf_getPostActDate(a.demand_Date),'YYYYMMDD')+1 useday
              ,(a.postamt+a.addamt), a.postamt, a.addamt, a.colamt, a.difamt, a.preamt, a.demandamt, a.curamt
              ,b.totamt, '', '0', sysdate, 'SYSTEM', b.pretotamt, b.operamt, b.difamt, b.outamt, b.inamt,  b.close_date
              ,(b.closeamt-a.addamt-a.preamt+a.difamt) remainamt         -- 현송후잔액
              ,(b.closeamt-b.inamt+b.outamt)                             -- 직전현송액
              ,b.ordsend                                                 -- 전일현송액
              ,0                                                         -- 미장전
              ,(b.totamt+a.demandamt)                                    -- 수령후보유액
              ,round((b.outamt/(b.closeamt-b.inamt+b.outamt))*100,1)     -- 지급율
              ,round(((b.closeamt+a.difamt)/(b.closeamt-b.inamt+b.outamt))*100,1)   -- 회수율
              ,nvl(c.amt,0)                                              -- 토요마감분
        from
            (select demand_Date, OP.sf_getPreActDate(demand_Date) close_date, orG_cd
                 , sum(POST_TRANS_AMT) postamt, sum(PRE_ADD_TRANS_AMT) addamt, sum(PRE_COLLECT_AMT) colamt, sum(DIFFER_AMT) difamt
                  ,sum(PRE_RESPECT_AMT) preamt, sum(CUR_RESPECT_AMT) curamt, sum(DEMAND_AMT) demandamt
            from op.t_fn_pack_Demand d
            where demand_Date=pDemandDate
            and org_Cd='020'
            group by demand_date, orG_cd) A,

            (select close_date, org_cd, sum(MAC_AMT+SAFE_AMT-differ_Amt) totamt, sum(PRE_MAC_AMT+PRE_SAFE_AMT) pretotamt
                 , sum(OPER_AMT) operamt, sum(OUT_AMT) outamt, sum(IN_AMT) inamt, sum(DIFFER_AMT) difamt
                 , sum(close_amt) closeamt, sum(ord_send_amt) ordsend
            From op.T_FN_PACK_INVENT
            where close_date=OP.sf_getPreActDate(pDemandDate)
            and orG_cd='020'
            group by close_date, org_Cd) B,

            (select nvl(sum(out_amt),0)-nvl(sum(in_amt),0) amt
            from OP.t_fn_close
            where close_date>=OP.sf_getPreActDate(pDemandDate)
            and close_date<=OP.sf_getBeforeDate(pDemandDate)
            and week_day='7'
            and org_Cd='020') C;


         -- 경남은행
         insert into  OP.T_FN_ATMS_DEMAND_MAC
             (DEMAND_DATE,
              ORG_CD,
              branch_CD,
              MAC_NO,
              POST_TRANS_AMT,
              PRE_ADD_TRANS_AMT,
              PRE_COLLECT_AMT,
              DIFFER_AMT,
              PRE_RESPECT_AMT,
              CUR_RESPECT_AMT,
              DEMAND_AMT,
              INSERT_UID,
              INSERT_DATE,
              UPDATE_UID,
              UPDATE_DATE,
              ORG_SEND_YN,
              TOTAL_STOCK_AMT,
              PRE_ADD_TRANS_CNT,
              REQUIR_START_DATE, REQUIR_END_DATE, REQUIR_TERM, pre_out_amt, pre_in_amt
              )

              select a.demand_date,
                     'T39',
                     a.branch_cd,
                     a.mac_no,
                     a.post_sendplan_amt, --익영업일 현송액
                     a.plus_send_amt, --전영업일추가현송액
                     a.close_amt, --전일회수마감잔액
                     a.differ_amt, --과여금발생액
                     0, --전잔
                     0, --잔액
                     post_sendplan_amt + plus_send_amt - close_amt - differ_amt, --당일청구금액
                     'system',
                     sysdate,
                     'system',
                     sysdate,
                     '0',
                     0,--total_stock_Amt
                     nvl(b.add_cnt,0)
                    ,OP.sf_getPostActDate(a.demand_Date) startdate
                    ,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(a.demand_Date)) enddate
--                    ,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(a.demand_Date))-OP.sf_getPostActDate(a.demand_Date)+1 useday
                    ,to_date(OP.sf_getBeforePostActDate(OP.sf_getPostActDate(a.demand_Date)),'yyyymmdd')-
                     to_date(OP.sf_getPostActDate(a.demand_Date),'yyyymmdd')+1 useday
                    ,a.out_amt, a.in_amt
              from op.t_fn_pack_report a,
              (
                   select
                          --send_date,
                          org_cd,
                          branch_cd,
                          mac_no,
                         count(mac_no) add_cnt
                    from op.T_FN_SEND
                    where send_status ='2'
                    and   send_type ='2'
                    and   send_date between OP.sf_getPreActDate(pDemandDate) and  OP.sf_getBeforeDate(pDemandDate)
                    and   org_cd ='039'
                    and  send_amt <> 0
                  group by --send_date,
                          org_cd,
                          branch_cd,
                          mac_no
               ) b
              where a.demand_date =pDemandDate
              and   a.org_cd ='039'
              and   post_sendplan_amt + plus_send_amt + close_amt +
                    (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) <> '0'
              and   a.org_cd = b.org_cd (+)
              and   a.branch_cd= b.branch_cd (+)
              and   a.mac_no= b.mac_no  (+)

              union all

         select     --m.open_date,
                    --m.close_date,
                    r.demand_date,
                    'T39',--r.org_cd,
                    r.branch_cd,
                    r.mac_no,
                    r.post_sendplan_amt, --익영업일 현송액
                    r.plus_send_amt, --전영업일추가현송액
                    r.close_amt, --전일회수마감잔액
                    r.differ_amt, --과여금발생액
                     0, --전잔
                     0, --잔액
                    r.post_sendplan_amt + r.plus_send_amt - r.close_amt - r.differ_amt, --당일청구금액
                     'system',
                     sysdate,
                     'system',
                     sysdate,
                     '0',
                     0,--total_stock_Amt
                     nvl(b.add_cnt,0)
                    ,OP.sf_getPostActDate(r.demand_Date) startdate
                    ,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(r.demand_Date)) enddate
                    --,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(r.demand_Date))-OP.sf_getPostActDate(r.demand_Date)+1 useday
                    ,to_date(OP.sf_getBeforePostActDate(OP.sf_getPostActDate(r.demand_Date)),'yyyymmdd')-
                     to_date(OP.sf_getPostActDate(r.demand_Date),'yyyymmdd')+1 useday
                    ,r.out_amt, r.in_amt
              from op.t_fn_pack_report r,
                   op.T_CM_MAC m,
                    (
                   select
                          --send_date,
                          org_cd,
                          branch_cd,
                          mac_no,
                         count(mac_no) add_cnt
                    from op.T_FN_SEND
                    where send_status ='2'
                    and   send_type ='2'
                    and   send_date between OP.sf_getPreActDate(pDemandDate) and  OP.sf_getBeforeDate(pDemandDate)
                    and   org_cd ='039'
                    and  send_amt <> 0
                  group by --send_date,
                          org_cd,
                          branch_cd,
                          mac_no
                  ) b
              where r.demand_date =pDemandDate
              and   r.org_cd ='039'
              and   r.org_cd = m.org_cd
              and   r.branch_cd = m.branch_cd
              and   r.mac_no = m.mac_no
              and   post_sendplan_amt + plus_send_amt + close_amt +
                    (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) = '0'
              and ( m.close_date is null OR m.close_date = '' OR m.close_date >= pDemandDate )
              and   r.org_cd = b.org_cd (+)
              and   r.branch_cd= b.branch_cd (+)
              and   r.mac_no= b.mac_no  (+)

              union all

              select master_data.demand_date,
                     'T39',--master_data.org_cd,
                     '999',
                     '99',
                     0,
                     0,
                     0,
                     0,
                     master_data.pre_respect_amt, --전잔
                     master_data.cur_respect_amt, --말잔
                     master_data.demand_amt - detail_data.total_demand,
                     'system',
                     sysdate,
                     'system',
                     sysdate,
                     '0',
                     total_stock.total_stock_amt,
                     0
                    ,OP.sf_getPostActDate(detail_data.demand_Date) startdate
                    ,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(detail_data.demand_Date)) enddate
                    --,OP.sf_getBeforePostActDate(OP.sf_getPostActDate(detail_data.demand_Date))-OP.sf_getPostActDate(detail_data.demand_Date)+1 useday
                    ,to_date(OP.sf_getBeforePostActDate(OP.sf_getPostActDate(detail_data.demand_Date)),'yyyymmdd')-
                     to_date(OP.sf_getPostActDate(detail_data.demand_Date),'yyyymmdd')+1 useday
                    ,0, 0
              from
                (
                select pd.org_cd,
                       pd.demand_date,
                       sum(pd.pre_respect_amt) pre_respect_amt, --전잔
                       sum(pd.cur_respect_amt) cur_respect_amt, --말잔
                       sum(pd.demand_amt) demand_amt
                from op.t_fn_pack_Demand pd
                where pd.org_cd ='039'
                and   demand_date =pDemandDate
                group by pd.org_cd, pd.demand_date
                ) master_data,
                (
                select org_cd,
                       demand_date,
                       sum(
                            post_sendplan_amt + plus_send_amt - close_amt - differ_amt --당일청구금액
                          ) total_demand
                from op.t_fn_pack_report
                where demand_date =pDemandDate
                and   org_cd ='039'
                group by org_cd,demand_date
                ) detail_data,
                (
                select org_cd,
                      close_date,
                      sum(safe_amt+mac_amt) total_stock_amt
                from op.T_FN_PACK_INVENT
                where org_cd ='039'
                and   close_date =OP.sf_getPreActDate(pDemandDate)
                group by org_cd,
                      close_date
                ) total_stock

               where master_data.org_cd = detail_data.org_cd
               and   master_data.demand_date = detail_data.demand_date
               and   master_data.org_cd = total_stock.org_cd;

      commit;

    BEGIN
        op.sp_FN_WR_VAN_DEMAND( pDemandDate );
    END;

    COMMIT;


        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_Demand.sp_WRcreateAtmsOperFundsDemand',
                                           vResult,
                                           pDemandDate);

    END sp_WRcreateAtmsOperFundsDemand;


/* 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_WR_createAtmsReport (
        pDemandDate  IN OP.t_fn_close.close_date%TYPE DEFAULT null,
        pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    )
    IS

        vBeforeDate OP.t_fn_close.close_date%TYPE   := OP.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate OP.t_fn_close.close_date%TYPE   := OP.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.T_FN_PACK_INVENT.close_date%TYPE    := OP.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN

----------------------------------------------------------------------------------------------------------------------------------
        -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_REPORT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd ='020';

                DELETE op.T_FN_ATMS_REPORT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd ='T39';

            ELSE
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO op.T_FN_ATMS_REPORT (
           notend_date,
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
                  ,'020' org_cd --, main.org_cd org_cd--'97' org_cd
                  ,main.branch_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,branch_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'2','1','2') deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.T_FN_NOTEND
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '020'
                and owner_org_cd <> '096') main,
                op.T_CM_MEMBER mem,
                op.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.branch_cd, main.mac_no;



        INSERT INTO op.T_FN_ATMS_REPORT (
                   notend_date,
                   org_cd,
                   branch_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
                  ,'T39' org_cd --, main.org_cd org_cd--'97' org_cd
                  ,main.branch_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,branch_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'2','1','2') deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.T_FN_NOTEND
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '039'
                and owner_org_cd <> '096') main,
                op.T_CM_MEMBER mem,
                op.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.branch_cd, main.mac_no;

           commit;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_Demand.sp_createAtmsReport',
                                           vResult,
                                           pDemandDate);

    END sp_WR_createAtmsReport;


/* 회수자금 결과통보 데이터 생성 */
    PROCEDURE sp_WR_createAtmsCollect (
        pDemandDate  IN OP.t_fn_close.close_date%TYPE DEFAULT null,
        pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    )
    IS

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_COLLECT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('020');

                 DELETE op.T_FN_ATMS_COLLECT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('T39');
            ELSE
                RAISE eAlreadyExistsException;
            END IF;


        insert into  op.T_FN_ATMS_COLLECT
             (ORG_CD,branch_CD,SITE_CD,MAC_NO,CLOSE_DATE,BEFORE_CASH_AMT,ADD_CASH_AMT,ADD_CASH_DATE
             ,COLLECT_AMT,UNATTENDED_AMT,UNATTENDED_CNT,REPORT_YN,OFFICE_NM
             ,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,OUT_AMT,IN_AMT,CLOSE_AMT
              )
        select '020' org_cd --decode(a.org_Cd,'020','020','T39') org_cd
              ,a.branch_Cd, a.site_Cd, a.mac_no, a.close_Date
              ,a.pre_amt, 0, '', a.close_amt+nvl(b.deal_amt,0) collect_amt
              , 0, 0, decode(nvl(b.deal_amt,0),0,0,1) re, a.off
              ,'0',SYSDATE, 'SYSTEM', a.out_Amt, a.in_amt, a.close_Amt
        from
            (select c.org_Cd
                  ,c.branch_Cd, c.mac_no, c.close_date
                  ,c.pre_amt, c.out_amt, c.in_amt, c.close_amt, c.site_cd
                  ,substr(off.officE_nm,1,2) off
            From OP.t_fn_close c
                ,op.t_cm_office off
            where c.close_Date=OP.sf_getPreActDate(pDemandDate)
            and c.org_cd in ('020')
            and c.dept_Cd = off.dept_cd
            and c.office_cd = off.office_cd) A,
            /*
            (select * From op.T_FN_NOTEND
            where notend_Date=OP.sf_getPreActDate(pDemandDate)
            and org_cd in ('020')
            and owner_org_cd <> '096') B
            */

            -- 2012/03/13 황도영 수정
            (select
                    notend_date,
                    org_cd,
                    branch_cd,
                    mac_no,
                    sum(deal_amt) deal_amt
            From op.T_FN_NOTEND
            where notend_Date=OP.sf_getPreActDate('20120313')
            and org_cd in ('020')
            and owner_org_cd <> '096'
            group by
                  notend_date,org_cd,branch_cd ,mac_no) B

            where a.org_Cd = b.org_cd(+)
            and a.branch_cd = b.branch_cd(+)
            and a.mac_no = b.mac_no(+)
            and a.close_date = b.notend_Date(+)
        order by org_cd, branch_cd, mac_no;


        insert into  op.T_FN_ATMS_COLLECT
             (ORG_CD,branch_CD,SITE_CD,MAC_NO,CLOSE_DATE,BEFORE_CASH_AMT,ADD_CASH_AMT,ADD_CASH_DATE
             ,COLLECT_AMT,UNATTENDED_AMT,UNATTENDED_CNT,REPORT_YN,OFFICE_NM
             ,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,OUT_AMT,IN_AMT,CLOSE_AMT
              )
        select 'T39' org_cd --decode(a.org_Cd,'020','020','T39') org_cd
              ,a.branch_Cd, a.site_Cd, a.mac_no, a.close_Date
              ,a.pre_amt, 0, '', a.close_amt+nvl(b.deal_amt,0) collect_amt
              , 0, 0, decode(nvl(b.deal_amt,0),0,0,1) re, a.off
              ,'0',SYSDATE, 'SYSTEM', a.out_Amt, a.in_amt, a.close_Amt
        from
            (select c.org_Cd
                  ,c.branch_Cd, c.mac_no, c.close_date
                  ,c.pre_amt, c.out_amt, c.in_amt, c.close_amt, c.site_cd
                  ,substr(off.officE_nm,1,2) off
            From OP.t_fn_close c
                ,op.t_cm_office off
            where c.close_Date=OP.sf_getPreActDate(pDemandDate)
            and c.org_cd in ('039')
            and c.dept_Cd = off.dept_cd
            and c.office_cd = off.office_cd) A,

            (select * From op.T_FN_NOTEND
            where notend_Date=OP.sf_getPreActDate(pDemandDate)
            and org_cd in ('039')
            and owner_org_cd <> '096') B
            where a.org_Cd = b.org_cd(+)
            and a.branch_cd = b.branch_cd(+)
            and a.mac_no = b.mac_no(+)
            and a.close_date = b.notend_Date(+)
        order by org_cd, branch_cd, mac_no;

            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_Demand.sp_createAtmsCollect',
                                           vResult,
                                           pDemandDate);

    END sp_WR_createAtmsCollect;


/* 현송계획서 통보 데이터 생성 */
    PROCEDURE sp_WR_createAtmsCashPlan (
        pDemandDate  IN OP.t_fn_close.close_date%TYPE DEFAULT null,
        pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    )
    IS

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_CASH_PLAN
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('020');

                DELETE op.T_FN_ATMS_CASH_PLAN
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('T39');

            ELSE
                RAISE eAlreadyExistsException;
            END IF;


        insert into  op.T_FN_ATMS_CASH_PLAN
             (ORG_CD,branch_CD,SITE_CD,MAC_NO,Cash_DATE,CASH_AMT,CONFIRM_CASH_AMT,OFFICE_NM
             ,ORG_SEND_CONFIRM_YN, UPDATE_DATE,UPDATE_UID
              )
            select '020'org_cd --decode(s.org_Cd,'020','T20','T39') org_cd
                  ,s.branch_Cd, s.site_Cd, s.maC_no, s.send_Date
                  ,decode(LAST_SEND_TYPE,1,PLAN_SEND_AMT,CHANGE_SEND_AMT) send_amt
                  ,decode(LAST_SEND_TYPE,1,PLAN_SEND_AMT,CHANGE_SEND_AMT) sendamt
                  ,substr(off.office_nm,1,2) off
                  ,'0', SYSDATE, 'SYSTEM'
            From op.T_FN_SENDplan s
                ,op.t_cm_office off
            where send_date=OP.sf_getPostActDate (pDemandDate)
            and org_Cd in ('020')
            and confirm_yn='1'
            and CANCEL_TYPE='0'
            and s.dept_Cd = off.dept_Cd
            and s.office_cd = off.office_cd;

            insert into  op.T_FN_ATMS_CASH_PLAN
             (ORG_CD,branch_CD,SITE_CD,MAC_NO,Cash_DATE,CASH_AMT,CONFIRM_CASH_AMT,OFFICE_NM
             ,ORG_SEND_CONFIRM_YN, UPDATE_DATE,UPDATE_UID
              )
            select 'T39'org_cd --decode(s.org_Cd,'020','T20','T39') org_cd
                  ,s.branch_Cd, s.site_Cd, s.maC_no, s.send_Date
                  ,decode(LAST_SEND_TYPE,1,PLAN_SEND_AMT,CHANGE_SEND_AMT) send_amt
                  ,decode(LAST_SEND_TYPE,1,PLAN_SEND_AMT,CHANGE_SEND_AMT) sendamt
                  ,substr(off.office_nm,1,2) off
                  ,'0', SYSDATE, 'SYSTEM'
            From op.T_FN_SENDplan s
                ,op.t_cm_office off
            where send_date=OP.sf_getPostActDate (pDemandDate)
            and org_Cd in ('039')
            and confirm_yn='1'
            and CANCEL_TYPE='0'
            and s.dept_Cd = off.dept_Cd
            and s.office_cd = off.office_cd;

            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_Demand.sp_createAtmsCashPlan',
                                           vResult,
                                           pDemandDate);

    END sp_WR_createAtmsCashPlan;


/* 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_WR_createAtmsAddCashReport (
        pDemandDate  IN OP.t_fn_close.close_date%TYPE DEFAULT null ,
        pIsDeleting  IN VARCHAR2                            DEFAULT '1'
    )
    IS

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과
    before_seq  VARCHAR2(50) :='';
    gubun_seq  VARCHAR2(50) :='';

    temp_seq  number :=1;

    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_ADD_CASH_REPORT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('020');

                 DELETE op.T_FN_ATMS_ADD_CASH_REPORT
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
                 and org_cd in ('T39');
            ELSE
                RAISE eAlreadyExistsException;
            END IF;



              FOR j IN
                (
                      select '020' org_cd, --decode(a.org_Cd,'020','T20','T39') org_cd,
                             a.branch_Cd,
                             a.site_cd,
                             a.mac_no,
                             a.send_date,
                             OP.sf_getPostActDate(a.send_date) dat,
                             a.send_Amt, substr(off.office_nm,1,2) off, '0' ORG_SEND_YN,
                             SYSDATE UPDATE_DATE,
                             'SYSTEM' UPDATE_UID,
                             case when a.send_Date||a.send_time < b.close_date||b.close_time then '0' else '1' end ty
                      from
                      (select * From op.T_FN_SEND
                      where send_date>=OP.sf_getPreActDate(pDemandDate)
                      and send_date<=OP.sf_getBeforeDate(pDemandDate)
                      and org_Cd in ('020')
                      and send_type='2'
                      and send_status='2') A,

                      (select * From OP.t_fn_close
                      where close_date>=OP.sf_getPreActDate(pDemandDate)
                      and close_date<=OP.sf_getBeforeDate(pDemandDate)
                      and org_Cd in ('020')) B,
                      op.t_cm_office off
                      where a.org_cd  = b.orG_cd(+)
                      and a.branch_Cd  = b.branch_cd(+)
                      and a.maC_no    = b.maC_no(+)
                      and a.dept_Cd   = off.dept_Cd(+)
                      and a.office_cd = off.office_cd(+)
                      order by a.branch_cd,
                               a.mac_no

              )
                LOOP


             if before_seq  = j.org_cd||j.branch_cd||j.mac_no then

               temp_seq := temp_seq +1;

                insert into  op.T_FN_ATMS_ADD_CASH_REPORT
                (ORG_CD,branch_CD,SITE_CD,MAC_NO,ADD_DATE,SERIAL_NO,DEMAND_DATE,ADD_CASH_AMT
                ,OFFICE_NM,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,CLOSE_YN
                )

                values
                (
                 j.org_cd,
                 j.branch_Cd,
                 j.site_cd,
                 j.mac_no,
                 j.send_date,
                 lpad(temp_seq,3,'0'),
                 j.dat,
                 j.send_Amt, j.off,
                 j.ORG_SEND_YN,
                 j.UPDATE_DATE,
                 j.UPDATE_UID,
                 j.ty
                ) ;

             else



               insert into  op.T_FN_ATMS_ADD_CASH_REPORT
               (ORG_CD,branch_CD,SITE_CD,MAC_NO,ADD_DATE,SERIAL_NO,DEMAND_DATE,ADD_CASH_AMT
               ,OFFICE_NM,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,CLOSE_YN
                )

                values
                (
                 j.org_cd,
                 j.branch_Cd,
                 j.site_cd,
                 j.mac_no,
                 j.send_date,
                 '001',
                 j.dat,
                 j.send_Amt, j.off,
                 j.ORG_SEND_YN,
                 j.UPDATE_DATE,
                 j.UPDATE_UID,
                 j.ty
                ) ;

                   temp_seq := 1;

             end if;

            before_seq  := j.org_cd||j.branch_cd||j.mac_no;

           end loop;

    before_seq  :='';
    temp_seq    :=1;

            FOR k IN
                (
                      select 'T39' org_cd, --decode(a.org_Cd,'020','T20','T39') org_cd,
                             a.branch_Cd,
                             a.site_cd,
                             a.mac_no,
                             a.send_date,
                             OP.sf_getPostActDate(a.send_date) dat,
                             a.send_Amt, substr(off.office_nm,1,2) off, '0' ORG_SEND_YN,
                             SYSDATE UPDATE_DATE,
                             'SYSTEM' UPDATE_UID,
                             case when a.send_Date||a.send_time < b.close_date||b.close_time then '0' else '1' end ty
                      from
                      (select * From op.T_FN_SEND
                      where send_date>=OP.sf_getPreActDate(pDemandDate)
                      and send_date<=OP.sf_getBeforeDate(pDemandDate)
                      and org_Cd in ('039')
                      and send_type='2'
                      and send_status='2') A,

                      (select * From OP.t_fn_close
                      where close_date>=OP.sf_getPreActDate(pDemandDate)
                      and close_date<=OP.sf_getBeforeDate(pDemandDate)
                      and org_Cd in ('039')) B,
                      op.t_cm_office off
                      where a.org_cd  = b.orG_cd(+)
                      and a.branch_Cd  = b.branch_cd(+)
                      and a.maC_no    = b.maC_no(+)
                      and a.dept_Cd   = off.dept_Cd(+)
                      and a.office_cd = off.office_cd(+)
                      order by a.branch_cd,
                               a.mac_no

              )
                LOOP


             if before_seq  = k.org_cd||k.branch_cd||k.mac_no then

               temp_seq := temp_seq +1;

                insert into  op.T_FN_ATMS_ADD_CASH_REPORT
                (ORG_CD,branch_CD,SITE_CD,MAC_NO,ADD_DATE,SERIAL_NO,DEMAND_DATE,ADD_CASH_AMT
                ,OFFICE_NM,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,CLOSE_YN
                )

                values
                (
                 k.org_cd,
                 k.branch_Cd,
                 k.site_cd,
                 k.mac_no,
                 k.send_date,
                 lpad(temp_seq,3,'0'),
                 k.dat,
                 k.send_Amt, k.off,
                 k.ORG_SEND_YN,
                 k.UPDATE_DATE,
                 k.UPDATE_UID,
                 k.ty
                ) ;

             else



               insert into  op.T_FN_ATMS_ADD_CASH_REPORT
               (ORG_CD,branch_CD,SITE_CD,MAC_NO,ADD_DATE,SERIAL_NO,DEMAND_DATE,ADD_CASH_AMT
               ,OFFICE_NM,ORG_SEND_YN,UPDATE_DATE,UPDATE_UID,CLOSE_YN
                )

                values
                (
                 k.org_cd,
                 k.branch_Cd,
                 k.site_cd,
                 k.mac_no,
                 k.send_date,
                 '001',
                 k.dat,
                 k.send_Amt, k.off,
                 k.ORG_SEND_YN,
                 k.UPDATE_DATE,
                 k.UPDATE_UID,
                 k.ty
                ) ;

                   temp_seq := 1;

             end if;

            before_seq  := k.org_cd||k.branch_cd||k.mac_no;

           end loop;

            COMMIT;




        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        OP.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_Demand.sp_createAtmsAddCashReport',
                                           vResult,
                                           pDemandDate);

    END sp_WR_createAtmsAddCashReport;

END pkg_fn_WRAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_BsAtms_Demand AS


	/* 부산은행 추가현송 보고서 데이터 생성 */
      PROCEDURE sp_bs_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT NULL  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
      IF pDemandDate is null then
        pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
      end if ;

		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
         and org_cd ='032';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
/*
			INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time)
			select send.org_cd org_cd --'97' org_cd --
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '03'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd(+)
			and send.office_cd = off.office_cd(+);
	
  INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   add_10000_amt,                      
				   add_50000_amt,           
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time,
           close_yn,
           send_date
           )

--select * from OP.t_fn_atms_add_cash_report			
      
      select send.org_cd org_cd --'97' org_cd --
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt 
            ,sd.cash_10000_amt
            ,sd.cash_50000_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
			from op.T_FN_SEND send
          ,op.T_FN_SEND_detail sd
			    ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='011'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '011'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+)
      and send.send_date = sd.send_date
      and send.org_cd = sd.org_cd
      and send.BRANCH_cd = sd.BRANCH_cd
      and send.mac_no = sd.mac_no
      and send.insert_time = sd.insert_time
      and send.send_type = sd.send_type;		

*/


    INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
                  add_time,
                  close_yn,
                  send_date
  )

--select * from OP.t_fn_atms_add_cash_report	
      
      select     send.org_cd org_cd            
                  --'T32' org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
			from op.T_FN_SEND send
			    ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='032'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '032'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+);
      		
			COMMIT;
			
		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_bsAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_bs_createAtmsAddCashReport;
	
	/* 부산은행 현송계획서 데이터 생성 */            
                --20080908 아침에 풀고 20080910 아침에 막기~

   PROCEDURE sp_bs_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    is

	  vPostPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과
   	eAlreadyExistsException  EXCEPTION;
        
    BEGIN
		if pDemandDate is null then
			pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		end if;
		
		BEGIN
    
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostPostActDate --익일
         and   org_cd ='032';
			
            -- 부산은행 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
                  org_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
      /*     
			select sendPlan.org_cd org_cd --'97' org_cd
			      ,sendPlan.BRANCH_cd
			      ,sendPlan.site_cd
			      ,sendPlan.mac_no
			      ,sendPlan.send_date
			      ,0
			      ,decode(sendplan.last_send_type
	  		            , '1', sendplan.plan_send_amt					
		   		          , '2', sendplan.change_send_amt)	SendAmt	
			      ,substr(off.office_nm,0,2) office_nm
			      ,'2' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
			where sendPlan.send_date   = vPostPostActDate
			and   sendPlan.org_cd      = '011'
	       AND   sendPlan.confirm_yn  = '1'
			AND   sendPlan.cancel_type = '0' 
            and   sendPlan.dept_cd = off.dept_cd
			and   sendPlan.office_cd = off.office_cd;
		*/
    	
     select distinct 
             --'T32' org_Cd
             send.org_cd org_cd --'97' org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no mac_no
			      ,send.send_date
			      ,send.send_amt SendAmt
			      ,send.send_amt - sd.cw54_amt	send10000Amt	
			      ,sd.cw54_amt	send50000Amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn --부산만
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
           , op.T_FN_SEND_detail sd
           ,OP.t_cm_office off 
			where send.send_date   = vPostPostActDate
			and   send.org_cd      = '032'
	    AND   send.send_type = '1'
			--AND   sendPlan.cancel_type = '0' 
      and   send.dept_cd = off.dept_cd
			and   send.office_cd = off.office_cd
      and send.send_date = sd.send_date
      and send.org_cd = sd.org_cd
      and send.BRANCH_cd = sd.BRANCH_cd
      and send.mac_no = sd.mac_no
      and send.insert_time = sd.insert_time
      and send.send_type = sd.send_type;
      
			COMMIT;

		EXCEPTION
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_bsAtms_Demand.sp_bs_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_bs_createAtmsCashPlan;

	
	/* 부산은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_bscreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
		if pDemandDate is null then
			pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd ='032'; 
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

		
      
-----------------------------------------------------------------------------------------
INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )

select          --    'T32'  org_Cd
             main.org_cd org_cd --'97' org_cd
			      ,'000000' BRANCH_cd
			      ,main.demand_date
            ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,sum(main.oper_found)
			      ,sum(main.post_trans_amt)
			      ,sum(main.pre_add_trans_amt)
			      ,sum(main.pre_collect_amt)
			      ,sum(main.differ_amt)
			      ,sum(main.unset_before_amt)
			      ,sum(main.demand_amt)
			      ,sum(main.unset_amt)
      			,sum(TOTAL_BRANCH.STOCK_AMT)   STOCK_AMT
			      ,substr(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,sysdate update_date
					  ,'SYSTEM' update_uid
            ,sum(TOTAL_BRANCH_BEFORE.PRETOTALAMT) 
            ,sum(TOTAL_BRANCH.OPERAMT)  pre_oper_amt
            ,sum(TOTAL_BRANCH_BEFORE.DIFFERAMT) pre_differ_amt  
            ,sum(TOTAL_BRANCH.OUTAMT) pre_out_amt
            ,sum(TOTAL_BRANCH.INAMT)  pre_in_amt

			from
			       (select org_cd
					      ,demand_date
					     ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      
					from op.t_fn_pack_demand
					where demand_date = pDemandDate
					and org_cd = '032'
					group by demand_date
					        ,org_cd) main,
		 (
          select 
             org_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='032'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd                    
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='032'
           and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd
          ) total_BRANCH_before         
         
	  where main.org_cd   = total_BRANCH.org_cd
      and main.org_cd   = total_BRANCH_before.org_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      and TOTAL_BRANCH.STOCK_AMT <> 0	  	
      
      
group by    main.org_cd
			      ,main.demand_date
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,substr(main.office_nm,0,2)
			      ,main.orgSendYn;


-----------------------------------------------------------------------------------------
/*
INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )

select      main.org_cd org_cd --'97' org_cd
			      ,'000000' BRANCH_cd
			      ,main.demand_date
            ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,sum(main.oper_found)
			      ,sum(main.post_trans_amt)
			      ,sum(main.pre_add_trans_amt)
			      ,sum(main.pre_collect_amt)
			      ,sum(main.differ_amt)
			      ,sum(main.unset_before_amt)
			      ,sum(main.demand_amt)
			      ,sum(main.unset_amt)
      			,sum(TOTAL_BRANCH.STOCK_AMT)   STOCK_AMT
			      ,substr(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,sysdate update_date
					  ,'SYSTEM' update_uid
            ,sum(TOTAL_BRANCH_BEFORE.PRETOTALAMT) 
            ,sum(TOTAL_BRANCH.OPERAMT)  pre_oper_amt
            ,sum(TOTAL_BRANCH_BEFORE.DIFFERAMT) pre_differ_amt  
            ,sum(TOTAL_BRANCH.OUTAMT) pre_out_amt
            ,sum(TOTAL_BRANCH.INAMT)  pre_in_amt

			from
			       (select org_cd
					      ,BRANCH_cd
					      ,demand_date
					     ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      
					from op.t_fn_pack_BRANCH
					where demand_date = pDemandDate
					and org_cd = '011'
					group by demand_date
					        ,org_cd
					        ,BRANCH_cd) main,
		 (
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     BRANCH_cd
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
           and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
	  where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
      and TOTAL_BRANCH.STOCK_AMT <> 0	  	
      
      
group by    main.org_cd
			      ,main.demand_date
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,substr(main.office_nm,0,2)
			      ,main.orgSendYn;

*/


/*
select main.org_cd org_cd --'97' org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
      			,TOTAL_BRANCH.STOCK_AMT   STOCK_AMT
			      ,substr(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
            ,TOTAL_BRANCH_BEFORE.PRETOTALAMT 
            ,TOTAL_BRANCH.OPERAMT  pre_oper_amt
            ,TOTAL_BRANCH_BEFORE.DIFFERAMT pre_differ_amt  
            ,TOTAL_BRANCH.OUTAMT pre_out_amt
            ,TOTAL_BRANCH.INAMT  pre_in_amt

			from
			       (select org_cd
					      ,BRANCH_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from op.t_fn_pack_BRANCH
					where demand_date = pDemandDate
					and org_cd = '011'
					group by demand_date
					        ,org_cd
					        ,BRANCH_cd) main,
		 (
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     BRANCH_cd
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
	  where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
      and TOTAL_BRANCH.STOCK_AMT <> 0	  	;
*/
      

------------------------------------------------------------------------------------------
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_bsAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_bscreateAtmsOperFundsDemand;
	
END pkg_fn_BsAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_BsAtms_DemandManager AS

    PROCEDURE sp_BsAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE 	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		

		/* 기업은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_BsAtms_Demand.sp_bs_createAtmsAddCashReport(pDemandDate);
        END IF;

        /*기업은행 현송계획서 데이터 생성 */
  --20080908 아침에 풀고 20080910 아침에 막기~

        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_BsAtms_Demand.sp_bs_createAtmsCashPlan(pDemandDate);
        END IF;

        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_BsAtms_Demand.sp_bscreateAtmsOperFundsDemand(pDemandDate);
        END IF;
		
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_BsAtms_DemandManager.sp_BsAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_BsAtms_DemandManager.sp_BsAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_BsAtms_DemandManager.sp_BsAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_BsAtms_batchProcess;

END pkg_fn_BSAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_Calendar AS

	/* 카렌다 생성 */
	PROCEDURE sp_createCalendar (
		pYear		IN		VARCHAR default null,	-- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR  default '1',						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	) 
	AS
		
		
		
		vDate 			DATE := TO_DATE(pYear || '0101', 'YYYYMMDD');
		vEndDate		DATE := TO_DATE(pYear || '1231', 'YYYYMMDD');

		vIsWeekend		OP.t_fn_calendar.weekend_yn%TYPE;		-- 주말여부
		vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE;		-- 휴일여부
		vIsRealHoliday  OP.t_fn_calendar.real_holiday_yn%TYPE;	-- 실제휴일구분
		vWeekDay		VARCHAR(1);						-- 요일

		vCount	NUMBER(1) := 0;
		
	BEGIN
		if pYear = '' or pYear is null then
			pYear := TO_CHAR(SYSDATE, 'YYYY');
		end if;
		
		if pIsDeleting = '' or pIsDeleting is null then
			pIsDeleting := '1';
		end if;
		
		-- 기존데이타 존재여부 체크
		SELECT COUNT(*)
		  INTO vCount
		  FROM OP.t_fn_calendar
		 WHERE std_date LIKE pYear || '%'
		   AND ROWNUM      = 1;

		IF vCount > 0 THEN
			IF pIsDeleting = '1' THEN
				-- 기존데이타 삭제
				DELETE OP.t_fn_calendar
				 WHERE std_date LIKE pYear || '%';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
		END IF;

		LOOP
			EXIT WHEN vDate > vEndDate;

			vIsWeekend := '0';
			vIsHoliday := '0';
			 
			-- 특수일에 등록된 일자의 경우 먼저 세팅 
			BEGIN
				SELECT special_day_type
				  INTO vIsRealHoliday
				  FROM op.t_fn_special_day
				 WHERE (    vDate    = TO_DATE(pYear || month_day, 'YYYYMMDD') + add_days 
				        AND lunar_yn = '0'
					   )
				    OR (    vDate    = TO_DATE(sf_getSolarDate(pYear || month_day), 'YYYYMMDD') + add_days 
				        AND lunar_yn = '1'
					   )
				   AND ROWNUM = 1;  
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					vIsRealHoliday := '0';
			END;

			vIsHoliday := vIsRealHoliday;
			vWeekDay   := DAYOFWEEK(vDate);

			CASE vWeekDay
				WHEN '1' THEN
					vIsWeekend     := '1';
					vIsHoliday      := '1';
					vIsRealHoliday := '1';
				WHEN '7' THEN
					vIsWeekend     := '1';
					vIsHoliday      := '1';
				WHEN '6' THEN
					vIsWeekend	   := '1';
				ELSE
					NULL;
			END CASE;

			INSERT INTO OP.t_fn_calendar (
				std_date,
				weekend_yn,
				holiday_yn,
				real_holiday_yn,
				insert_uid,
				insert_date,
				update_uid,
				update_date)
			VALUES (
				TO_CHAR(vDate, 'YYYYMMDD'),
				vIsWeekend,
				vIsHoliday,
				vIsRealHoliday,
				pUserId,
				SYSDATE,
				pUserId,
				SYSDATE);

			vDate := vDate + 1;
		END LOOP;
		
		vResult := 'OK';
		
	EXCEPTION
		WHEN eAlreadyExistsException THEN
			vREsult := vResult || pYear || '년의 카렌다 데이타가 이미 존재합니다';
		WHEN OTHERS THEN
			vResult := vResult || SQLERRM;
	END sp_createCalendar;
	
	/* 청구일수 카렌다 생성 (기관전체 */
	/* 청구일수 카렌다 생성 */
	PROCEDURE sp_createDemandCalendar (
		pYear		IN		VARCHAR,	-- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR DEFAULT '1',						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	) AS
	
	BEGIN
		sp_createDemandCalendar('', pYear, pUserId, pIsDeleting, vResult);	  
	END sp_createDemandCalendar;
	
	/* 청구일수 카렌다 생성 */
	PROCEDURE sp_createDemandCalendar (
		pOrgCode	IN      op.t_cm_org.org_cd%TYPE,						-- 기관코드   
		pYear		IN		VARCHAR,	                                -- 년도
		pUserId		IN		OP.t_fn_calendar.insert_uid%TYPE,				-- 사용자ID
		pIsDeleting IN		VARCHAR DEFAULT '1',						-- 기존데이타 삭제여부 ('1':삭제, '0':예외처리)
		vResult		OUT		VARCHAR									-- 결과값
	) AS
		vDate 					DATE;

		vIsHoliday				OP.t_fn_calendar.holiday_yn%TYPE			:= '0';	-- 휴일여부
		vWeekDay				VARCHAR(1);									-- 요일
	
		vHolidayCount			NUMBER(2) := 0;									-- 휴일 카운트
		vDemandDays				NUMBER(2) := 0;									-- 청구일수
		
		vCount					NUMBER(1) := 0;									-- 카운트 변수

		vOrgCode				op.t_cm_org.org_cd%TYPE;
		
		CURSOR vCur IS
			SELECT /*+ INDEX_DESC(OP.t_fn_calendar, pk_OP.t_fn_calendar) */
				   std_date,
				   holiday_yn
			  FROM OP.t_fn_calendar
			 WHERE std_date LIKE pYear || '%';

		CURSOR vHoliCur IS
			SELECT std_date,
				   MAX(demand_day) demand_day
			  FROM op.t_fn_demand_calendar
			 WHERE org_cd   LIKE pOrgCode || '%'
			   AND std_date LIKE pYear    || '%'
			   AND demand_day  > 1
		  GROUP BY std_date;
		
	BEGIN
		IF pOrgCode IS NULL OR pOrgCode = '' THEN
		    vOrgCode := '%';
		ELSE 
		    vOrgCode := pOrgCode || '%';
		END IF;
					  
		-- 기존데이타 존재여부 체크
		SELECT COUNT(*)
		  INTO vCount
		  FROM op.t_fn_demand_calendar
		 WHERE org_cd   LIKE vOrgCode
		   AND std_date LIKE pYear    || '%'
		   AND ROWNUM      = 1;

		IF vCount > 0 THEN
			IF pIsDeleting = '1' THEN
				-- 기존데이타 삭제
				DELETE op.t_fn_demand_calendar
				 WHERE org_cd   LIKE vOrgCode
				   AND std_date LIKE pYear    || '%';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
		END IF;

		/********************************************************
		    명년 1월1일의 요일에 따라 기준 휴일카운트 계산
			  - 금요일 : 3일
			  - 토요일 : 2일
			  - 이  외 : 1일
		 ********************************************************/
		--vWeekDay := DAYOFWEEK(TO_DATE(pYear + 1 || '0101', 'YYYYMMDD'));
		vWeekDay :=DAYOFWEEK(TO_DATE(TO_CHAR(TO_NUMBER(pYear) + 1) || '0101', 'YYYYMMDD'));
		
		IF vWeekDay = '6' THEN
		    vHolidayCount := 3;
		ELSIF vWeekDay = '7' THEN
			vHolidayCount := 2;
		ELSIF vWeekDay = '0' THEN
			vHolidayCount := 1;
		END IF;

		FOR vRec IN vCur LOOP
		
			vDate := TO_DATE(vRec.std_date, 'YYYYMMDD'); 

			/* 휴일인 경우 */
			  -- 전기관에 대해 휴일구분:1, 청구일수:0, 재고일수:1
			  -- 휴일카운트 +1
			IF vRec.holiday_yn = '1' THEN
				INSERT INTO op.t_fn_demand_calendar (
					   org_cd,
					   std_date,
					   demand_day,
					   invent_day,
					   holiday_yn,
					   insert_uid,
					   insert_date,
					   update_uid,
					   update_date)
				SELECT org_cd,
					   vRec.std_date,
					   0,
					   1,
					   '1',
					   pUserId,
					   SYSDATE,
					   pUserId,
					   SYSDATE
				  FROM op.t_fn_org_info
				 WHERE org_cd LIKE vOrgCode
				   AND ord_req_type > ' ';

				vHolidayCount := vHolidayCount + 1;		-- 휴일카운트 ++1

			/* 휴일이 아닌 경우 */
				-- 무조건 휴일이 아닌 
			ELSE
				IF vHolidayCount > 0 THEN
					vDemandDays := vHolidayCount + 1;
					vHolidayCount := 0;
				ELSE 
					vDemandDays := 1;
				END IF;

				INSERT INTO op.t_fn_demand_calendar (
					   org_cd,
					   std_date,
					   start_date,
					   end_date,
					   demand_day,
					   invent_day,
					   holiday_yn,
					   insert_uid,
					   insert_date,
					   update_uid,
					   update_date)
				SELECT org_cd,
					   vRec.std_date,
					   TO_CHAR(vDate + 1, 'YYYYMMDD'),
					   TO_CHAR(vDate + vDemandDays, 'YYYYMMDD'),
					   vDemandDays,
					   vDemandDays,
					   '0',
					   pUserId,
					   SYSDATE,
					   pUserId,
					   SYSDATE
				  FROM op.t_fn_org_info
				 WHERE org_cd LIKE vOrgCode
				   AND ord_req_type > ' ';
			END IF;
		END LOOP;

		/* 청구일수가 > 0 인 일자에 대하여.... */
		FOR vRec IN vHoliCur LOOP
			vDate := TO_DATE(vRec.std_date, 'YYYYMMDD');

			/* 금요일일 때는 주말청구유형을 적용 */
			    -- '1' : 1일 / 1일
				-- '2' : 1일 / 3일
				-- '3' : 2일 / 2일
				-- '4' : 3일 / 1일
			IF DAYOFWEEK(vDate) = '6' THEN
				UPDATE op.t_fn_demand_calendar cal
				   SET (start_date,
						demand_day, 
						invent_day) = (SELECT DECODE(wkd_req_type, 
						                             '1', OP.sf_getPostActDate(cal.std_date),
													      cal.start_date),
											  DECODE(wkd_req_type, 
											         '1', 1,
													 '2', cal.demand_day,
													 '3', cal.demand_day + 1,
													 '4', cal.demand_day + 2),
											  DECODE(wkd_req_type,
											         '1', 1,
													 '2', cal.invent_day,
													 '3', cal.invent_day + 1,
													 '4', cal.invent_day + 2)
										 FROM op.t_fn_org_info org
										WHERE org.org_cd LIKE vOrgCode
										  AND org.org_cd    = cal.org_cd)
				 WHERE std_date = (SELECT MAX(std_date)
									 FROM op.t_fn_demand_calendar
									WHERE org_cd  LIKE vOrgCode
									  AND std_date   < vRec.std_date
									  AND holiday_yn = '0');

				UPDATE op.t_fn_demand_calendar cal
				   SET (start_date,
						demand_day, 
						invent_day) = (SELECT DECODE(wkd_req_type,
						                             '1', OP.sf_getPostActDate(cal.std_date),
													 '2', cal.start_date,
													 '3', op.sf_getAfterDate(cal.start_date), 
													 '4', op.sf_getAfterDate(cal.start_date, 2),
													      cal.start_date),
											  DECODE(wkd_req_type,
											         '1', 1, 
													 '2', cal.demand_day,
													 '3', cal.demand_day - 1,
													 '4', cal.demand_day - 2,
													      cal.demand_day),
											  DECODE(wkd_req_type,
											         '1', 1,
													 '2', cal.invent_day,
													 '3', cal.invent_day - 1,
													 '4', cal.invent_day - 2,
													      cal.invent_day)
										 FROM op.t_fn_org_info org
										WHERE org.org_cd LIKE vOrgCode
										  AND org.org_cd    = cal.org_cd)
				 WHERE org_cd LIKE vOrgCode
				   AND std_date  = vRec.std_date;
			
			/* 주중일 때는 주중청구유형을 적용 */
			    -- '1' : 1일 / 1일
				-- '2' : 1일 / 2일
				-- '3' : 2일 / 1일
			ELSE 
				UPDATE op.t_fn_demand_calendar cal
				   SET (start_date,
						demand_day, 
						invent_day) = (SELECT DECODE(ord_req_type, 
						                             '1', OP.sf_getPostActDate(cal.std_date),
													      cal.start_date),
											  DECODE(ord_req_type, 
											         '1', 1,
													 '2', cal.demand_day,
													 '3', cal.demand_day + 1,
													      cal.demand_day),
											  DECODE(ord_req_type,
											         '1', 1,
													 '2', cal.invent_day,
													 '3', cal.invent_day + 1,
													      cal.invent_day)
										 FROM op.t_fn_org_info org
										WHERE org.org_cd LIKE vOrgCode
										  AND org.org_cd    = cal.org_cd)
				 WHERE std_date = (SELECT MAX(std_date)
									 FROM op.t_fn_demand_calendar
									WHERE org_cd   LIKE vOrgCode
									  AND std_date    < vRec.std_date
									  AND holiday_yn  = '0');

				UPDATE op.t_fn_demand_calendar cal
				   SET (start_date,
						demand_day, 
						invent_day) = (SELECT DECODE(ord_req_type, 
						                             '1', OP.sf_getPostActDate(cal.std_date),
													 '2', cal.start_date,
													 '3', op.sf_getAfterDate(cal.start_Date)),
											  DECODE(ord_req_type,
											         '1', 1, 
													 '2', cal.demand_day,
													 '3', cal.demand_day - 1,
													      cal.demand_day),
											  DECODE(ord_req_type,
											         '1', 1,
													 '2', cal.invent_day,
													 '3', cal.invent_day - 1,
													      cal.invent_day)
										 FROM op.t_fn_org_info org
										WHERE org.org_cd LIKE vOrgCode
										  AND org.org_cd    = cal.org_cd)
				 WHERE org_cd LIKE vOrgCode
				   AND std_date  = vRec.std_date;
				
			END IF;
		END LOOP;
		
		UPDATE op.t_fn_demand_calendar
		   SET end_date = TO_CHAR(TO_DATE(start_date, 'YYYYMMDD') + demand_day - 1, 'YYYYMMDD')
		 WHERE org_cd   LIKE vOrgCode
		   AND std_date LIKE pYear || '%';
		
		vResult := 'OK';
	EXCEPTION
		WHEN eAlreadyExistsException THEN
			vResult := vResult || pYear || '년의 청구일수 카렌다 데이타가 이미 존재합니다';
		WHEN OTHERS THEN
			vResult := vResult || SQLERRM;
	END sp_createDemandCalendar;

	/* 음력일자를 양력일자로 반환 */
	FUNCTION sf_getSolarDate ( 
		pLunarDate VARCHAR
	) RETURN VARCHAR
	IS 
		eOutOfRangeException	EXCEPTION;
		vResult					VARCHAR(100);
	
		vLunarYear				NUMBER(5) := 0 ;
		vLunarMonth				NUMBER(5) := 0 ;
		vLunarDay				NUMBER(5) := 0 ;
	
		vSolarYear				NUMBER(5) := 0 ;
		vSolarMonth				NUMBER(5) := 0 ;
		vSolarDay				NUMBER(5) := 0 ;
	
		vIdx NUMBER(5) := 0 ; 
	
		-- 1921년부터 해당년까지의 년수
		vFromYear               NUMBER(10) := 0 ;
		vLeapMonth				VARCHAR(500);     --윤달
		vLeapMonthLength		VARCHAR(500);    --윤달의 길이(29 OR 30)
	
		--매년 정상적인 달의 길이의 합
		--( 12 의 자리값 * (30일인 경우만 1 ) 의 합)
		vMonthLength			VARCHAR(500) ;
		vLunarYearDays			VARCHAR(500);   --음력으로 윤달의 길이(29 OR 30)
		vSolarMonthDays			VARCHAR(39) ;
	
		--0000-00-00부터 해당일자까지의 누적일수
		vDaySum					NUMBER(10);
	
		li_M					NUMBER(5) := 0 ;
		MM						NUMBER(5) := 0 ; 
		MK						NUMBER(5):=0 ;
	
		vLoop					NUMBER(5) :=0;
	
		vPreYear				NUMBER(5):=0;
		vYearDays				NUMBER(5):=0;
		NA						NUMBER(5):=0;
		YD						NUMBER(5):=0;
		KA						NUMBER(5):=0;
	
	BEGIN
	
		vLunarYear	:= TO_NUMBER(SUBSTR(pLunarDate, 1, 4)) + 2333;
		vLunarMonth := TO_NUMBER(SUBSTR(pLunarDate, 5, 2));
		vLunarDay	:= TO_NUMBER(SUBSTR(pLunarDate, 7, 2));
	
		-- 1921-2030년 범위, 1-12월 범위, 1-31일 범위를 벗어날 경우 에러처리.
		IF    vLunarYear  < 1921 + 2333
		   OR vLunarYear  > 2030 + 2333
		   OR vLunarMonth < 1 
		   OR vLunarMonth > 12
		   OR vLunarDay   < 1 
		   OR vLunarDay   > 31
		THEN
			RAISE eOutOfRangeException;
		END IF ;
	
		--1921 - 2030
		vLeapMonth := ' 0 5 0 0 4 0 0 2 0 6' || 
					  ' 0 0 5 0 0 3 0 7 0 0' ||
					  ' 6 0 0 4 0 0 2 0 7 0' ||
					  ' 0 5 0 0 3 0 8 0 0 6' ||
					  ' 0 0 4 0 0 3 0 7 0 0' ||
					  ' 5 0 0 4 0 8 0 0 6 0' ||
					  ' 0 4 010 0 0 6 0 0 5' ||
					  ' 0 0 3 0 8 0 0 5 0 0' ||
					  ' 4 0 0 2 0 7 0 0 5 0' ||
					  ' 0 3 0 9 0 0 5 0 0 4' ||
					  ' 0 0 2 0 6 0 0 5 0 0';
		--1921 - 2030
		vLeapMonthLength := ' 029 0 029 0 029 029' ||
							' 0 030 0 030 030 0 0' ||
							'30 0 030 0 029 029 0' ||
							' 030 0 030 029 0 029' ||
							' 0 029 0 029 029 0 0' ||
							'29 0 029 029 0 030 0' ||
							' 029 029 0 029 0 029' ||
							' 0 029 029 0 029 0 0' ||
							'29 0 029 029 0 029 0' ||
							' 030 029 0 029 0 029' ||
							' 0 029 029 0 029 0 0';
	
		--1921 - 2030
		vLunarYearDays := ' 354 384 354 354 385 354 355 384 354 383' ||
						  ' 354 355 384 355 354 384 354 384 354 354' ||
						  ' 384 355 355 384 354 354 384 354 384 354' ||
						  ' 355 384 355 354 384 354 384 354 354 384' ||
						  ' 355 354 384 355 353 384 355 384 354 355' ||
						  ' 384 354 354 384 354 384 354 355 384 355' ||
						  ' 354 384 354 384 354 354 385 354 355 384' ||
						  ' 354 354 383 355 384 355 354 384 354 354' ||
						  ' 384 354 355 384 355 384 354 354 384 354' ||
						  ' 354 384 355 384 355 354 384 354 354 384' ||
						  ' 354 355 384 354 384 355 354 383 355 354';
	
		--1921 - 2030
		vMonthLength := '26352891170527722997 6942395133511751622' ||
						'3658374917051461 69422222350321332213402' ||
						'346629211389 603 60523493371270934132890' ||
						'290113651243 603213513232715168517062794' ||
						'2741120627342647131838783477171713862477' ||
						'1245119826383405336534132900343423942395' ||
						'1179271526352855170117482901 69423951207' ||
						'117516111866374917531453 694241423503222' ||
						'37333402349318771389 699 605234932432709' ||
						'28902890290113731211 6032391132327092965' ||
						'1706277317171206267026471319170234751450';
	
		vDaySum := 701303  ; --1920년까지의 누적일수
	
		--1921년부터 해당일자 직전 년도 까지의 년수 계산
		vFromYear := vLunarYear - 4254;
		
		FOR  vIdx IN 1..vFromYear LOOP
			vDaySum := vDaySum + TO_NUMBER(SUBSTR(vLunarYearDays, vIdx * 4 - 3, 4));
		END LOOP;
	
		--해당년도의 월 계산
		IF vLunarMonth != 1  THEN -- 1월이 아닐 경우에만 월->일로 환산
			li_M		:= 2048;
			vFromYear	:= vFromYear + 1;
	
			MM := TO_NUMBER(SUBSTR(vMonthLength, vFromYear * 4 - 3, 4));
	
			FOR  vIdx IN 1..vLunarMonth - 1 LOOP
				--해당월의 일수를 누적시켜나간다.
				vDaySum := vDaySum + 29 + TRUNC(MM / li_M);
	
				MM   := MM - TRUNC(MM / li_M) * li_M;
				li_M := TRUNC(li_M / 2);
	
				IF vIdx = TO_NUMBER(SUBSTR(vLeapMonth,vFromYear * 2 - 1, 2)) THEN  
					--윤달일 경우
					vDaySum := vDaySum + TO_NUMBER(SUBSTR(vLeapMonthLength, vFromYear * 2 - 1, 2));
				END IF;
			END LOOP ;
		END IF;
	
		-- 해당월의 일 누적
		vDaySum := vDaySum + vLunarDay;
	
		------------------------------------------------------
		--1921년부터 해당일 까지의 누적일수를 계산하여 더한다.
		------------------------------------------------------
		vPreYear := TRUNC(vDaySum / 365) - 1;
		NA		 := TRUNC(vDaySum - vPreYear * 365);
		YD		 := TRUNC(vPreYear / 4) - TRUNC(vPreYear / 100) + TRUNC(vPreYear / 400) ;
		KA		 := NA - YD  ;
	
		IF KA < 0 THEN
			vPreYear := vPreYear - 1;
			NA		 := vDaySum - TRUNC(vPreYear * 365);
			YD		 := TRUNC(vPreYear / 4) - TRUNC(vPreYear / 100 ) + TRUNC(vPreYear / 400);
			NA		 := NA - YD;
		ELSE
			NA := KA;
		END IF;
	
		--양력으로 해당년도의 일수를 계산한다.
		vSolarYear := vPreYear + 1;
		IF     vSolarYear  = TRUNC(vSolarYear / 4) * 4
		   AND vSolarYear <> TRUNC(vSolarYear / 100) * 100 THEN
			
			vSolarMonthDays := '  0 31 29 31 30 31 30 31 31 30 31 30 31';
			vYearDays       := 366;
	
		ELSIF vSolarYear = TRUNC(vSolarYear / 400) * 400 THEN
			vSolarMonthDays := '  0 31 29 31 30 31 30 31 31 30 31 30 31';
			vYearDays       := 366;
	
		ELSE
			vSolarMonthDays := '  0 31 28 31 30 31 30 31 31 30 31 30 31';
			vYearDays       := 365;
		
		END IF;
	
		IF NA = 0 THEN
			NA         := vYearDays;
			vSolarYear := vSolarYear - 1;
		END IF;
	
		FOR vIdx IN 1..13 LOOP
			vLoop := vIdx;
			
			IF  NA > TO_NUMBER(SUBSTR(vSolarMonthDays, vIdx * 3 - 2, 3)) THEN
				NA := NA - TO_NUMBER(SUBSTR(vSolarMonthDays, vIdx * 3 - 2, 3));
			ELSE
				EXIT;
			END IF;
		END LOOP;
	
		vSolarMonth := vLoop - 1;
		vSolarDay   := NA;
		vResult     :=    LPAD(vSolarYear,4,'0') 
		               || LPAD(vSolarMonth,2,'0')
				       || LPAD(vSolarDay,2,'0');
		
		RETURN vResult;
	
	EXCEPTION 
		WHEN DUP_VAL_ON_INDEX then
			vResult := 'DUP_VAL_ON_INDEX 입니다.';
			RETURN vResult;
		WHEN INVALID_NUMBER then
			vResult := 'INVALID_NUMBER 입니다.';
			RETURN vResult;
		WHEN LOGIN_DENIED then
			vResult := 'Login Denied.';
			RETURN vResult;
		WHEN NOT_LOGGED_ON then
			vResult := 'Not Logged On.';
			RETURN vResult;
		WHEN VALUE_ERROR then
			vResult := 'VALUE_ERROR 입니다. ';
			RETURN vResult;
		WHEN ZERO_DIVIDE then
			vResult := 'Zero Divide .';
			RETURN vResult;
		WHEN eOutOfRangeException then
			vResult := '범위(1921.01.01-2030.11.28)를 벗어났습니다.';
			Return vResult;
		WHEN others then
			vResult := SUBSTR(SQLERRM, 1, 100 );
			RETURN vResult;
	END sf_getSolarDate;
	
END pkg_fn_Calendar;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_CenterUI AS
	/* 기관별 여유율 등록 */
	PROCEDURE sp_createSpareRate (
		pOrgCode		IN		op.t_fn_org_spare_rate.org_cd%TYPE,
		pStartDate		IN		op.t_fn_org_spare_rate.start_date%TYPE,
		pOrdCntRate		IN		op.t_fn_org_spare_rate.ord_cnt_rate%TYPE,
		pOrdAmtRate		IN		op.t_fn_org_spare_rate.ord_amt_rate%TYPE,
		pWkdCntRate		IN		op.t_fn_org_spare_rate.wkd_cnt_rate%TYPE,
		pWkdAmtRate		IN		op.t_fn_org_spare_rate.wkd_amt_rate%TYPE,
		pUserId			IN		op.t_fn_org_spare_rate.insert_uid%TYPE,
		vResult		   OUT		VARCHAR
	)
	IS

		vEndDate	op.t_fn_org_spare_rate.end_date%TYPE;

	BEGIN

		/* 적용시작일자가 더 이후의 일자가 존재하면, 
		   적용종료일자를 이후 일자 중 가장 작은 적용시작일자 -1일로 계산 */ 		   
		BEGIN
			SELECT /*+ INDEX(op.t_fn_org_spare_rate, pk_op.t_fn_org_spare_rate) */
			       op.sf_getBeforeDate(start_date)
			  INTO vEndDate
			  FROM op.t_fn_org_spare_rate
			 WHERE start_date > pStartDate
			   AND org_cd     = pOrgCode
			   AND ROWNUM     = 1;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				vEndDate := '29991231';
		END;

		BEGIN
			INSERT INTO op.t_fn_org_spare_rate (
				start_date,
				org_cd,
				end_date,
				ord_cnt_rate,
				ord_amt_rate,
				wkd_cnt_rate,
				wkd_amt_rate,
				insert_uid,
				insert_date,
				update_uid,
				update_date )
			VALUES (
				pStartDate,
				pOrgCode,
				vEndDate,
				pOrdCntRate,
				pOrdAmtRate,
				pWkdCntRate,
				pWkdAmtRate,
				pUserId,
				SYSDATE,
				pUserId,
				SYSDATE);
		EXCEPTION
			WHEN DUP_VAL_ON_INDEX THEN
				UPDATE op.t_fn_org_spare_rate
				   SET ord_cnt_rate = pOrdCntRate,
					   ord_amt_rate = pOrdAmtRate,
					   wkd_cnt_rate = pWkdCntRate,
					   wkd_amt_rate = pWkdAmtRate,
					   update_uid   = pUserId,
					   update_date  = SYSDATE
				 WHERE start_date   = pStartDate
				   AND org_cd       = pOrgCode;

		END;

		/* 이전 적용일자의 적용종료일자를 현재 적용시작일자의 -1로 세팅 */
		UPDATE op.t_fn_org_spare_rate
		   SET end_date     = op.sf_getBeforeDate(pStartDate),
			   update_uid   = pUserId,
			   update_date  = SYSDATE
		 WHERE org_cd       = pOrgCode
		   AND start_date   = (SELECT /*+ INDEX_DESC(op.t_fn_org_spare_rate, pk_op.t_fn_org_spare_rate) */
		                              start_date
								 FROM op.t_fn_org_spare_rate
								WHERE start_date < pStartDate
								  AND org_cd     = pOrgCode
								  AND ROWNUM     = 1);
		   
        vResult := 'OK';
		
	EXCEPTION
	    WHEN OTHERS THEN
		    vResult := SQLERRM;
		
	END sp_createSpareRate;
	
END pkg_fn_CenterUI;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_CtAtms_Demand AS

	
	/* 시티 현송계획서 데이터 생성 */
    PROCEDURE sp_ct_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
--		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        vPostActDate op.t_fn_close.close_date%TYPE	:= op.sf_getAfterDate(pDemandDate); --익일

        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
		if pDemandDate is null then
			pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostActDate --익일
         and   org_cd ='027';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
			
            -- citi현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select send.org_cd org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,send.send_amt
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date = vPostActDate
			and send.org_cd = '027'
			and send.send_type = '1' --정규현송
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd;
			
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_CtAtms_Demand.sp_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_ct_createAtmsCashPlan;
	
	
	
END pkg_fn_CtAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_CtAtms_DemandManager AS

    PROCEDURE sp_CtAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0	,
		pToJobNo		IN		NUMBER							default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    if pDemandDate is null then
    	pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    end if ;
    
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
		
        /* 외환 현송계획서 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_CtAtms_Demand.sp_ct_createAtmsCashPlan(pDemandDate);
        END IF;

    
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_CtAtms_DemandManager.sp_CtAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_CtAtms_DemandManager.sp_CtAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_CtAtms_DemandManager.sp_CtAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_CtAtms_batchProcess;

END pkg_fn_CtAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_DGBAtms_Demand AS

	/* 추가현송 보고서 데이터 생성 */
      PROCEDURE sp_DGB_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then 
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if ;

		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
                 and org_cd ='031';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;


            INSERT INTO OP.t_fn_atms_add_cash_report (
                       org_cd,
                       BRANCH_cd,
                       site_cd,
                       mac_no,
                       add_date,
                       serial_no,
                       demand_date,
                       add_cash_amt,
                       office_nm,
                       org_send_yn,
                       update_date,
                       update_uid,
                      add_time,
                      close_yn,
                      send_date
                    )

--select * from OP.t_fn_atms_add_cash_report	
      
                  select     send.org_cd org_cd 
                              ,send.BRANCH_cd
                              ,send.site_cd
                              ,send.mac_no
                              ,send.send_date
                              ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                              ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                              ,send.send_amt
                              ,substr2(off.office_nm,0,2) office_nm
                              ,'0' orgSendYn
                              ,sysdate
                              ,'SYSTEM'
                        ,send.send_time
                        ,case when close.close_date is null then '0'--'마감전'
                              else
                                   case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                                   else '0' --'마감전' 
                                   end 
                              end  flag   

                        ,case when close.close_date is null then null--'마감전'
                              else
                                   case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                                   else 
                                       (  
                                       select max(close_date) close_date
                                       from   op.t_fn_close aa
                                       where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                                       and    aa.close_date < close.close_date
                                       and    aa.org_cd = close.org_cd
                                       and    aa.BRANCH_cd = close.BRANCH_cd
                                       and    aa.mac_no = close.mac_no
                                       )  
                      
                                    --'마감전' 
                                   end 
                              end  close_date

                        
                        from op.T_FN_SEND send
                            ,OP.t_cm_office off

                            ,(
                               select org_cd,
                                      BRANCH_cd,
                                      site_cd,
                                      mac_no,
                                      max(close_date) close_date, 
                                      max(close_time) close_time
                                      
                               from   op.t_fn_close
                               where  org_cd ='031'
                               and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
                               and    close_date <= vBeforeDate
                               group by org_cd,
                                      BRANCH_cd,
                                      site_cd,
                                      mac_no    
                          
                              ) close

                        where send.send_date >= vPreActDate
                        and send.send_date <= vBeforeDate
                        and send.org_cd = '031'
                        and send.send_type = '2'
                        and send.send_status = '2'
                        and send.dept_cd = off.dept_cd
                        and send.office_cd = off.office_cd
            --      and send.send_date = close.close_date (+)
                        and send.org_cd = close.org_cd (+)
                        and send.BRANCH_cd = close.BRANCH_cd (+) 
                        and send.mac_no = close.mac_no (+);
                
			COMMIT;
			
		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_DGB_createAtmsAddCashReport;
	
	/* 현송계획서 데이터 생성 */  

   PROCEDURE sp_DGB_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    is

	  vPostPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과
   	eAlreadyExistsException  EXCEPTION;
        
    BEGIN
		if pDemandDate is null then 
			pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		end if;
		
		BEGIN
    
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostPostActDate --익일
         and   org_cd ='031';
			
            -- 부산은행 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
                   org_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
      /*     
			select sendPlan.org_cd org_cd --'97' org_cd
			      ,sendPlan.BRANCH_cd
			      ,sendPlan.site_cd
			      ,sendPlan.mac_no
			      ,sendPlan.send_date
			      ,0
			      ,decode(sendplan.last_send_type
	  		            , '1', sendplan.plan_send_amt					
		   		          , '2', sendplan.change_send_amt)	SendAmt	
			      ,substr(off.office_nm,0,2) office_nm
			      ,'2' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
			where sendPlan.send_date   = vPostPostActDate
			and   sendPlan.org_cd      = '011'
	       AND   sendPlan.confirm_yn  = '1'
			AND   sendPlan.cancel_type = '0' 
            and   sendPlan.dept_cd = off.dept_cd
			and   sendPlan.office_cd = off.office_cd;
		*/
    	
     select distinct 
             send.org_cd org_cd --'97' org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no mac_no
			      ,send.send_date 
			      ,send.send_amt SendAmt
			      ,send.send_amt - sd.cw54_amt	send10000Amt	
			      ,sd.cw54_amt	send50000Amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn --부산만 ???
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
               , op.T_FN_SEND_detail sd
               ,OP.t_cm_office off 
			where send.send_date   = vPostPostActDate
			and   send.org_cd      = '031'
	        AND   send.send_type = '1'
			--AND   sendPlan.cancel_type = '0' 
            and   send.dept_cd = off.dept_cd
			and   send.office_cd = off.office_cd
            and send.send_date = sd.send_date
            and send.org_cd = sd.org_cd
            and send.BRANCH_cd = sd.BRANCH_cd
            and send.mac_no = sd.mac_no
            and send.insert_time = sd.insert_time
            and send.send_type = sd.send_type;
      
			COMMIT;

		EXCEPTION
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_Demand.sp_DGB_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_DGB_createAtmsCashPlan;
    
    
	/* DGB 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_DGcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
		if pDemandDate is null then
			pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		end if ;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd ='031'; 
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
                   prepre_stock_amt,
                   pre_oper_amt,
                   pre_send_amt,
                   pre_out_amt,
                   pre_in_amt,
                   close_date
           )
-----------------------------------------------------------------------------------------
            select main.org_cd org_cd --'97' org_cd
			      ,'9999' as BRANCH_cd
			      ,main.demand_date
				  ,0 operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,nvl(main.post_trans_amt, 0)
			      ,nvl(main.pre_add_trans_amt, 0)
			      ,nvl(main.pre_collect_amt, 0)
			      ,nvl(main.differ_amt, 0)
			      ,nvl(main.unset_before_amt, 0)
			      ,nvl(main.demand_amt, 0)
			      ,nvl(main.unset_amt, 0)
			      --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
      			  ,nvl(TOTAL_BRANCH.STOCK_AMT, 0)   STOCK_AMT
			      ,substr2(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
                  ,nvl(TOTAL_BRANCH_SEND_BEFORE.PRETOTALAMT, 0) /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
                  ,nvl(TOTAL_BRANCH.OPERAMT, 0)  pre_oper_amt
                  ,nvl(TOTAL_BRANCH_SEND_BEFORE.pre_send_amt, 0) pre_send_amt  
                  ,nvl(TOTAL_BRANCH.OUTAMT, 0) pre_out_amt
                  ,nvl(TOTAL_BRANCH.INAMT, 0)  pre_in_amt
                  ,total_BRANCH.close_date close_date

			from
			       (select org_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from op.t_fn_pack_demand
					where demand_date = pDemandDate
					and org_cd = '031'
					group by demand_date
					        ,org_cd
                 ) main,
                 (
                      select 
                         org_cd,
                         close_date,
                         sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
                         sum(oper_amt) operamt,
                         sum(differ_amt) differamt,
                         sum(out_amt) outamt,
                         sum(in_amt) inamt,
                         sum(mac_amt) SUM_MACAMT,
                         sum(safe_amt) SUM_SAFEAMT
                      from 
                        op.t_fn_pack_invent
                      where
                        org_cd='031'
                      and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
                      group by   org_cd, close_date
                  ) total_BRANCH,
          
                  (
                  -- total_BRANCH_before
                      select 
                         org_cd,
                         close_date,
                         sum(mac_amt + safe_amt - differ_amt) pretotalamt,
                         sum(ord_send_amt) pre_send_amt
                      from 
                        op.t_fn_pack_invent
                      where
                        org_cd='031'
                        and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
                      group by   org_cd, close_date
                  ) total_BRANCH_send_before         
         
            where main.org_cd   = total_BRANCH.org_cd(+)
              and main.org_cd   = total_BRANCH_send_before.org_cd(+)
              and main.oper_found||post_trans_amt||pre_add_trans_amt||pre_collect_amt||unset_before_amt||demand_amt||unset_amt <> '0000000';  -- 20121210 정희성수정

--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      AND (SUM_MACAMT <> 0 OR SUM_SAFEAMT <> 0);
      --and TOTAL_BRANCH.STOCK_AMT <> 0	  	;

------------------------------------------------------------------------------------------
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_DGcreateAtmsOperFundsDemand;
	
END pkg_fn_DGBAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_DGBAtms_DemandManager AS

    PROCEDURE sp_DGBAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER								default 0,
		pToJobNo		IN		NUMBER								default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if ;
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
        
        
		/* 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_DGBAtms_Demand.sp_DGB_createAtmsAddCashReport(pDemandDate);
        END IF;

        /* 현송계획서 데이터 생성 */

        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_DGBAtms_Demand.sp_DGB_createAtmsCashPlan(pDemandDate);
        END IF;
        
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_DGBAtms_Demand.sp_DGcreateAtmsOperFundsDemand(pDemandDate);
        END IF;
		
        
      
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_DemandManager.sp_DGBAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_DemandManager.sp_DGBAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_DGBAtms_DemandManager.sp_DGBAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_DGBAtms_batchProcess;

END pkg_fn_DGBAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_DemandManager AS

    PROCEDURE sp_batchProcess (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE  default null  ,
        pFromJobNo        IN        NUMBER                                default 0,
        pToJobNo        IN        NUMBER                                default 9999999
    )
    IS
        vIsHoliday        OP.t_fn_calendar.holiday_yn%TYPE := 0;
        dsumYn            VARCHAR(1) := 0;
    
    /* 예외 정의 */
        BATCH_FAILED    EXCEPTION;
    
    /* 에러메세지 */
        vErrMsg         VARCHAR(1000);
        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO dsumYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = to_char(to_date(pDemandDate,'YYYYMMDD') -1,'YYYYMMDD')
                and upper(pgm_id) = 'SP_FN_NICE_DSUM_DEMAND'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;

        /* 온누리 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_onnuri_dsum_demand(pDemandDate);
        END IF;

        /* kib */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_kib_dsum_demand(pDemandDate);
        END IF;


        /* 이마트 정산주기 세팅 */
        IF vIsHoliday = '0' AND (11 BETWEEN pFromJobNo AND pToJobNo) then 
           OP.sp_fn_emart_update(pDemandDate);
        end if;
        
        /* 일괄관리 사무소, 기관, 운영형태별 재고데이타 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackInvent(pDemandDate);
        END IF;

        /* 일괄관리 기관, 지점별 재고데이타 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackInventBRANCH(pDemandDate);
        END IF;

        /* 일괄관리 사무소, 기관, 지점별 재고데이타 생성 */
        IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackInventOfcJjm(pDemandDate);
        END IF;

        /* 일괄관리 기기별 청구자료 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackReport(pDemandDate);
        END IF;

        /* 일괄관리 지점별 청구자료 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackBRANCH(pDemandDate);
        END IF;

        /* 일괄관리 사무소, 지점별 청구자료 생성 */
        IF vIsHoliday = '0' AND (40 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackOfcJjm(pDemandDate);
        END IF;

        /* 일괄관리 사무소, 기관, 운영형태별 청구자료 생성 */
        IF vIsHoliday = '0' AND (50 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createPackDemand(pDemandDate);
        END IF;

        /* 일괄관리 청구액 청구단위별 업데이트 */
        IF vIsHoliday = '0' AND (60 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_updatePackDemand(pDemandDate);
        END IF;

        /* 일괄관리 기기별 청구자료 사무소회수예상치 반영 */
        IF vIsHoliday = '0' AND (70 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_updatePackReport(pDemandDate);
        END IF;

        /* 하나은행 일괄관리 데이타 생성 */
        IF vIsHoliday = '0' AND (80 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_PackDemand.sp_createHanaBank(pDemandDate);
        END IF;

        /*  나이스 일별 기기대수 집계 */
        IF (vIsHoliday = '0' OR vIsHoliday = '1') AND (90 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_NiceDemand.sp_createDailyMacCount(pDemandDate);
        END IF;
        
        /* 나이스 청구자료 생성 (청구일 ) */
        IF vIsHoliday = '0' AND (100 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_NiceDemand.sp_createDemandInfo(pDemandDate);
        END IF;

        /* 나이스 청구자료 생성-BC 글로벌 청구일기준 (청구일 ) */
        IF vIsHoliday = '0' AND (105 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_NiceDemand.sp_createDemandInfo_bc(pDemandDate);
        END IF;
        
        /* 나이스 청구예상자료 생성 (청구일 익영업일 ) */
        IF vIsHoliday = '0' AND (110 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_NiceDemand.sp_createPostDemandInfo(pDemandDate);
        END IF;      
        

        /* 나이스 사무소별 청구금액 생성 (청구일) */
        IF vIsHoliday = '0' AND (120 BETWEEN pFromJobNo AND pToJobNo) THEN
               OP.pkg_fn_NiceDemand.sp_shareOperAmt(pDemandDate);
        END IF;

        /* 나이스 사무소별 청구금액 생성 (청구일 익영업일) */
        IF vIsHoliday = '0' AND (130 BETWEEN pFromJobNo AND pToJobNo) THEN
                --pkg_fn_NiceDemand.sp_sharePostOperAmt(pDemandDate);
                NULL;
        END IF;

        /* 사무소, 기관별 청구금액 생성 */
        IF vIsHoliday = '0' AND (140 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.sp_summaryDemand(pDemandDate);
        END IF;

        /* 파출수납업체 자금 집계 */
        IF vIsHoliday = '0' AND (150 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_MoneyReceipt.sp_summaryCarry (pDemandDate);
        END IF;
            
        /* 사무소별 현금수령 자료 생성 */
        IF vIsHoliday = '0' AND (160 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_MoneyReceipt.sp_createOfficeReceipt(pDemandDate);
        END IF;
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_DemandManager.sp_batchProcess', 
                                         'OK', 
                                            pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '나이스 실적집계 비정상에 의한 청구작업 중단.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_DemandManager.sp_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_DemandManager.sp_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_batchProcess;

    PROCEDURE sp_summaryDemand (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE default null
    )
    IS

        vResult     OP.t_cm_batch_result.pgm_result%TYPE := 'OK';

    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
        BEGIN
            DELETE op.t_fn_oper
             WHERE oper_date = pDemandDate;
             
            INSERT INTO op.t_fn_oper (
                   oper_date,
                   dept_cd,
                   office_cd,
                   org_cd,
                   oper_amt,
                   insert_uid,
                   insert_date,
                   update_uid,
                   update_date)
            SELECT pDemandDate,
                   dept_cd,
                   office_cd,
                   org_cd,
                   demand_amt,
                   'SYSTEM',
                   SYSDATE,
                   'SYSTEM',
                   SYSDATE
              FROM (SELECT dept_cd,
                           office_cd,
                           org_cd,
                           NVL(SUM(demand_amt), 0) demand_amt
                      FROM op.t_fn_pack_demand
                     WHERE demand_date = pDemandDate
                  GROUP BY dept_cd,
                           office_cd,
                           org_cd 
                   UNION ALL
                    SELECT dept_cd,
                           office_cd,
                           '096',
                           demand_amt
                      FROM op.t_fn_nice_office_oper
                     WHERE demand_date = pDemandDate);
            COMMIT;

        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_DemandManager.sp_summaryDemand', vResult, pDemandDate);

    END sp_summaryDemand;

    
    
    
 PROCEDURE sp_fn_emart_update (
        pDemandDate     IN      op.t_fn_pack_demand.demand_date%TYPE default null
    )
 AS

  vStd  VARCHAR(30) :='';
  vEnd  VARCHAR(30) :='';  
  vCheck   VARCHAR(30) :='';  
  vHoliCnt number := 0;
  vDeptCd  VARCHAR(30) :='';
  vOfficeCd  VARCHAR(30) :=''; 
  vResult     OP.t_cm_batch_result.pgm_result%TYPE := 'OK';
   

    
begin
	if pDemandDate is null then
		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
	end if;
	
    DELETE op.t_fn_emart_demand_date
    WHERE base_date = pDemandDate;   

  	begin 
    
	FOR j IN
	(
       select a.org_cd,
              a.BRANCH_cd
       from op.t_cm_BRANCH a,
            op.t_fn_BRANCH_emart b
       where a.org_cd='0EM' 
       and   a.org_cd = b.org_cd
       and   a.BRANCH_cd = b.BRANCH_cd
       and   b.mon_chk||b.thu_chk||b.wed_chk||b.thu_chk||b.fri_chk <> '00000'
       and   a.use_yn='1'
      
   )
	LOOP
  
        begin 
              select start_date,
                     end_date
              into   vStd,
                     vEnd       
              from op.t_fn_emart_demand_date
              where org_cd = j.org_cd
               and   BRANCH_cd=  j.BRANCH_cd
               and   base_date = op.sf_getPreActDate(pDemandDate);
                          
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
        		  vStd :='99999999';
              vEnd :='99999999';
        	end;
          
          begin 
           select fdept_cd,
                  foffice_cd
           into   vDeptCd,
                  vOfficeCd       
           from   op.t_Cm_site
           where org_cd=j.org_cd
           and   BRANCH_cd=j.BRANCH_cd
           and   rownum =1;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
        		  vDeptCd :='';
              vOfficeCd :='';
        	end;
  
          if  pDemandDate <> vEnd then 
              
              select case when op.sf_getWeekday(pDemandDate) = '2' and mon_chk='1' then '1' 
                          when op.sf_getWeekday(pDemandDate) = '3' and tue_chk='1' then '1' 
                          when op.sf_getWeekday(pDemandDate) = '4' and wed_chk='1' then '1'
                          when op.sf_getWeekday(pDemandDate) = '5' and thu_chk='1' then '1'
                          when op.sf_getWeekday(pDemandDate) = '6' and fri_chk='1' then '1'
                     else '0' end 
              into vCheck 
              from op.t_fn_BRANCH_emart
              where org_cd = j.org_cd
              and   BRANCH_cd= j.BRANCH_cd;
          
              if vCheck = '1' then  --당일이 체크
               
                insert into op.t_fn_emart_demand_date
                (
                       BASE_DATE,
                       ORG_CD,
                       BRANCH_CD,
                       DEPT_CD,
                       OFFICE_CD,
                       START_DATE,
                       END_DATE,
                       UPDATE_DATE,
                       UPDATE_UID
                )
                values(
                       pDemandDate,
                       j.org_cd,
                       j.BRANCH_cd,
                       vDeptCd,
                       vOfficeCd,
                       vEnd,
                       pDemandDate,
                       sysdate,
                       'SYSTEM'
                );
                
              else
               if vEnd = '99999999' then
                  insert into op.t_fn_emart_demand_date
                      (
                             BASE_DATE,
                             ORG_CD,
                             BRANCH_CD,
                             DEPT_CD,
                             OFFICE_CD,
                             START_DATE,
                             END_DATE,
                             UPDATE_DATE,
                             UPDATE_UID
                      )
                      values(
                             pDemandDate,
                             j.org_cd,
                             j.BRANCH_cd,
                             vDeptCd,
                             vOfficeCd,
                             pDemandDate,
                             pDemandDate,
                             sysdate,
                             'SYSTEM'
                      );       
               else
                begin
                  FOR k IN  --check가 안된 경우에  사이에 .. 공휴일이 있는지..
                  (             
                       select std_date
                       from OP.t_fn_calendar 
                       where std_date between vEnd and op.sf_getBeforeDate(pDemandDate)
                       and   holiday_yn ='1' 
                   )
                   LOOP
                     if op.sf_getWeekday(k.std_date) not in ('1','7') then 
                        vHoliCnt := vHoliCnt +1;
                     end if;
                  END LOOP; 

                  if  vHoliCnt > 0 then 
                      insert into op.t_fn_emart_demand_date
                      (
                             BASE_DATE,
                             ORG_CD,
                             BRANCH_CD,
                             DEPT_CD,
                             OFFICE_CD,
                             START_DATE,
                             END_DATE,
                             UPDATE_DATE,
                             UPDATE_UID
                      )
                      values(
                             pDemandDate,
                             j.org_cd,
                             j.BRANCH_cd,
                             vDeptCd,
                             vOfficeCd,
                             vEnd,
                             pDemandDate,
                             sysdate,
                             'SYSTEM'
                      );                      
                  else 
                       insert into op.t_fn_emart_demand_date
                      (
                             BASE_DATE,
                             ORG_CD,
                             BRANCH_CD,
                             DEPT_CD,
                             OFFICE_CD,
                             START_DATE,
                             END_DATE,
                             UPDATE_DATE,
                             UPDATE_UID
                      )
                      values(
                             pDemandDate,
                             j.org_cd,
                             j.BRANCH_cd,
                             vDeptCd,
                             vOfficeCd,
                             vEnd,
                             vEnd,
                             sysdate,
                             'SYSTEM'
                      );       
                  end if;
                end;      
               end if;
                   
              end if;  
          
          
          end if;
  
     vStd  :='';
     vEnd  :='';  
     vCheck   :='';  
     vHoliCnt := 0;
     vDeptCd  :='';
     vOfficeCd  :='';        
                             
	END LOOP;
	
  commit;
  
	
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_DemandManager.sp_fn_emart_update', vResult, pDemandDate);

 END sp_fn_emart_update;
    
END pkg_fn_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_JjAtms_Demand AS


	/* 제주은행 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_Jj_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE close_date >= vPreActDate
				 and close_date <= vBeforeDate
         and org_cd ='035';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO op.t_fn_atms_collect (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   close_date,
				   before_cash_amt,
				   add_cash_amt,
				   add_cash_date,
				   collect_amt,
				   unattended_amt,
				   unattended_cnt,
				   report_yn,
				   office_nm,
				   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
				   update_date,
				   update_uid)
			select main.org_cd orgCd,--'97' orgCd, 
			       main.BRANCH_cd BRANCHCd,
			       main.site_cd siteCd,
			       main.mac_no macNo,
			       main.close_date closeDate,
			       main.pre_amt preAmt,
			       nvl(main.send_amt,0) plusSendAmt,
			       main.send_date plusSendDate,
			       main.close_amt collect_Amt,       
			       nvl(notEnd.notEndAmt,0) notEndAmt,
			       nvl(notEnd.notEndCnt,0) notEndCnt,
			       decode(notEnd.notEndCnt,null,'0','1') notEndYn,
			       substr2(off.office_nm,0,2) officeNm,
			       '0' orgSendYn,
             main.out_amt,
             main.in_amt,
             main.close_amt closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
			       SYSDATE,
			       'SYSTEM'
			from
			       (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='035') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='035'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
			              -- MAIN: 추가현송이면서 현송완료인것
				    (select notend.org_cd
				           ,notend.BRANCH_cd
				           ,notend.site_cd
				           ,notend.mac_no
				           ,notend.notEndCnt
				           ,notend.notEndAmt
				     from op.t_fn_close cls,
				         (select org_cd
				               ,BRANCH_cd
				               ,mac_no
				               ,site_cd
				               ,count(deal_amt) notEndCnt
				               ,sum(deal_amt) notEndAmt
				         from op.t_fn_notend
				         where notend_date >= vPreActDate
				         and notend_date <= vBeforeDate
				         and org_cd = '035'
				         and owner_org_cd <> '096'
				         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
				     where cls.close_date = vPreActDate
				     and cls.org_cd = '035'
				     and cls.differ_amt > 0
				     and cls.org_cd = notend.org_cd
				     and cls.BRANCH_cd = notend.BRANCH_cd
				     and cls.mac_no = notend.mac_no
				     and cls.site_cd = notend.site_cd) notEnd,
				     -- NOTEND: 과여금이 발생한 것
				    OP.t_cm_office off
				
				where main.org_cd = notEnd.org_cd(+)
				and main.BRANCH_cd = notEnd.BRANCH_cd(+)
				and main.site_cd = notEnd.site_cd(+)
				and main.mac_no = notEnd.mac_no(+)
				and main.dept_cd = off.dept_cd(+)
				and main.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_Demand.sp_createAtmsCollect', 
										   vResult, 
										   pDemandDate);

    END sp_jj_createAtmsCollect;
	
	/* 제주은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_jj_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_report
				 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='035';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_report (
           notend_date,  
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   trade_date,
				   serial_no,
				   unattended_amt,
				   trade_no,
				   trade_org,
				   account_no,
				   trade_type,
				   trade_amt,
				   finish_nm,
				   customer_nm,
				   tele_no,
				   office_nm,
				   memo,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
			      ,main.BRANCH_cd
			      ,main.site_cd
			      ,main.mac_no
			      ,main.deal_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
			      ,main.unattenedAmt
			      ,main.tran_no
			      ,main.bank_cd
			      ,main.account_no
			      ,main.deal_type
			      ,main.deal_amt
			      ,mem.member_nm
			      ,main.customer_nm
			      ,main.tele_no
			      ,substr2(off.office_nm,0,2) office_nm
			      ,main.memo
			      ,main.orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from
			    (select notend_date
                 ,org_cd
			          ,BRANCH_cd
			          ,site_cd
			          ,mac_no
			          ,deal_date
			          ,unique_no
			          ,deal_amt unattenedAmt
			          ,tran_no
			          ,bank_cd
			          ,account_no
			          ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
			          ,deal_amt
			          ,decode(update_uid,null,insert_uid,update_uid) user_id
			          ,'' customer_nm
			          ,'' tele_no
			          ,dept_cd
			          ,office_cd
			          ,'' memo
			          ,'0' orgSendYn
			    from op.t_fn_notend
			    where notend_date >= vPreActDate
			    and notend_date <= vBeforeDate
			    and org_cd = '035'
			    and owner_org_cd <> '096') main,
			    op.t_cm_member mem,
			    OP.t_cm_office off
			where main.user_id = mem.member_id(+)
			and main.dept_cd = off.dept_cd(+)
			and main.office_cd = off.office_cd(+)
			order by main.BRANCH_cd, main.mac_no;
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_Demand.sp_createAtmsReport', 
										   vResult, 
										   pDemandDate);

    END sp_jj_createAtmsReport;
	
	/* 제주은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_jj_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
                 and org_cd ='035';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
/*
			INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time)
			select send.org_cd org_cd --'97' org_cd --
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '03'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd(+)
			and send.office_cd = off.office_cd(+);
	*/
  INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time,
           close_yn,
           send_date
           )

--select * from OP.t_fn_atms_add_cash_report			
      
      select send.org_cd org_cd --'97' org_cd --
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
			from op.T_FN_SEND send
			    ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='035'
--           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date >= vPreActDate
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '035'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+);
      		
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_jj_createAtmsAddCashReport;
	



     PROCEDURE sp_jj_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    is

	  vPostPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과
   	eAlreadyExistsException  EXCEPTION;
        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD'); 
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
   				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostPostActDate --익일
                 and   org_cd ='035';
			
            -- 제주은행 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select sendPlan.org_cd org_cd --'97' org_cd
			      ,sendPlan.BRANCH_cd
			      ,sendPlan.site_cd
			      ,sendPlan.mac_no
			      ,sendPlan.send_date
			      ,0
			      ,decode(sendplan.last_send_type
	  		            , '1', sendplan.plan_send_amt					
		   		          , '2', sendplan.change_send_amt)	SendAmt	
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
			where sendPlan.send_date   = vPostPostActDate
			and   sendPlan.org_cd      = '035'
	       AND   sendPlan.confirm_yn  = '1'
			AND   sendPlan.cancel_type = '0' 
            and   sendPlan.dept_cd = off.dept_cd
			and   sendPlan.office_cd = off.office_cd;
			
			COMMIT;

		EXCEPTION
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_Demand.sp_jj_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_jj_createAtmsCashPlan;

	
	/* 기업은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_jjcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd ='035'; 
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )
-----------------------------------------------------------------------------------------
select main.org_cd org_cd --'97' org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
      			,TOTAL_BRANCH.STOCK_AMT   STOCK_AMT
			      ,substr2(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
            ,TOTAL_BRANCH_BEFORE.PRETOTALAMT /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,TOTAL_BRANCH.OPERAMT  pre_oper_amt
            ,TOTAL_BRANCH_BEFORE.DIFFERAMT pre_differ_amt  
            ,TOTAL_BRANCH.OUTAMT pre_out_amt
            ,TOTAL_BRANCH.INAMT  pre_in_amt

			from
			       (select org_cd
					      ,BRANCH_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from op.t_fn_pack_BRANCH
					where demand_date = pDemandDate
					and org_cd = '035'
					group by demand_date
					        ,org_cd
					        ,BRANCH_cd) main,
		 (
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='035'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     BRANCH_cd
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='035'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
	  where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd ;
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      and TOTAL_BRANCH.STOCK_AMT <> 0	  	; 20101125 hossong

------------------------------------------------------------------------------------------
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_jjcreateAtmsOperFundsDemand;
	
END pkg_fn_JjAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_JjAtms_DemandManager AS

    PROCEDURE sp_JjAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER								default 0,
		pToJobNo		IN		NUMBER								default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
		/* 제주은행 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_JjAtms_Demand.sp_jj_createAtmsCollect(pDemandDate,'1');
        END IF;

		/* 제주은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_JjAtms_Demand.sp_jj_createAtmsReport(pDemandDate,'1');
        END IF;

		/* 제주은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_JjAtms_Demand.sp_jj_createAtmsAddCashReport(pDemandDate,'1');
        END IF;

        /*제주은행 현송계획서 데이터 생성 */
  
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_JjAtms_Demand.sp_jj_createAtmsCashPlan(pDemandDate,'1');
        END IF;
  
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_JjAtms_Demand.sp_jjcreateAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
		
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_DemandManager.sp_JjAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_DemandManager.sp_JjAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_JjAtms_DemandManager.sp_JjAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_JjAtms_batchProcess;

END pkg_fn_JjAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KNAtms_Demand AS

    /* 경남은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_KNcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    )
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        if pIsDeleting is null or pIsDeleting = '' then
            pIsDeleting := '1';
        end if;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_DEMAND_MAC    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE demand_date = pDemandDate
         and   org_cd ='039';
                --DELETE op.T_FN_ATMS_DEMAND_MAC    --테이블 꼭 확인할것 잘못하면 X됨 /* 경남 ATMS 임시 운영 */
                -- WHERE demand_date = pDemandDate
        -- and   org_cd ='92';         
            ELSE
                RAISE eAlreadyExistsException;
            END IF;


      insert into  op.T_FN_ATMS_DEMAND_MAC
     (DEMAND_DATE,
      ORG_CD,
      BRANCH_CD,
      MAC_NO,
      POST_TRANS_AMT,
      PRE_ADD_TRANS_AMT,
      PRE_COLLECT_AMT,
      DIFFER_AMT,
      PRE_RESPECT_AMT,
      CUR_RESPECT_AMT,
      DEMAND_AMT,
      INSERT_UID,
      INSERT_DATE,
      UPDATE_UID,
      UPDATE_DATE,
      ORG_SEND_YN,
      TOTAL_STOCK_AMT,
      PRE_ADD_TRANS_CNT,
      REQUIR_START_DATE, REQUIR_END_DATE, REQUIR_TERM, pre_out_amt, pre_in_amt
      )
/*
      select demand_date,
             org_cd,
             BRANCH_cd,
             mac_no,
             post_sendplan_amt, --익영업일 현송액
             plus_send_amt, --전영업일추가현송액
             close_amt, --전일회수마감잔액
             differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
             post_sendplan_amt + plus_send_amt - close_amt - differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0--total_stock_Amt
      from op.t_fn_pack_report
      where demand_date =pDemandDate
      and   org_cd ='39'
      and   post_sendplan_amt + plus_send_amt + close_amt +
            (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) <> '0'
      --and   demand_amt <> '0'

  select   r.demand_date,
            r.org_cd,
            r.BRANCH_cd,
            r.mac_no,
            r.post_sendplan_amt, --익영업일 현송액
            r.plus_send_amt, --전영업일추가현송액
            r.close_amt, --전일회수마감잔액
            r.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
            r.post_sendplan_amt + r.plus_send_amt - r.close_amt - r.differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0--total_stock_Amt
      from op.t_fn_pack_report r,
           t_cm_mac m
      where r.demand_date =pDemandDate
      and   r.org_cd ='39'
      and   r.org_cd = m.org_cd
      and   r.BRANCH_cd = m.BRANCH_cd
      and   r.mac_no = m.mac_no
      and   m.open_date <= op.sf_getPreActDate(pDemandDate)
      and ( m.close_date is null OR m.close_date = '' OR m.close_date >= op.sf_getPreActDate(pDemandDate) ) 
*/


      select a.demand_date,
             a.org_cd,
             a.BRANCH_cd,
             a.mac_no,
             a.post_sendplan_amt, --익영업일 현송액
             a.plus_send_amt, --전영업일추가현송액
             a.close_amt, --전일회수마감잔액
             a.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
             post_sendplan_amt + plus_send_amt - close_amt - differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0,--total_stock_Amt
             nvl(b.add_cnt,0)
             ,OP.sf_getPostActDate(a.demand_Date) startdate
             ,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(a.demand_Date)) enddate
        --   ,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(a.demand_Date))-OP.sf_getPostActDate(a.demand_Date)+1 useday
             ,to_date(op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(a.demand_Date)),'yyyymmdd')-
              to_date(OP.sf_getPostActDate(a.demand_Date),'yyyymmdd')+1 useday
             ,a.out_amt, a.in_amt 
      from op.t_fn_pack_report a,
      (
           select 
                  --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no,
                 count(mac_no) add_cnt
            from op.T_FN_SEND      
            where send_status ='2'
            and   send_type ='2'
            and   send_date between op.sf_getPreActDate(pDemandDate) and  op.sf_getBeforeDate(pDemandDate)
            and   org_cd ='039'
            and  send_amt <> 0
          group by --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no
       ) b   
      where a.demand_date =pDemandDate
      and   a.org_cd ='039'
--      and   post_sendplan_amt + plus_send_amt + close_amt +
      and   (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) <> '0'
      and   a.org_cd = b.org_cd (+)
      and   a.BRANCH_cd= b.BRANCH_cd (+)
      and   a.mac_no= b.mac_no  (+)            
            
      union all
            
 select     --m.open_date,
            --m.close_date,
            r.demand_date,
            r.org_cd,
            r.BRANCH_cd,
            r.mac_no,
            r.post_sendplan_amt, --익영업일 현송액
            r.plus_send_amt, --전영업일추가현송액
            r.close_amt, --전일회수마감잔액
            r.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
            r.post_sendplan_amt + r.plus_send_amt - r.close_amt - r.differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0,--total_stock_Amt
             nvl(b.add_cnt,0)
             ,OP.sf_getPostActDate(r.demand_Date) startdate
             ,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(r.demand_Date)) enddate
             --,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(r.demand_Date))-OP.sf_getPostActDate(r.demand_Date)+1 useday
             ,to_date(op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(r.demand_Date)),'yyyymmdd')-
              to_date(OP.sf_getPostActDate(r.demand_Date),'yyyymmdd')+1 useday
             ,r.out_amt, r.in_amt 
      from op.t_fn_pack_report r,
           op.t_cm_mac m,
            (
           select 
                  --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no,
                 count(mac_no) add_cnt
            from op.T_FN_SEND      
            where send_status ='2'
            and   send_type ='2'
            and   send_date between op.sf_getPreActDate(pDemandDate) and  op.sf_getBeforeDate(pDemandDate)
            and   org_cd ='039'
            and  send_amt <> 0
          group by --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no
          ) b   
      where r.demand_date =pDemandDate
      and   r.org_cd ='039'
      and   r.org_cd = m.org_cd
      and   r.BRANCH_cd = m.BRANCH_cd
      and   r.mac_no = m.mac_no
--      and   post_sendplan_amt + plus_send_amt + close_amt +
      and  (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) = '0'
      and ( m.close_date is null OR m.close_date = '' OR m.close_date >= pDemandDate ) 
      and   r.org_cd = b.org_cd (+)
      and   r.BRANCH_cd= b.BRANCH_cd (+)
      and   r.mac_no= b.mac_no  (+)
             
      union all

      select master_data.demand_date,
             master_data.org_cd,
             '39999',
             '99',
             0,
             0,
             0,
             0,
             master_data.pre_respect_amt, --전잔
             master_data.cur_respect_amt, --말잔
             master_data.demand_amt - detail_data.total_demand,
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             total_stock.total_stock_amt,
             0
             ,OP.sf_getPostActDate(detail_data.demand_Date) startdate
             ,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(detail_data.demand_Date)) enddate
             --,op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(detail_data.demand_Date))-OP.sf_getPostActDate(detail_data.demand_Date)+1 useday
             ,to_date(op.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(detail_data.demand_Date)),'yyyymmdd')-
              to_date(OP.sf_getPostActDate(detail_data.demand_Date),'yyyymmdd')+1 useday
             ,0, 0
      from
        (
        select pd.org_cd,
               pd.demand_date,
               sum(pd.pre_respect_amt) pre_respect_amt, --전잔
               sum(pd.cur_respect_amt) cur_respect_amt, --말잔
               sum(pd.demand_amt) demand_amt
        from op.t_fn_pack_demand pd
        where pd.org_cd ='039'
        and   demand_date =pDemandDate
        group by pd.org_cd, pd.demand_date
        ) master_data,
        (
        select org_cd,
               demand_date,
               sum(
                    post_sendplan_amt + plus_send_amt - close_amt - differ_amt --당일청구금액
                  ) total_demand
        from op.t_fn_pack_report
        where demand_date =pDemandDate
        and   org_cd ='039'
        group by org_cd,demand_date
        ) detail_data,
        (
        select org_cd,
              close_date,
              sum(safe_amt+mac_amt) total_stock_amt
        from op.t_fn_pack_invent
        where org_cd ='039'
        and   close_date =op.sf_getPreActDate(pDemandDate)
        group by org_cd,
              close_date
        ) total_stock

       where master_data.org_cd = detail_data.org_cd
       and   master_data.demand_date = detail_data.demand_date
       and   master_data.org_cd = total_stock.org_cd;
--       and   master_data.demand_date = total_stock.close_date;


------------------------------------------------------------------------------------------
/* 경남 ATMS 임시 운영 */
/*
      insert into  op.T_FN_ATMS_DEMAND_MAC 

      select demand_date,
             '92',
             BRANCH_cd,
             mac_no,
             post_sendplan_amt, --익영업일 현송액
             plus_send_amt, --전영업일추가현송액
             close_amt, --전일회수마감잔액
             differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
             post_sendplan_amt + plus_send_amt - close_amt - differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0--total_stock_Amt
      from op.t_fn_pack_report
      where demand_date =pDemandDate
      and   org_cd ='39'
      and   post_sendplan_amt + plus_send_amt + close_amt +
            (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) <> '0'
            
            
      union all
            
 select     --m.open_date,
            --m.close_date,
            r.demand_date,
            '92',
            r.BRANCH_cd,
            r.mac_no,
            r.post_sendplan_amt, --익영업일 현송액
            r.plus_send_amt, --전영업일추가현송액
            r.close_amt, --전일회수마감잔액
            r.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
            r.post_sendplan_amt + r.plus_send_amt - r.close_amt - r.differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0--total_stock_Amt
      from op.t_fn_pack_report r,
           t_cm_mac m
      where r.demand_date =pDemandDate
      and   r.org_cd ='39'
      and   r.org_cd = m.org_cd
      and   r.BRANCH_cd = m.BRANCH_cd
      and   r.mac_no = m.mac_no
      and   post_sendplan_amt + plus_send_amt + close_amt +
            (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) = '0'
       and ( m.close_date is null OR m.close_date = '' OR m.close_date >= pDemandDate ) 
             
      union all

      select master_data.demand_date,
             '92',
             '999',
             '99',
             0,
             0,
             0,
             0,
             master_data.pre_respect_amt, --전잔
             master_data.cur_respect_amt, --말잔
             master_data.demand_amt - detail_data.total_demand,
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             total_stock.total_stock_amt
      from
        (
        select pd.org_cd,
               pd.demand_date,
               sum(pd.pre_respect_amt) pre_respect_amt, --전잔
               sum(pd.cur_respect_amt) cur_respect_amt, --말잔
               sum(pd.demand_amt) demand_amt
        from op.t_fn_pack_demand pd
        where pd.org_cd ='39'
        and   demand_date =pDemandDate
        group by pd.org_cd, pd.demand_date
        ) master_data,
        (
        select org_cd,
               demand_date,
               sum(
                    post_sendplan_amt + plus_send_amt - close_amt - differ_amt --당일청구금액
                  ) total_demand
        from op.t_fn_pack_report
        where demand_date =pDemandDate
        and   org_cd ='39'
        group by org_cd,demand_date
        ) detail_data,
        (
        select org_cd,
              close_date,
              sum(safe_amt+mac_amt) total_stock_amt
        from op.t_fn_pack_invent
        where org_cd ='39'
        and   close_date =op.sf_getPreActDate(pDemandDate)
        group by org_cd,
              close_date
        ) total_stock

       where master_data.org_cd = detail_data.org_cd
       and   master_data.demand_date = detail_data.demand_date
       and   master_data.org_cd = total_stock.org_cd;
--       and   master_data.demand_date = total_stock.close_date;

*/


            COMMIT;
      
        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_KNAtms_Demand.sp_KNcreateAtmsOperFundsDemand',
                                           vResult,
                                           pDemandDate);

    END sp_KNcreateAtmsOperFundsDemand;

/* 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_kn_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        if pIsDeleting is null or pIsDeleting = '' then
            pIsDeleting := '1';
        end if;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='039';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_report (
           notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '039'
                and owner_org_cd <> '096') main,
                op.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KuAtms_Demand.sp_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_kn_createAtmsReport;    
    
END pkg_fn_KNAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KNAtms_DemandManager AS

    PROCEDURE sp_KNAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KNAtms_Demand.sp_KNcreateAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
        
            /* 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KNAtms_Demand.sp_kn_createAtmsReport(pDemandDate,'1');
        END IF;

    
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_KNAtms_DemandManager.sp_KNAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KNAtms_DemandManager.sp_KNAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KNAtms_DemandManager.sp_KNAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_KNAtms_batchProcess;

END pkg_fn_KNAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KTISAtms_Demand AS

    /* 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_KTIS_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        if pIsDeleting is null or pIsDeleting = '' then
            pIsDeleting := '1';
        end if;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='0TR';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_report (
           notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr2(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '0TR'
                and owner_org_cd <> '096') main,
                op.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_KTIS_Atms_Demand.sp_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_KTIS_createAtmsReport;
    
    
    /* KTIS 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_KTcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        if pIsDeleting is null or pIsDeleting = '' then
            pIsDeleting := '1';
        end if;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
         and   org_cd ='0TR'; 
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   BRANCH_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
                   prepre_stock_amt,
                   pre_oper_amt,
                   pre_send_amt,
                   pre_out_amt,
                   pre_in_amt
           )
-----------------------------------------------------------------------------------------
select main.org_cd org_cd --'97' org_cd
                  ,'0002' as BRANCH_cd
                  ,main.demand_date
                  ,0 operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,main.oper_found
                  ,nvl(main.post_trans_amt, 0)
                  ,nvl(main.pre_add_trans_amt, 0)
                  ,nvl(main.pre_collect_amt, 0)
                  ,nvl(main.differ_amt, 0)
                  ,nvl(main.unset_before_amt, 0)
                  ,nvl(main.demand_amt, 0)
                  ,nvl(main.unset_amt, 0)
                  --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
                ,nvl(TOTAL_BRANCH.STOCK_AMT, 0)   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,main.update_date
                  ,main.update_uid
            ,nvl(TOTAL_BRANCH_SEND_BEFORE.PRETOTALAMT, 0) /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,nvl(TOTAL_BRANCH.OPERAMT, 0)  pre_oper_amt
            ,nvl(TOTAL_BRANCH_SEND_BEFORE.pre_send_amt, 0) pre_send_amt  
            ,nvl(TOTAL_BRANCH.OUTAMT, 0) pre_out_amt
            ,nvl(TOTAL_BRANCH.INAMT, 0)  pre_in_amt

            from
                   (select org_cd
                          ,demand_date
                          ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          ,sysdate update_date
                          ,'SYSTEM' update_uid
                    from op.t_fn_pack_demand
                    where demand_date = pDemandDate
                    and org_cd = '0TR'
                    group by demand_date
                            ,org_cd) main,
         (
          select 
             org_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt,
             sum(mac_amt) SUM_MACAMT,
             sum(safe_amt) SUM_SAFEAMT
          from 
            op.t_fn_pack_invent
          where
            org_cd='0TR'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd
          ) total_BRANCH,
          /*
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='0TR'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before,
          */
          (
          -- total_BRANCH_before
          select 
             org_cd,             
             sum(mac_amt + safe_amt - differ_amt) pretotalamt,
             sum(ord_send_amt) pre_send_amt
          from 
            op.t_fn_pack_invent
          where
            org_cd='0TR'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd          
          ) total_BRANCH_send_before         
         
      where main.org_cd   = total_BRANCH.org_cd(+)
      and main.org_cd   = total_BRANCH_send_before.org_cd(+)
      and main.oper_found||post_trans_amt||pre_add_trans_amt||pre_collect_amt||unset_before_amt||demand_amt||unset_amt <> '0000000';  -- 20121210 정희성수정

--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      AND (SUM_MACAMT <> 0 OR SUM_SAFEAMT <> 0);
      --and TOTAL_BRANCH.STOCK_AMT <> 0     ;

------------------------------------------------------------------------------------------
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_KTISAtms_Demand.sp_createAtmsOperFundsDemand', 
                                           vResult, 
                                           pDemandDate);

    END sp_KTcreateAtmsOperFundsDemand;
    
END pkg_fn_KTISAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KTISAtms_DemandManager AS

    PROCEDURE sp_KTISAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KTISAtms_Demand.sp_KTcreateAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
        
        
        /* 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KTISAtms_Demand.sp_KTIS_createAtmsReport(pDemandDate,'1');
        END IF;
    
    
      
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_KTISAtms_DemandManager.sp_KTISAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KTISAtms_DemandManager.sp_KTISAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KTISAtms_DemandManager.sp_KTISAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_KTISAtms_batchProcess;

END pkg_fn_KTISAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KebAtms_Demand AS


	/* 외환 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_keb_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then 
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE close_date >= vPreActDate
				 and close_date <= vBeforeDate
         and org_cd ='005';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO op.t_fn_atms_collect (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   close_date,
				   before_cash_amt,
				   add_cash_amt,
				   add_cash_date,
				   collect_amt,
				   unattended_amt,
				   unattended_cnt,
				   report_yn,
				   office_nm,
				   org_send_yn,
           out_amt,
           in_amt,
				   update_date,
				   update_uid)
			select main.org_cd orgCd,
			       main.BRANCH_cd BRANCHCd,
			       main.site_cd siteCd,
			       main.mac_no macNo,
			       main.close_date closeDate,
			       main.pre_amt preAmt,
			       nvl(main.send_amt,0) plusSendAmt,
			       main.send_date plusSendDate,
			       main.close_amt closeAmt,       
			       nvl(notEnd.notEndAmt,0) notEndAmt,
			       nvl(notEnd.notEndCnt,0) notEndCnt,
			       decode(notEnd.notEndCnt,null,'0','1') notEndYn,
			       substr(off.office_nm,0,2) officeNm,
			       '0' orgSendYn,
             main.out_amt,
             main.in_amt,
			       SYSDATE,
			       'SYSTEM'
			from
			       (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='005') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='005'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
			              -- MAIN: 추가현송이면서 현송완료인것
				    (select notend.org_cd
				           ,notend.BRANCH_cd
				           ,notend.site_cd
				           ,notend.mac_no
				           ,notend.notEndCnt
				           ,notend.notEndAmt
				     from op.t_fn_close cls,
				         (select org_cd
				               ,BRANCH_cd
				               ,mac_no
				               ,site_cd
				               ,count(deal_amt) notEndCnt
				               ,sum(deal_amt) notEndAmt
				         from op.t_fn_notend
				         where notend_date >= vPreActDate
				         and notend_date <= vBeforeDate
				         and org_cd = '005'
				         and owner_org_cd <> '096'
				         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
				     where cls.close_date = vPreActDate
				     and cls.org_cd = '005'
				     and cls.differ_amt > 0
				     and cls.org_cd = notend.org_cd
				     and cls.BRANCH_cd = notend.BRANCH_cd
				     and cls.mac_no = notend.mac_no
				     and cls.site_cd = notend.site_cd) notEnd,
				     -- NOTEND: 과여금이 발생한 것
				    OP.t_cm_office off
				
				where main.org_cd = notEnd.org_cd(+)
				and main.BRANCH_cd = notEnd.BRANCH_cd(+)
				and main.site_cd = notEnd.site_cd(+)
				and main.mac_no = notEnd.mac_no(+)
				and main.dept_cd = off.dept_cd(+)
				and main.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_createAtmsCollect', 
										   vResult, 
										   pDemandDate);

    END sp_keb_createAtmsCollect;
	
	/* 외환은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_keb_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_report
				 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='005';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_report (
           notend_date,
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   trade_date,
				   serial_no,
				   unattended_amt,
				   trade_no,
				   trade_org,
				   account_no,
				   trade_type,
				   trade_amt,
				   finish_nm,
				   customer_nm,
				   tele_no,
				   office_nm,
				   memo,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.notend_date 
            ,main.org_cd org_cd
			      ,main.BRANCH_cd
			      ,main.site_cd
			      ,main.mac_no
			      ,main.deal_date
			      --,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
            --,decode(length(rownum),1,'0'||rownum,rownum) unique_no                        
            --,substr(decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum),2,3) unique_no
            ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
			      ,main.unattenedAmt
			      ,main.tran_no
			      ,main.bank_cd
			      ,main.account_no
			      ,main.deal_type
			      ,main.deal_amt
			      ,mem.member_nm
			      ,main.customer_nm
			      ,main.tele_no
			      ,substr(off.office_nm,0,2) office_nm
			      ,main.memo
			      ,main.orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from
			    (select notend_date
                ,org_cd
			          ,BRANCH_cd
			          ,site_cd
			          ,mac_no
			          ,deal_date
			          ,unique_no
			          ,deal_amt unattenedAmt
			          ,tran_no
			          ,bank_cd
			          ,account_no
			          ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
			          ,deal_amt
			          ,decode(update_uid,null,insert_uid,update_uid) user_id
			          ,'' customer_nm
			          ,'' tele_no
			          ,dept_cd
			          ,office_cd
			          ,'' memo
			          ,'0' orgSendYn
			    from op.t_fn_notend
			    where notend_date >= vPreActDate
			    and notend_date <= vBeforeDate
			    and org_cd = '005'
			    and owner_org_cd <> '096') main,
			    op.t_cm_member mem,
			    OP.t_cm_office off
			where main.user_id = mem.member_id(+)
			and main.dept_cd = off.dept_cd(+)
			and main.office_cd = off.office_cd(+)
			order by main.BRANCH_cd, main.mac_no;
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_Demand.sp_createAtmsReport', 
										   vResult, 
										   pDemandDate);

    END sp_keb_createAtmsReport;
	
	/* 외환 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_keb_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then 
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
         and org_cd ='005';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time)
			select send.org_cd org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '005'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd(+)
			and send.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_keb_createAtmsAddCashReport;
	
	/* 외환 현송계획서 데이터 생성 */
    PROCEDURE sp_keb_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
--		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        vPostActDate op.t_fn_close.close_date%TYPE	:= op.sf_getAfterDate(pDemandDate); --익일

        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostActDate --익일
         and   org_cd ='005';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
			
            -- 외환 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select send.org_cd org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,send.send_amt
			      ,send.send_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date = vPostActDate
			and send.org_cd = '005'
			and send.send_type = '1' --정규현송
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd;
			
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_Demand.sp_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_keb_createAtmsCashPlan;
	
	/* 외환 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_kebcreAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd ='005'; 
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid)
  /*         
			select main.org_cd org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      ,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
			      ,substr(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
			from
		     (

         select org_cd
					      ,BRANCH_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD')
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,0 unset_before_amt
					      ,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,0 unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from t_fn_pack_ofcjjm
					where demand_date = pDemandDate
					and org_cd = '05'
					group by demand_date
					        ,org_cd
					        ,BRANCH_cd) main,
					
					(select org_cd    -- 당일 현송금액 가져오기
					       ,BRANCH_cd
					       ,sum(send_amt) send_amt
					 from op.T_FN_SEND
					 where send_date = pDemandDate
					 and org_cd = '05'
					 and send_type = '1'
					 group by org_cd, BRANCH_cd) send
			where main.org_cd = send.org_cd(+)
			and main.BRANCH_cd = send.BRANCH_cd(+)
			and   length(main.BRANCH_cd) <> 3 -- 삭제 지점		
      
					union
*/
			select main.org_cd org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'ZZ' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      ,nvl(invent.safe_amt,0) stock_amt
			      ,main.office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
			from
					    (select org_cd
					          ,'9999' BRANCH_cd
					          ,demand_date
					          ,vPostActDate PostActDate
					          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					           to_date(vPostActDate,'YYYYMMDD')
					           requir_term
					          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					          ,sum(post_trans_amt) post_trans_amt
					          ,sum(pre_add_trans_amt) pre_add_trans_amt
					          ,sum(pre_collect_amt) pre_collect_amt
					          ,sum(differ_amt) differ_amt
					          ,sum(pre_respect_amt) unset_before_amt
					          ,sum(demand_amt) demand_amt
					          ,sum(cur_respect_amt) unset_amt
					          ,'' office_nm
					          ,'0' orgSendYn
					          ,sysdate update_date
					          ,'SYSTEM' update_uid
					    from op.t_fn_pack_demand
					    where demand_date = pDemandDate
					    and org_cd = '005'
					    group by demand_date,org_cd) main,
					    
					    (select org_cd
					          ,sum(safe_amt) safe_amt
					    from op.t_fn_pack_invent
					    where close_date = vPreActDate
					    and org_cd = '005'
					    group by org_cd) invent
					
			where main.org_cd = invent.org_cd(+)
			and   length(main.BRANCH_cd) <> 3 ;-- 삭제 지점					
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_kebcreAtmsOperFundsDemand;
	
END pkg_fn_KebAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_KebAtms_DemandManager AS

    PROCEDURE sp_KebAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER								default 0,
		pToJobNo		IN		NUMBER								default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
		/* 외환 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KebAtms_Demand.sp_keb_createAtmsCollect(pDemandDate,'1');
        END IF;

		/* 외환 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KebAtms_Demand.sp_keb_createAtmsReport(pDemandDate,'1');
        END IF;

		/* 외환 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KebAtms_Demand.sp_keb_createAtmsAddCashReport(pDemandDate,'1');
        END IF;

        /* 외환 현송계획서 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KebAtms_Demand.sp_keb_createAtmsCashPlan(pDemandDate,'1');
        END IF;

        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KebAtms_Demand.sp_kebcreAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
		
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_DemandManager.sp_KebAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_DemandManager.sp_KebAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KebAtms_DemandManager.sp_KebAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_KebAtms_batchProcess;

END pkg_fn_KebAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_MoneyReceipt AS

    /* 파출수납업체 자금 집계 */
    PROCEDURE sp_summaryCarry (
        pDemandDate     IN      op.t_fn_oper_give.oper_date%TYPE
    )
    IS

        vResult     op.t_cm_batch_result.pgm_result%TYPE := 'OK';

    BEGIN
        DELETE op.t_fn_oper_give
         WHERE oper_date = pDemandDate;
         
        BEGIN
            INSERT INTO op.t_fn_oper_give (
                   oper_date,
                   dept_cd,
                   office_cd,
                   org_cd,
                   oper_amt,
                   insert_uid,
                   insert_date,
                   update_uid,
                   update_date)
            SELECT pDemandDate,
                   cmr.dept_cd,
                   cmr.office_cd,
                   com.small_cd,
                   sum(car.cash_amt),
                   'SYSTEM',
                   SYSDATE,
                   'SYSTEM',
                   SYSDATE
              FROM op.t_fn_carry car,
                   op.t_fn_carry_master cmr,
                   op.t_cm_common com
             WHERE carry_date   BETWEEN op.sf_getAfterPreActDate(pDemandDate)  -- 전영업일 익일부터 청구일까지...
                                    AND pDemandDate
               AND car.carry_group_cd = cmr.carry_group_cd
               AND car.carry_org_cd   = cmr.carry_org_cd
               AND com.large_cd       = '5203'
               AND com.cd_nm2 = cmr.carry_group_cd
               and car.carry_group_cd <> '10' -- 국민정사제외 hossong 20120625 
          GROUP BY cmr.dept_cd,
                   cmr.office_cd,
                   com.small_cd;


     INSERT INTO op.t_fn_oper_give (
                   oper_date,
                   dept_cd,
                   office_cd,
                   org_cd,
                   oper_amt,
                   insert_uid,
                   insert_date,
                   update_uid,
                   update_date)

            select cash_date,
                  dept_cd,
                  office_cd,
                  '50',
                  fix_amt,
                  'SYSTEM',
                  SYSDATE,
                  'SYSTEM',
                  SYSDATE
                  
           from op.t_fn_ubcash
           where cash_date =pDemandDate ;

                   
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_MoneyReceipt.sp_summaryCarry', vResult, pDemandDate);

    END sp_summaryCarry;


    /* 사무소별 현금수령 자료 생성 */
    PROCEDURE sp_createOfficeReceipt (
        pDemandDate     IN      op.t_fn_oper_give.oper_date%TYPE
    )
    IS
        /* 사무소별 운영자금과 한국은행+파출수납금액의 차액 계산 */
        CURSOR vOperCur IS
            SELECT opr.dept_cd,
                   opr.office_cd,
                   opr.sumAmt,
                   ogv.curAmt
              FROM (SELECT dept_cd,
                           office_cd,
                           NVL(SUM(oper_amt), 0) sumAmt
                      FROM op.t_fn_oper opr
                     WHERE oper_date = pDemandDate
                  GROUP BY dept_cd,
                          office_cd) opr,
                   (SELECT dept_cd,
                           office_cd,
                           NVL(SUM(oper_amt), 0) curAmt
                      FROM op.t_fn_oper_give 
                     WHERE oper_date = pDemandDate
                  GROUP BY dept_cd,
                           office_cd) ogv
             WHERE opr.dept_cd   = ogv.dept_cd   (+)
               AND opr.office_cd = ogv.office_cd (+)
               AND opr.sumAmt    > NVL(ogv.curAmt, 0);
                           
        cReceiptUnit CONSTANT NUMBER(8)               := 10000000;      /* 자금수령 단위(천만원) */
        vResult     op.t_cm_batch_result.pgm_result%TYPE := 'OK';
             
    BEGIN
        BEGIN
            /* 계좌이체 사무소 및 한국은행 수령금액 생성 */
            INSERT INTO op.t_fn_oper_give (
                   oper_date,
                   dept_cd,
                   office_cd,
                   org_cd,
                   oper_amt,
                   insert_uid,
                   insert_date,
                   update_uid,
                   update_date)
            SELECT pDemandDate,
                   opr.dept_cd,
                   opr.office_cd,
                   ofc.recv_org_cd,
                   DECODE(ofc.recv_org_cd, 
                          '99', opr.oper_amt - NVL(crr.carry_amt, 0),
                                FLOOR((opr.oper_amt - NVL(crr.carry_amt, 0)) / cReceiptUnit) * cReceiptUnit),
                   'SYSTEM',
                   SYSDATE,
                   'SYSTEM',
                   SYSDATE
              FROM (SELECT dept_cd,
                           office_cd,
                           SUM(oper_amt) oper_amt
                      FROM op.t_fn_oper 
                     WHERE oper_date = pDemandDate
                  GROUP BY dept_cd,
                           office_cd) opr,
                   (SELECT dept_cd,
                           office_cd,
                           SUM(oper_amt) carry_amt
                      FROM op.t_fn_oper_give ogv
                           --t_cm_common com 
                     WHERE ogv.oper_date = pDemandDate
                       --AND ogv.org_cd    = com.small_cd
                       --AND com.large_cd  = '5203'
                       --AND com.cd_nm1    = '5105'
                  GROUP BY dept_cd,
                           office_cd) crr,
                   op.t_cm_office ofc
             WHERE opr.dept_cd   = ofc.dept_cd
               AND opr.office_cd = ofc.office_cd
               AND ofc.dept_cd   = crr.dept_cd   (+)
               AND ofc.office_cd = crr.office_cd (+);
            
            /* 한국은행 자금수령 단위 이하 금액 계좌이체금액 가산 */
            FOR vRec IN vOpercur LOOP

                UPDATE op.t_fn_oper_give
                   SET oper_amt    = oper_amt + vRec.sumAmt - vRec.curAmt,
                       update_date = SYSDATE
                 WHERE oper_date   = pDemandDate
                   AND dept_cd     = vRec.dept_cd
                   AND office_cd   = vRec.office_cd
                   AND org_cd      = '099';
                   
                IF SQL%NOTFOUND THEN
                    INSERT INTO op.t_fn_oper_give (
                        oper_date,
                        dept_cd,
                        office_cd,
                        org_cd,
                        oper_amt,
                        insert_uid,
                        insert_date,
                        update_uid,
                        update_date)
                    VALUES (
                        pDemandDate,
                        vRec.dept_cd,
                        vRec.office_cd,
                        '99',
                        vRec.sumAmt - vRec.curAmt,
                        'SYSTEM',
                        SYSDATE,
                        'SYSTEM',
                        SYSDATE);
                END IF;
            
            END LOOP;
            
            COMMIT;

        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;
        
        op.pkg_fn_common.SP_CREATEBATCHRESULT('pkg_fn_MoneyReceipt.sp_createOfficeReceipt', vResult, pDemandDate);
    
    END sp_createOfficeReceipt;

END pkg_fn_MoneyReceipt;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_NhAtms_Demand AS


    /* 농협은행 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_Nh_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE close_date >= vPreActDate
                 and close_date <= vBeforeDate
         and org_cd ='011';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO op.t_fn_atms_collect (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   close_date,
                   before_cash_amt,
                   add_cash_amt,
                   add_cash_date,
                   collect_amt,
                   unattended_amt,
                   unattended_cnt,
                   report_yn,
                   office_nm,
                   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
                   update_date,
                   update_uid)
            select main.org_cd orgCd,--'97' orgCd, 
                   main.BRANCH_cd BRANCHCd,
                   main.site_cd siteCd,
                   main.mac_no macNo,
                   main.close_date closeDate,
                   main.pre_amt preAmt,
                   nvl(main.send_amt,0) plusSendAmt,
                   main.send_date plusSendDate,
                   main.close_amt collect_Amt,       
                   nvl(notEnd.notEndAmt,0) notEndAmt,
                   nvl(notEnd.notEndCnt,0) notEndCnt,
                   decode(notEnd.notEndCnt,null,'0','1') notEndYn,
                   substr2(off.office_nm,0,2) officeNm,
                   '0' orgSendYn,
             main.out_amt,
             main.in_amt,
             main.close_amt closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
                   SYSDATE,
                   'SYSTEM'
            from
                   (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='011') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='003'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
                          -- MAIN: 추가현송이면서 현송완료인것
                    (select notend.org_cd
                           ,notend.BRANCH_cd
                           ,notend.site_cd
                           ,notend.mac_no
                           ,notend.notEndCnt
                           ,notend.notEndAmt
                     from op.t_fn_close cls,
                         (select org_cd
                               ,BRANCH_cd
                               ,mac_no
                               ,site_cd
                               ,count(deal_amt) notEndCnt
                               ,sum(deal_amt) notEndAmt
                         from op.t_fn_notend
                         where notend_date >= vPreActDate
                         and notend_date <= vBeforeDate
                         and org_cd = '011'
                         and owner_org_cd <> '096'
                         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
                     where cls.close_date = vPreActDate
                     and cls.org_cd = '011'
                     and cls.differ_amt > 0
                     and cls.org_cd = notend.org_cd
                     and cls.BRANCH_cd = notend.BRANCH_cd
                     and cls.mac_no = notend.mac_no
                     and cls.site_cd = notend.site_cd) notEnd,
                     -- NOTEND: 과여금이 발생한 것
                    OP.t_cm_office off
                
                where main.org_cd = notEnd.org_cd(+)
                and main.BRANCH_cd = notEnd.BRANCH_cd(+)
                and main.site_cd = notEnd.site_cd(+)
                and main.mac_no = notEnd.mac_no(+)
                and main.dept_cd = off.dept_cd(+)
                and main.office_cd = off.office_cd(+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_createAtmsCollect', 
                                           vResult, 
                                           pDemandDate);

    END sp_nh_createAtmsCollect;
    
    /* 농협은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_nh_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='011';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_report (
           notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr2(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '011'
                and owner_org_cd <> '096') main,
                op.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_nh_createAtmsReport;
    
    /* 농협은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_nh_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE add_date >= vPreActDate
                 AND add_date <= vBeforeDate
         and org_cd ='011';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
/*
            INSERT INTO OP.t_fn_atms_add_cash_report (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           add_time)
            select send.org_cd org_cd --'97' org_cd --
                  ,send.BRANCH_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                  ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                  ,send.send_amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.send_time
            from op.T_FN_SEND send
                ,OP.t_cm_office off
            where send.send_date >= vPreActDate
            and send.send_date <= vBeforeDate
            and send.org_cd = '03'
            and send.send_type = '2'
            and send.send_status = '2'
            and send.dept_cd = off.dept_cd(+)
            and send.office_cd = off.office_cd(+);
    
  INSERT INTO OP.t_fn_atms_add_cash_report (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                   add_10000_amt,                      
                   add_50000_amt,           
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           add_time,
           close_yn,
           send_date
           )

--select * from OP.t_fn_atms_add_cash_report            
      
      select send.org_cd org_cd --'97' org_cd --
                  ,send.BRANCH_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                  ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                  ,send.send_amt 
            ,sd.cash_10000_amt
            ,sd.cash_50000_amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
            from op.T_FN_SEND send
          ,op.T_FN_SEND_detail sd
                ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='011'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

            where send.send_date >= vPreActDate
            and send.send_date <= vBeforeDate
            and send.org_cd = '011'
            and send.send_type = '2'
            and send.send_status = '2'
            and send.dept_cd = off.dept_cd
            and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+)
      and send.send_date = sd.send_date
      and send.org_cd = sd.org_cd
      and send.BRANCH_cd = sd.BRANCH_cd
      and send.mac_no = sd.mac_no
      and send.insert_time = sd.insert_time
      and send.send_type = sd.send_type;        

*/


  INSERT INTO OP.t_fn_atms_add_cash_report (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                add_cw54_amt,            ---- 순서변경 정희성
                   add_cw14_amt,                      
--                     add_50000_amt,           
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
             add_time,
             close_yn,
             send_date
             )
  
  select a.org_cd,
         a.BRANCH_cd,
         a.site_cd,
         a.mac_no,
         a.add_date,
         decode(length(varchar(a.serial_no)),1,'00'||a.serial_no,2,'0'||a.serial_no,a.serial_no) serial_no ,
         pDemandDate demand_date,
         a.add_cash_amt,
         a.add_cw54_amt * 50000 add_50000_amt,
         a.add_cw14_amt * 10000 add_10000_amt,
         substr2(b.office_nm,1,2) office,
         '0',--a.org_send_yn,
         sysdate,
         'SYSTEM',
         A.add_time,
         a.close_yn,
         '' send_date      
  from op.T_FN_ATMS_ADD_NH_REPORT a,
       OP.t_cm_office b
  
  where a.add_date >= vPreActDate
  and   a.add_date <= vBeforeDate
  and   a.dept_cd = b.Dept_cd
  and   a.office_cd = b.office_cd ;

           

            COMMIT;
        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_createAtmsAddCashReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_nh_createAtmsAddCashReport;
    
    /* 농협은행 현송계획서 데이터 생성 */            
                --20080908 아침에 풀고 20080910 아침에 막기~

   PROCEDURE sp_nh_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    is

      vPostPostActDate op.t_fn_close.close_date%TYPE    := OP.sf_getPostActDate(pDemandDate); --익영업일
        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과
    eAlreadyExistsException  EXCEPTION;
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
    
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
                DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE cash_date = vPostPostActDate --익일
         and   org_cd ='011';
            
            -- 농협은행 현송계획 데이터 생성
            INSERT INTO op.t_fn_atms_cash_plan (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   cash_date,
                   cash_amt,
                   confirm_cash_amt,
           org_cash_amt,
                   office_nm,
                   org_send_confirm_yn,
                   update_date,
                   update_uid)
      /*     
            select sendPlan.org_cd org_cd --'97' org_cd
                  ,sendPlan.BRANCH_cd
                  ,sendPlan.site_cd
                  ,sendPlan.mac_no
                  ,sendPlan.send_date
                  ,0
                  ,decode(sendplan.last_send_type
                        , '1', sendplan.plan_send_amt                   
                          , '2', sendplan.change_send_amt)  SendAmt 
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'2' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
            where sendPlan.send_date   = vPostPostActDate
            and   sendPlan.org_cd      = '011'
           AND   sendPlan.confirm_yn  = '1'
            AND   sendPlan.cancel_type = '0' 
            and   sendPlan.dept_cd = off.dept_cd
            and   sendPlan.office_cd = off.office_cd;
        */
        
     select distinct send.org_cd org_cd --'97' org_cd
                  ,send.BRANCH_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,send.send_amt SendAmt
                  ,send.send_amt - sd.cw54_amt  send10000Amt    
                  ,sd.cw54_amt  send50000Amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn --농협만
                  ,sysdate
                  ,'SYSTEM'
            from op.T_FN_SEND send
           , op.T_FN_SEND_detail sd
           ,OP.t_cm_office off 
            where send.send_date   = vPostPostActDate
            and   send.org_cd      = '011'
        AND   send.send_type = '1'
            --AND   sendPlan.cancel_type = '0' 
      and   send.dept_cd = off.dept_cd
            and   send.office_cd = off.office_cd
      and send.send_date = sd.send_date
      and send.org_cd = sd.org_cd
      and send.BRANCH_cd = sd.BRANCH_cd
      and send.mac_no = sd.mac_no
      and send.insert_time = sd.insert_time
      and send.send_type = sd.send_type;
      
            COMMIT;

        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_nh_createAtmsCashPlan', 
                                           vResult, 
                                           pDemandDate);

    END sp_nh_createAtmsCashPlan;

    
    /* 농협은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_nhcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
         and   org_cd ='011'; 
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

        
      
-----------------------------------------------------------------------------------------
INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   BRANCH_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )

select      main.org_cd org_cd --'97' org_cd
                  ,'000000' BRANCH_cd
                  ,main.demand_date
            ,'' operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,sum(main.oper_found)
                  ,sum(main.post_trans_amt)
                  ,sum(main.pre_add_trans_amt)
                  ,sum(main.pre_collect_amt)
                  ,sum(main.differ_amt)
                  ,sum(main.unset_before_amt)
                  ,sum(main.demand_amt)
                  ,sum(main.unset_amt)
                ,sum(TOTAL_BRANCH.STOCK_AMT)   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,sysdate update_date
                      ,'SYSTEM' update_uid
            ,sum(TOTAL_BRANCH_BEFORE.PRETOTALAMT) 
            ,sum(TOTAL_BRANCH.OPERAMT)  pre_oper_amt
            ,sum(TOTAL_BRANCH_BEFORE.DIFFERAMT) pre_differ_amt  
            ,sum(TOTAL_BRANCH.OUTAMT) pre_out_amt
            ,sum(TOTAL_BRANCH.INAMT)  pre_in_amt

            from
                   (select org_cd
                          ,demand_date
                         ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          
                    from op.t_fn_pack_demand
                    where demand_date = pDemandDate
                    and org_cd = '011'
                    group by demand_date
                            ,org_cd) main,
         (
          select 
             org_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='011'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd                    
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='011'
           and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd
          ) total_BRANCH_before         
         
      where main.org_cd   = total_BRANCH.org_cd
      and main.org_cd   = total_BRANCH_before.org_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      and TOTAL_BRANCH.STOCK_AMT <> 0     
      
      
group by    main.org_cd
                  ,main.demand_date
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,substr2(main.office_nm,0,2)
                  ,main.orgSendYn;


-----------------------------------------------------------------------------------------
/*
INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   BRANCH_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )

select      main.org_cd org_cd --'97' org_cd
                  ,'000000' BRANCH_cd
                  ,main.demand_date
            ,'' operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,sum(main.oper_found)
                  ,sum(main.post_trans_amt)
                  ,sum(main.pre_add_trans_amt)
                  ,sum(main.pre_collect_amt)
                  ,sum(main.differ_amt)
                  ,sum(main.unset_before_amt)
                  ,sum(main.demand_amt)
                  ,sum(main.unset_amt)
                ,sum(TOTAL_BRANCH.STOCK_AMT)   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,sysdate update_date
                      ,'SYSTEM' update_uid
            ,sum(TOTAL_BRANCH_BEFORE.PRETOTALAMT) 
            ,sum(TOTAL_BRANCH.OPERAMT)  pre_oper_amt
            ,sum(TOTAL_BRANCH_BEFORE.DIFFERAMT) pre_differ_amt  
            ,sum(TOTAL_BRANCH.OUTAMT) pre_out_amt
            ,sum(TOTAL_BRANCH.INAMT)  pre_in_amt

            from
                   (select org_cd
                          ,BRANCH_cd
                          ,demand_date
                         ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          
                    from t_fn_pack_BRANCH
                    where demand_date = pDemandDate
                    and org_cd = '011'
                    group by demand_date
                            ,org_cd
                            ,BRANCH_cd) main,
         (
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     BRANCH_cd
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
           and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
      where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
      and TOTAL_BRANCH.STOCK_AMT <> 0       
      
      
group by    main.org_cd
                  ,main.demand_date
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,substr2(main.office_nm,0,2)
                  ,main.orgSendYn;

*/


/*
select main.org_cd org_cd --'97' org_cd
                  ,main.BRANCH_cd
                  ,main.demand_date
                  ,'' operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,main.oper_found
                  ,main.post_trans_amt
                  ,main.pre_add_trans_amt
                  ,main.pre_collect_amt
                  ,main.differ_amt
                  ,main.unset_before_amt
                  ,main.demand_amt
                  ,main.unset_amt
                  --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
                ,TOTAL_BRANCH.STOCK_AMT   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,main.update_date
                  ,main.update_uid
            ,TOTAL_BRANCH_BEFORE.PRETOTALAMT 
            ,TOTAL_BRANCH.OPERAMT  pre_oper_amt
            ,TOTAL_BRANCH_BEFORE.DIFFERAMT pre_differ_amt  
            ,TOTAL_BRANCH.OUTAMT pre_out_amt
            ,TOTAL_BRANCH.INAMT  pre_in_amt

            from
                   (select org_cd
                          ,BRANCH_cd
                          ,demand_date
                          ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          ,sysdate update_date
                          ,'SYSTEM' update_uid
                    from t_fn_pack_BRANCH
                    where demand_date = pDemandDate
                    and org_cd = '011'
                    group by demand_date
                            ,org_cd
                            ,BRANCH_cd) main,
         (
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd,
                     BRANCH_cd
          ) total_BRANCH,
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='011'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before         
         
      where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
      and TOTAL_BRANCH.STOCK_AMT <> 0       ;
*/
      

------------------------------------------------------------------------------------------
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_Demand.sp_createAtmsOperFundsDemand', 
                                           vResult, 
                                           pDemandDate);

    END sp_nhcreateAtmsOperFundsDemand;
    
END pkg_fn_NhAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_NhAtms_DemandManager AS

    PROCEDURE sp_NhAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        if pFromJobNo = null then
            pFromJobNo := 0;
        end if;
        
        if pToJobNo = null then
            pToJobNo := 9999999;
        end if;
        
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 기업은행 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_NhAtms_Demand.sp_nh_createAtmsCollect(pDemandDate);
        END IF;

        /* 기업은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_NhAtms_Demand.sp_nh_createAtmsReport(pDemandDate);
        END IF;

        /* 기업은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_NhAtms_Demand.sp_nh_createAtmsAddCashReport(pDemandDate,'1');
        END IF;

        /*기업은행 현송계획서 데이터 생성 */
  --20080908 아침에 풀고 20080910 아침에 막기~

        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_NhAtms_Demand.sp_nh_createAtmsCashPlan(pDemandDate,'1');
        END IF;

        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_NhAtms_Demand.sp_nhcreateAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_DemandManager.sp_NhAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_DemandManager.sp_NhAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_NhAtms_DemandManager.sp_NhAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_NhAtms_batchProcess;

END pkg_fn_NhAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_NiceMonthly AS

    /* Nice 일자금 기초데이타 및 사무소 분담률 생성 */
    PROCEDURE sp_createMonthlyData (
        pStdDate        IN      op.t_fn_nice_share_rate.start_date%TYPE,
        pStartDate      IN      op.t_fn_nice_share_rate.start_date%TYPE,
        pEndDate        IN      op.t_fn_nice_share_rate.end_date%TYPE,
        pUserId         IN      op.t_fn_nice_share_rate.insert_uid%TYPE,
        vResult         OUT     VARCHAR
    )
    IS
    BEGIN
         op.PKG_FN_NICEDEMAND.SP_CREATEMONTHLYDATA(pStdDate, pStartDate, pEndDate, pUserId, vResult);
    END sp_createMonthlyData;
END pkg_fn_NiceMonthly;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_SMAtms_Demand AS

    /* 경남은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_SMcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    )
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과


    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.T_FN_ATMS_DEMAND_MAC    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE demand_date = pDemandDate
         and   org_cd ='045';
                --DELETE op.T_FN_ATMS_DEMAND_MAC    --테이블 꼭 확인할것 잘못하면 X됨 /* 경남 ATMS 임시 운영 */
                -- WHERE demand_date = pDemandDate
        -- and   org_cd ='92';         
            ELSE
                RAISE eAlreadyExistsException;
            END IF;

/*
      insert into  op.T_FN_ATMS_DEMAND_MAC
     (DEMAND_DATE,
      ORG_CD,
      BRANCH_CD,
      MAC_NO,
      POST_TRANS_AMT,
      PRE_ADD_TRANS_AMT,
      PRE_COLLECT_AMT,
      DIFFER_AMT,
      PRE_RESPECT_AMT,
      CUR_RESPECT_AMT,
      DEMAND_AMT,
      INSERT_UID,
      INSERT_DATE,
      UPDATE_UID,
      UPDATE_DATE,
      ORG_SEND_YN,
      TOTAL_STOCK_AMT,
      PRE_ADD_TRANS_CNT
      )
      select a.demand_date,
             a.org_cd,
             a.BRANCH_cd,
             a.mac_no,
             a.post_sendplan_amt, --익영업일 현송액
             a.plus_send_amt, --전영업일추가현송액
             a.close_amt, --전일회수마감잔액
             a.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
             post_sendplan_amt + plus_send_amt - close_amt - differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0,--total_stock_Amt
             nvl(b.add_cnt,0)
      from op.t_fn_pack_report a,
      (
           select 
                  --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no,
                 count(mac_no) add_cnt
            from op.T_FN_SEND      
            where send_status ='2'
            and   send_type ='2'
            and   send_date between op.sf_getPreActDate(pDemandDate) and  op.sf_getBeforeDate(pDemandDate)
            and   org_cd ='045'
            and  send_amt <> 0
          group by --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no
       ) b   
      where a.demand_date =pDemandDate
      and   a.org_cd ='045'
      and   post_sendplan_amt + plus_send_amt + close_amt +
            (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) <> '0'
      and   a.org_cd = b.org_cd (+)
      and   a.BRANCH_cd= b.BRANCH_cd (+)
      and   a.mac_no= b.mac_no  (+)            
            
      union all
            
 select     --m.open_date,
            --m.close_date,
            r.demand_date,
            r.org_cd,
            r.BRANCH_cd,
            r.mac_no,
            r.post_sendplan_amt, --익영업일 현송액
            r.plus_send_amt, --전영업일추가현송액
            r.close_amt, --전일회수마감잔액
            r.differ_amt, --과여금발생액
             0, --전잔
             0, --잔액
            r.post_sendplan_amt + r.plus_send_amt - r.close_amt - r.differ_amt, --당일청구금액
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             0,--total_stock_Amt
             nvl(b.add_cnt,0)
      from op.t_fn_pack_report r,
           t_cm_mac m,
            (
           select 
                  --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no,
                 count(mac_no) add_cnt
            from op.T_FN_SEND      
            where send_status ='2'
            and   send_type ='2'
            and   send_date between op.sf_getPreActDate(pDemandDate) and  op.sf_getBeforeDate(pDemandDate)
            and   org_cd ='045'
            and  send_amt <> 0
          group by --send_date,
                  org_cd,
                  BRANCH_cd,
                  mac_no
          ) b   
      where r.demand_date =pDemandDate
      and   r.org_cd ='045'
      and   r.org_cd = m.org_cd
      and   r.BRANCH_cd = m.BRANCH_cd
      and   r.mac_no = m.mac_no
      and   post_sendplan_amt + plus_send_amt + close_amt +
            (post_sendplan_amt + plus_send_amt - close_amt - differ_amt) = '0'
       and ( m.close_date is null OR m.close_date = '' OR m.close_date >= pDemandDate ) 
      and   r.org_cd = b.org_cd (+)
      and   r.BRANCH_cd= b.BRANCH_cd (+)
      and   r.mac_no= b.mac_no  (+)
             
      union all

      select master_data.demand_date,
             master_data.org_cd,
             '999',
             '99',
             0,
             0,
             0,
             0,
             master_data.pre_respect_amt, --전잔
             master_data.cur_respect_amt, --말잔
             master_data.demand_amt - detail_data.total_demand,
             'system',
             sysdate,
             'system',
             sysdate,
             '0',
             total_stock.total_stock_amt,
             0
      from
        (
        select pd.org_cd,
               pd.demand_date,
               sum(pd.pre_respect_amt) pre_respect_amt, --전잔
               sum(pd.cur_respect_amt) cur_respect_amt, --말잔
               sum(pd.demand_amt) demand_amt
        from op.t_fn_pack_demand pd
        where pd.org_cd ='045'
        and   demand_date =pDemandDate
        group by pd.org_cd, pd.demand_date
        ) master_data,
        (
        select org_cd,
               demand_date,
               sum(
                    post_sendplan_amt + plus_send_amt - close_amt - differ_amt --당일청구금액
                  ) total_demand
        from op.t_fn_pack_report
        where demand_date =pDemandDate
        and   org_cd ='045'
        group by org_cd,demand_date
        ) detail_data,
        (
        select org_cd,
              close_date,
              sum(safe_amt+mac_amt) total_stock_amt
        from op.t_fn_pack_invent
        where org_cd ='045'
        and   close_date =op.sf_getPreActDate(pDemandDate)
        group by org_cd,
              close_date
        ) total_stock

       where master_data.org_cd = detail_data.org_cd
       and   master_data.demand_date = detail_data.demand_date
       and   master_data.org_cd = total_stock.org_cd;
--       and   master_data.demand_date = total_stock.close_date;
*/

     insert into  op.T_FN_ATMS_DEMAND_MAC
     (DEMAND_DATE,
      ORG_CD,
      BRANCH_CD,
      MAC_NO,
      REQUIR_START_DATE,
      REQUIR_END_DATE,
      REQUIR_TERM,
      
      PRE_TRANS_AMT,
      CUR_TRANS_AMT,      
      POST_TRANS_AMT,
      
      PRE_CHECK_CNT,
      CHECK_CNT,
      POST_CHECK_CNT,
      
      PRE_ADD_TRANS_AMT,
      PRE_COLLECT_AMT,
      PRE_OUT_AMT,
      PRE_IN_AMT,
      DEMAND_AMT,
      TOTAL_STOCK_AMT,
      INSERT_UID,
      INSERT_DATE,
      UPDATE_UID,
      UPDATE_DATE,
      ORG_SEND_YN
      )

        select 
         today,
         '045',
               BRANCH_cd, 
               mac_no, 
               startday, 
               endday,
               dayterm, 
         
               rsend1, 
               rsend2, 
               rsend3, 
         
              0 ckeck1,
              0 ckeck2,
              0 ckeck3, 
            plus,
              clo, 
              out, 
              inamt, 
              demand_amt, 
              total_stock_amt,
        'system',
         sysdate,
        'system',
         sysdate,
        '0'
        from
        (   SELECT 
            re.BRANCH_cd, re.mac_no,
            pDemandDate today,
            OP.sf_getPostActDate(pDemandDate) startDAY,
            OP.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(pDemandDate)) endDAY,
          
          to_date(OP.SF_GETBEFOREPOSTACTDATE(OP.sf_getPostActDate(pDemandDate)),'yyyymmdd')-
          to_date(OP.sf_getPostActDate(pDemandDate),'yyyymmdd') +1 dayterm,
          
            nvl(a.amt,0) rsend1
           ,nvl(b.amt,0) rsend2
           ,nvl(c.amt,0) rsend3
           ,0, 0, 0,
            nvl(d.amt,0) plus,
            nvl(e.close_Amt,0) clo, nvl(e.out_amt,0) out, nvl(e.in_amt,0) inamt,
            re.demand_amt
            , (f.pre_stock_amt+f.demand_amt-e.out_Amt+e.in_amt) total_stock_amt
            from 
            (select BRANCH_cd, mac_no, demand_amt
            from op.t_fn_pack_report
            where org_cd='045'
            and demand_Date=pDemandDate) re,
      
            (select BRANCH_cd, mac_no, send_amt amt 
            from op.T_FN_SEND
            where send_date=op.sf_getPreActDate(pDemandDate)
            and send_type='1'
            and org_cd='045') a,
      
            (select BRANCH_cd, mac_no, send_amt amt 
            from op.T_FN_SEND
            where send_date=pDemandDate
            and send_type='1'
            and org_cd='045') b,
      
            (select BRANCH_cd, mac_no, send_amt amt 
            from op.T_FN_SEND
            where send_date=OP.sf_getPostActDate(pDemandDate)
            and send_type='1'
            and org_cd='045') c,
      
            (select BRANCH_cd, mac_no, sum(send_amt) amt 
            from op.T_FN_SEND
            where send_date>=op.sf_getPreActDate(pDemandDate)
            and send_date<=op.sf_getBeforeDate(pDemandDate)
            and send_type='2'
            and send_status='2'
            and org_cd='045'
      group by BRANCH_cd, mac_no
      ) d,
            (select BRANCH_Cd, mac_no, pre_amt, out_Amt, in_amt, close_amt
            from op.t_fn_close
            where close_date>=op.sf_getPreActDate(pDemandDate)
            and close_date<=op.sf_getBeforeDate(pDemandDate)
            and org_cd='045') e,
            (select BRANCH_cd, mac_no, nvl(total_stock_amt,0) pre_stock_Amt, demand_amt 
            from op.T_FN_ATMS_DEMAND_MAC
            where demand_date=op.sf_getPreActDate(pDemandDate)
            and org_cd='045') f
            
        where re.BRANCH_Cd = a.BRANCH_cd(+)
        and re.maC_no = a.mac_no(+)
        and re.BRANCH_Cd = b.BRANCH_cd(+)
        and re.maC_no   = b.mac_no(+)
        and re.BRANCH_Cd = c.BRANCH_cd(+)
        and re.maC_no   = c.mac_no(+)
        and re.BRANCH_Cd = d.BRANCH_cd(+)
        and re.maC_no   = d.mac_no(+)
        and re.BRANCH_Cd = e.BRANCH_cd(+)
        and re.maC_no   = e.mac_no(+)
        and re.BRANCH_Cd = f.BRANCH_cd(+)
        and re.maC_no   = f.mac_no(+)
        )
        where rsend1||rsend2||rsend3||plus||clo||out||inamt||demand_amt <> '00000000' ;   

            COMMIT;
      
        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_SMAtms_Demand.sp_SMcreateAtmsOperFundsDemand',
                                           vResult,
                                           pDemandDate);

    END sp_SMcreateAtmsOperFundsDemand;

/* 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_sm_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='045';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_report (
           notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
            , main.org_cd org_cd--'97' org_cd 
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr2(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                 ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '045'
                and owner_org_cd <> '096') main,
                OP.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_SMAtms_Demand.sp_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_sm_createAtmsReport;    
    
END pkg_fn_SMAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_SMAtms_DemandManager AS

    PROCEDURE sp_SMAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and UPPER(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_SMAtms_Demand.sp_SMcreateAtmsOperFundsDemand(pDemandDate);
        END IF;
        
            /* 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_SMAtms_Demand.sp_sm_createAtmsReport(pDemandDate);
        END IF;

    
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_SMAtms_DemandManager.sp_KNAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_SMAtms_DemandManager.sp_SMAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_SMAtms_DemandManager.sp_SMAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_SMAtms_batchProcess;

END pkg_fn_SMAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_ShAtms_OpDemand AS

    /* 신한은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_sh_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE add_date >= vPreActDate
                 AND add_date <= vBeforeDate
         and org_cd ='092';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

     INSERT INTO OP.t_fn_atms_add_cash_report (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   add_date,
                   serial_no,
                   demand_date,
                   add_cash_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           add_time,
           close_yn,
           send_date
  )

--select * from OP.t_fn_atms_add_cash_report    
      
      select     send.org_cd org_cd            
                  ,send.BRANCH_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
                  ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
                  ,send.send_amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
            from op.T_FN_SEND send
                ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='088'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

            where send.send_date >= vPreActDate
            and send.send_date <= vBeforeDate
            and send.org_cd = '088'
            and send.send_type = '2'
            and send.send_status = '2'
            and send.dept_cd = off.dept_cd
            and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_Demand.sp_sh_createAtmsAddCashReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsAddCashReport;
    
    /* 신한은행 현송계획서 데이터 생성 ok*/
 /* 
    PROCEDURE sp_sh_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE cash_date = vPostActDate --익영업일
         and org_cd = '92';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
            
      
            -- 신한은행 현송계획 데이터 생성-- ok
            
            INSERT INTO op.t_fn_atms_cash_plan (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   cash_date,
                   cash_amt,
                   confirm_cash_amt,
                   office_nm,
                   org_send_confirm_yn,
                   update_date,
                   update_uid,
           cash_time)
            select 
            '92' -- send.org_cd org_cd
                  ,send.BRANCH_cd
                  ,send.site_cd
                  ,send.mac_no
                  ,send.send_date
                  ,send.send_amt
                  ,send.send_amt
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'0' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            ,send.insert_time
            from op.T_FN_SEND send
                ,OP.t_cm_office off
            where send.send_date = vPostActDate
            and send.org_cd = '88'
            and send.send_type = '1'
            and send.dept_cd = off.dept_cd
            and send.office_cd = off.office_cd;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsCashPlan', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsCashPlan;
*/  
    /* 신한은행 운영자금청구서 통보 데이터 생성 */--ok
    PROCEDURE sp_shcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

 
        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
         and   org_cd ='088'; 
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

        INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   BRANCH_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,--
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )
-----------------------------------------------------------------------------------------
select        main.org_cd org_cd                   
                  ,'8202'--main.BRANCH_cd
--                ,op.sf_getPreActDate(main.demand_date) demand_date
                  ,main.demand_date
                  ,'' operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,main.oper_found
                  ,main.post_trans_amt
                  ,main.pre_add_trans_amt
                  ,main.pre_collect_amt
                  ,main.differ_amt
                  ,main.unset_before_amt
                  ,case when main.demand_amt <0 then 0 
                  else main.demand_amt end demand_amt
                  ,main.unset_amt
                  --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
                ,TOTAL_BRANCH.STOCK_AMT   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,main.update_date
                  ,main.update_uid
            ,TOTAL_BRANCH_BEFORE.PRETOTALAMT /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,TOTAL_BRANCH.OPERAMT  pre_oper_amt
            ,send.send            send
            ,TOTAL_BRANCH.OUTAMT pre_out_amt
            ,TOTAL_BRANCH.INAMT  pre_in_amt

            from
                   (select org_cd
                          ,'8202' BRANCH_cd
                          ,demand_date
                          ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          ,sysdate update_date
                          ,'SYSTEM' update_uid
                    from op.t_fn_pack_demand
                    where demand_date = pDemandDate
                    and org_cd = '088'
                    group by demand_date
                            ,org_cd
                            ) main,    -- '청구내역을 합계지점으로 저장
                   (
                    select orG_cd, '8202' BRANCH_Cd, sum(post_trans_amt) send
                    from op.t_fn_pack_demand
                    where demand_date = op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))  -- 청구일 기준 전일 현송금액

                    and org_cd = '088'
                    group by org_cd
                    ) send,

         (
          select 
             org_cd,
             '8202' BRANCH_cd,
             --sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
--             sum(safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(safe_amt) STOCK_AMT,             
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='088'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date

          group by   org_cd
          ) total_BRANCH,          -- '전영업일 시재내역을 합계지점으로 저장

          (
          select 
             org_cd,
             '8202' BRANCH_cd,
--             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
--             sum(safe_amt-differ_amt) pretotalamt,
             sum(safe_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='088'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd
          ) total_BRANCH_before          -- '전전영업일 시재내역을 합계지점으로 저장
         
      where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
      and main.org_cd   = send.org_cd
      and main.BRANCH_cd = send.BRANCH_cd
      --AND MAIN.DEMAND_AMT <> 0
      and TOTAL_BRANCH.STOCK_AMT <> 0       ;

------------------------------------------------------------------------------------------
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_Demand.sp_shcreateAtmsOperFundsDemand', 
                                           vResult, 
                                           pDemandDate);
    END sp_shcreateAtmsOperFundsDemand;
    
END pkg_fn_ShAtms_OpDemand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_ShAtms_OpDemandManager AS

    PROCEDURE sp_ShAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        IF pFromJobNo IS NULL OR pFromJobNo = '' THEN
            pFromJobNo := 0;
        END IF;
        
        IF pToJobNo IS NULL OR pToJobNo = '' THEN
            pToJobNo := 9999999;
        END IF;
        
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and UPPER(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        

        /* 신한은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_ShAtms_OpDemand.sp_sh_createAtmsAddCashReport(pDemandDate);
        END IF;

     /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_ShAtms_OpDemand.sp_shcreateAtmsOperFundsDemand(pDemandDate);
        END IF;
        
    op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_ShAtms_batchProcess;

END pkg_fn_ShAtms_OpDemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_WCAtms_Demand AS


    /* 우체국 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_WC_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE,'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE close_date >= vPreActDate
                 and close_date <= vBeforeDate
         and org_cd ='0WC';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO op.t_fn_atms_collect (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   close_date,
                   before_cash_amt,
                   add_cash_amt,
                   add_cash_date,
                   collect_amt,
                   unattended_amt,
                   unattended_cnt,
                   report_yn,
                   office_nm,
                   org_send_yn,
                   out_amt,
                   in_amt,
                   close_amt,
                   update_date,
                   update_uid)
            select main.org_cd orgCd,
                   main.BRANCH_cd BRANCHCd,
                   main.site_cd siteCd,
                   main.mac_no macNo,
                   main.close_date closeDate,
                   nvl(main.pre_amt,0) preAmt,
                   nvl(main.send_amt,0) plusSendAmt,
                   main.send_date plusSendDate,
                   nvl(main.close_amt,0) collect_Amt,       
                   nvl(notEnd.notEndAmt,0) notEndAmt,
                   nvl(notEnd.notEndCnt,0) notEndCnt,
                   decode(notEnd.notEndCnt,null,'0','1') notEndYn,
                   substr2(off.office_nm,0,2) officeNm,
                   '0' orgSendYn,
                   nvl(main.out_amt,0),
                   nvl(main.in_amt,0),
                   nvl(main.close_amt,0) closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
                   SYSDATE,
                   'SYSTEM'
            from
                   (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='0WC') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='0WC'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
                          -- MAIN: 추가현송이면서 현송완료인것
                    (select notend.org_cd
                           ,notend.BRANCH_cd
                           ,notend.site_cd
                           ,notend.mac_no
                           ,notend.notEndCnt
                           ,notend.notEndAmt
                     from op.t_fn_close cls,
                         (select org_cd
                               ,BRANCH_cd
                               ,mac_no
                               ,site_cd
                               ,count(deal_amt) notEndCnt
                               ,sum(deal_amt) notEndAmt
                         from op.t_fn_notend
                         where notend_date >= vPreActDate
                         and notend_date <= vBeforeDate
                         and org_cd = '0WC'
                         and owner_org_cd <> '096'
                         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
                     where cls.close_date = vPreActDate
                     and cls.org_cd = '0WC'
                     and cls.differ_amt > 0
                     and cls.org_cd = notend.org_cd
                     and cls.BRANCH_cd = notend.BRANCH_cd
                     and cls.mac_no = notend.mac_no
                     and cls.site_cd = notend.site_cd) notEnd,
                     -- NOTEND: 과여금이 발생한 것
                    OP.t_cm_office off
                
                where main.org_cd = notEnd.org_cd(+)
                and main.BRANCH_cd = notEnd.BRANCH_cd(+)
                and main.site_cd = notEnd.site_cd(+)
                and main.mac_no = notEnd.mac_no(+)
                and main.dept_cd = off.dept_cd(+)
                and main.office_cd = off.office_cd(+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_Demand.sp_createAtmsCollect', 
                                           vResult, 
                                           pDemandDate);

    END sp_WC_createAtmsCollect;
    
    /* 우체국 미처리금액 보고서 데이터 -사용 안함 */
    
    
    /* 우체국 추가현송 보고서 데이터 -사용 안함 */
    
    /* 우체국 현송계획서 데이터 생성 */                

     PROCEDURE sp_WC_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    is

      vPostPostActDate op.t_fn_close.close_date%TYPE    := OP.sf_getPostActDate(pDemandDate); --익영업일
        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과
    eAlreadyExistsException  EXCEPTION;
        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE,'YYYYMMDD');
        END IF;
        
        BEGIN
       --확정
  --     update op.T_FN_SENDplan
  --     set   confirm_yn ='1'
    --       where send_date   = vPostPostActDate
    --       and   org_cd      = '03'
      --   AND   confirm_yn  = '0'
        --   AND   cancel_type = '0';        
    
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
                DELETE op.t_fn_atms_cash_plan 
                 WHERE cash_date = vPostPostActDate --익영업일
         and   org_cd ='0WC';
            
            -- 우체국 현송계획 데이터 생성
            INSERT INTO op.t_fn_atms_cash_plan (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   cash_date,
                   cash_amt,
                   confirm_cash_amt,
                   office_nm,
                   org_send_confirm_yn,
                   update_date,
                   update_uid)
            select sendPlan.org_cd org_cd --'97' org_cd
                  ,sendPlan.BRANCH_cd
                  ,sendPlan.site_cd
                  ,sendPlan.mac_no
                  ,sendPlan.send_date
                  ,0
                  ,nvl(decode(sendplan.last_send_type
                        , '1', sendplan.plan_send_amt                   
                          , '2', sendplan.change_send_amt), 0)  SendAmt 
                  ,substr2(off.office_nm,0,2) office_nm
                  ,'2' orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
            where sendPlan.send_date   = vPostPostActDate
            and   sendPlan.org_cd      = '0WC'
           AND   sendPlan.confirm_yn  = '1'
            AND   sendPlan.cancel_type = '0' 
            and   sendPlan.dept_cd = off.dept_cd
            and   sendPlan.office_cd = off.office_cd;
            
            COMMIT;

        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_Demand.sp_WC_createAtmsCashPlan', 
                                           vResult, 
                                           pDemandDate);

    END sp_WC_createAtmsCashPlan;

    
    /* 기업은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_WCcreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        vPostActDate op.t_fn_close.close_date%TYPE  := OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE,'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE req_date = pDemandDate
         and   org_cd ='0WC'; 
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;

            INSERT INTO OP.t_fn_atms_operfunds_demand (
                   org_cd,
                   BRANCH_cd,
                   req_date,
                   operfunds_sum,
                   requir_start_date,
                   requir_end_date,
                   requir_term,
                   oper_funds,
                   next_cash_amt,
                   before_add_amt,
                   before_collect_amt,
                   over_amt,
                   unset_before_amt,
                   requir_amt,
                   unset_amt,
                   stock_amt,
                   office_nm,
                   org_send_yn,
                   update_date,
                   update_uid,
                   prepre_stock_amt,
                   pre_oper_amt,
                   pre_send_amt,
                   pre_out_amt,
                   pre_in_amt
           )
-----------------------------------------------------------------------------------------
select main.org_cd org_cd --'97' org_cd
                  ,'0002' as BRANCH_cd
                  ,main.demand_date
                  ,0 operfunds_sum
                  ,main.PostActDate
                  ,main.BeforePostActDate
                  ,main.requir_term
                  ,main.oper_found
                  ,nvl(main.post_trans_amt, 0)
                  ,nvl(main.pre_add_trans_amt, 0)
                  ,nvl(main.pre_collect_amt, 0)
                  ,nvl(main.differ_amt, 0)
                  ,nvl(main.unset_before_amt, 0)
                  ,nvl(main.demand_amt, 0)
                  ,nvl(main.unset_amt, 0)
                  --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
                ,nvl(TOTAL_BRANCH.STOCK_AMT, 0)   STOCK_AMT
                  ,substr2(main.office_nm,0,2) office_nm
                  ,main.orgSendYn
                  ,main.update_date
                  ,main.update_uid
            ,nvl(TOTAL_BRANCH_SEND_BEFORE.PRETOTALAMT, 0) /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,nvl(TOTAL_BRANCH.OPERAMT, 0)  pre_oper_amt
            ,nvl(TOTAL_BRANCH_SEND_BEFORE.pre_send_amt, 0) pre_send_amt  
            ,nvl(TOTAL_BRANCH.OUTAMT, 0) pre_out_amt
            ,nvl(TOTAL_BRANCH.INAMT, 0)  pre_in_amt

            from
                   (select org_cd
                          ,demand_date
                          ,vPostActDate PostActDate
                          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
                          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
                           to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
                           requir_term
                          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
                          ,sum(post_trans_amt) post_trans_amt
                          ,sum(pre_add_trans_amt) pre_add_trans_amt
                          ,sum(pre_collect_amt) pre_collect_amt
                          ,sum(differ_amt) differ_amt
                          ,sum(pre_respect_amt)  unset_before_amt          --1
                          ,sum(demand_amt)       demand_amt                --2
                          --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
                          ,sum(cur_respect_Amt)  unset_amt
                          ,'' office_nm
                          ,'0' orgSendYn
                          ,sysdate update_date
                          ,'SYSTEM' update_uid
                    from op.t_fn_pack_demand
                    where demand_date = pDemandDate
                    and org_cd = '0WC'
                    group by demand_date
                            ,org_cd) main,
         (
          select 
             org_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt,
             sum(mac_amt) SUM_MACAMT,
             sum(safe_amt) SUM_SAFEAMT
          from 
            op.t_fn_pack_invent
          where
            org_cd='0WC'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd
          ) total_BRANCH,
          /*
          (
          -- total_BRANCH_before
          select 
             org_cd,
             BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent_BRANCH
          where
            org_cd='0WC'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd,
                     BRANCH_cd          
          ) total_BRANCH_before,
          */
          (
          -- total_BRANCH_before
          select 
             org_cd,             
             sum(mac_amt + safe_amt - differ_amt) pretotalamt,
             sum(ord_send_amt) pre_send_amt
          from 
            op.t_fn_pack_invent
          where
            org_cd='0WC'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd          
          ) total_BRANCH_send_before         
         
      where main.org_cd   = total_BRANCH.org_cd(+)
      and main.org_cd   = total_BRANCH_send_before.org_cd(+)
      and main.oper_found||post_trans_amt||pre_add_trans_amt||pre_collect_amt||unset_before_amt||demand_amt||unset_amt <> '0000000';  -- 20121210 정희성수정

--      AND MAIN.DEMAND_AMT <> 0                     20070530 정희성수정
--      AND (SUM_MACAMT <> 0 OR SUM_SAFEAMT <> 0);
      --and TOTAL_BRANCH.STOCK_AMT <> 0     ;

------------------------------------------------------------------------------------------
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_Demand.sp_createAtmsOperFundsDemand', 
                                           vResult, 
                                           pDemandDate);

    END sp_WCcreateAtmsOperFundsDemand;
    
END pkg_fn_WCAtms_Demand;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_WCAtms_DemandManager AS

    PROCEDURE sp_WCAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
            
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and UPPER(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_WCAtms_Demand.sp_WCcreateAtmsOperFundsDemand(pDemandDate);
        END IF;
        
            /* 회수자금결과통보 데이터 생성 */
        IF vIsHoliday = '0' AND (15 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_WCAtms_Demand.sp_WC_createAtmsCollect(pDemandDate);
        END IF;
        
            /* 현송계획서통보 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                OP.pkg_fn_WCAtms_Demand.sp_WC_createAtmsCashPlan(pDemandDate);
        END IF;
    
      
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_DemandManager.sp_WCAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_DemandManager.sp_WCAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_WCAtms_DemandManager.sp_WCAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_WCAtms_batchProcess;

END pkg_fn_WCAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY OP.pkg_fn_WRAtms_DemandManager AS

    PROCEDURE sp_WRAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and UPPER(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_WRAtms_Demand.sp_WRcreateAtmsOperFundsDemand(pDemandDate);
        END IF;
        
            /* 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_WRAtms_Demand.sp_WR_createAtmsReport(pDemandDate);
        END IF;

            /* 회수자금결과통보 데이터 생성 */
        IF vIsHoliday = '0' AND (15 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_WRAtms_Demand.sp_WR_createAtmsCollect(pDemandDate);
        END IF;
        
            /* 현송계획서통보 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_WRAtms_Demand.sp_WR_createAtmsCashPlan(pDemandDate);
        END IF;
    
            /* 추가현송보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (25 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_WRAtms_Demand.sp_WR_createAtmsAddCashReport(pDemandDate);
        END IF;
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_DemandManager.sp_WRAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_DemandManager.sp_WRAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_WRAtms_DemandManager.sp_WRAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_WRAtms_batchProcess;

END pkg_fn_WRAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_HnAtms_Demand AS


	/* 하나은행 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_Hn_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null,
        pIsDeleting  IN VARCHAR                       default '1'
    ) 
    IS
		-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        -- pIsDeleting  IN VARCHAR    
        
		
		
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if; 
    
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE close_date >= vPreActDate
				 and close_date <= vBeforeDate
         and org_cd ='081';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO op.t_fn_atms_collect (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   close_date,
				   before_cash_amt,
				   add_cash_amt,
				   add_cash_date,
				   collect_amt,
				   unattended_amt,
				   unattended_cnt,
				   report_yn,
				   office_nm,
				   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
				   update_date,
				   update_uid)
			select main.org_cd org_cd,                      
			       main.BRANCH_cd BRANCH_cd,
			       main.site_cd site_cd,
			       main.mac_no mac_no,
			       main.close_date close_date,
			       main.pre_amt before_cash_amt,
			       nvl(main.send_amt,0) add_cash_amt,
			       main.send_date add_cash_date,
			       main.close_amt collect_amt,       
			       nvl(notEnd.notEndAmt,0) unattended_amt,
			       nvl(notEnd.notEndCnt,0) unattended_cnt,
			       decode(notEnd.notEndCnt,null,'0','1') report_yn,
			       substr2(off.office_nm,0,2) office_nm,
			       '0' org_send_yn,
             main.out_amt out_amt,
             main.in_amt in_amt,
             main.close_amt close_amt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
			       SYSDATE update_date,
			       'SYSTEM' update_uid
			from
			       (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='081') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='081'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
			              -- MAIN: 추가현송이면서 현송완료인것
				    (select notend.org_cd
				           ,notend.BRANCH_cd
				           ,notend.site_cd
				           ,notend.mac_no
				           ,notend.notEndCnt
				           ,notend.notEndAmt
				     from op.t_fn_close cls,
				         (select org_cd
				               ,BRANCH_cd
				               ,mac_no
				               ,site_cd
				               ,count(deal_amt) notEndCnt
				               ,sum(deal_amt) notEndAmt
				         from op.t_fn_notend
				         where notend_date >= vPreActDate
				         and notend_date <= vBeforeDate
				         and org_cd = '081'
				         and owner_org_cd <> '096'
				         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
				     where cls.close_date = vPreActDate
				     and cls.org_cd = '081'
				     and cls.differ_amt > 0
				     and cls.org_cd = notend.org_cd
				     and cls.BRANCH_cd = notend.BRANCH_cd
				     and cls.mac_no = notend.mac_no
				     and cls.site_cd = notend.site_cd) notEnd,
				     -- NOTEND: 과여금이 발생한 것
				    OP.t_cm_office off
				
				where main.org_cd = notEnd.org_cd(+)
				and main.BRANCH_cd = notEnd.BRANCH_cd(+)
				and main.site_cd = notEnd.site_cd(+)
				and main.mac_no = notEnd.mac_no(+)
				and main.dept_cd = off.dept_cd(+)
				and main.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_Demand.sp_createAtmsCollect', 
										   vResult, 
										   pDemandDate);

    END sp_hn_createAtmsCollect;
	
	/* 하나은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_hn_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        -- pIsDeleting  IN VARCHAR                            DEFAULT '1'
		
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_report
				 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and org_cd ='081';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_report (
                   notend_date,  
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   trade_date,
				   serial_no,
				   unattended_amt,
				   trade_no,
				   trade_org,
				   account_no,
				   trade_type,
				   trade_amt,
				   finish_nm,
				   customer_nm,
				   tele_no,
				   office_nm,
				   memo,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.notend_date
			      ,main.org_cd org_cd 
			      --,'097'
			      ,main.BRANCH_cd
			      ,main.site_cd
			      ,main.mac_no
			      ,main.deal_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
			      ,main.unattenedAmt
			      ,main.tran_no
			      ,main.bank_cd
			      ,main.account_no
			      ,main.deal_type
			      ,main.deal_amt
			      ,mem.member_nm
			      ,main.customer_nm
			      ,main.tele_no
			      ,substr2(off.office_nm,0,2) office_nm
			      ,main.memo
			      ,main.orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from
			    (select notend_date
                      ,org_cd
			          ,BRANCH_cd
			          ,site_cd
			          ,mac_no
			          ,deal_date
			          ,unique_no
			          ,deal_amt unattenedAmt
			          ,tran_no
			          ,bank_cd
			          ,account_no
			          ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
			          ,deal_amt
			          ,decode(update_uid,null,insert_uid,update_uid) user_id
			          ,'' customer_nm
			          ,'' tele_no
			          ,dept_cd
			          ,office_cd
			          ,'' memo
			          ,'0' orgSendYn
			    from op.t_fn_notend
			    where notend_date >= vPreActDate
			    and notend_date <= vBeforeDate
			    and org_cd = '081'
			    and owner_org_cd <> '096') main,
			    op.T_CM_MEMBER mem,
			    OP.t_cm_office off
			where main.user_id = mem.member_id(+)
			and main.dept_cd = off.dept_cd(+)
			and main.office_cd = off.office_cd(+)
			order by main.BRANCH_cd, main.mac_no;
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_Demand.sp_createAtmsReport', 
										   vResult, 
										   pDemandDate);

    END sp_hn_createAtmsReport;
	
	/* 하나은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_hn_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		
		-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        -- pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting = '' or pIsDeleting is null then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
         and org_cd ='081';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
/*
			INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           add_time)
			select send.org_cd org_cd --'97' org_cd --
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(rownum),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '81'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd(+)
			and send.office_cd = off.office_cd(+);
	*/
  INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
                  add_time,
                  close_yn,
                  send_date
  )

--select * from OP.t_fn_atms_add_cash_report	
      
      select     send.org_cd org_cd            
                 -- '097' org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
            ,send.send_time
            ,case when close.close_date is null then '0'--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then '1'  --'마감후'
                       else '0' --'마감전' 
                       end 
                  end  flag   

            ,case when close.close_date is null then null--'마감전'
                  else
                       case when send.send_date||send.send_time  >= close.close_date||close.close_time then close.close_date  --'마감후'
                       else 
                           (  
                           select max(close_date) close_date
                           from   op.t_fn_close aa
                           where  aa.close_date >= to_char(to_date(close.close_date,'yyyymmdd')-7,'yyyymmdd')
                           and    aa.close_date < close.close_date
                           and    aa.org_cd = close.org_cd
                           and    aa.BRANCH_cd = close.BRANCH_cd
                           and    aa.mac_no = close.mac_no
                           )  
          
                        --'마감전' 
                       end 
                  end  close_date

            
			from op.T_FN_SEND send
			    ,OP.t_cm_office off

          ,(
           select org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no,
                  max(close_date) close_date, 
                  max(close_time) close_time
                  
           from   op.t_fn_close
           where  org_cd ='081'
           and    close_date >= to_char(to_date(vPreActDate,'yyyymmdd')-7,'yyyymmdd')
           and    close_date <= vBeforeDate
           group by org_cd,
                  BRANCH_cd,
                  site_cd,
                  mac_no    
          
          ) close

			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '081'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd
--      and send.send_date = close.close_date (+)
      and send.org_cd = close.org_cd (+)
      and send.BRANCH_cd = close.BRANCH_cd (+) 
      and send.mac_no = close.mac_no (+);
      		
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_hn_createAtmsAddCashReport;
	
	/* 하나은행 현송계획서 데이터 생성 */
  
     PROCEDURE sp_hn_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    is

	
	-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
    -- pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        
	  vPostPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과
   	eAlreadyExistsException  EXCEPTION;
        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
       --확정
  /*     update op.T_FN_SENDplan
       set   confirm_yn ='1'
	 		 where send_date   = vPostPostActDate
			 and   org_cd      = '81'
	     AND   confirm_yn  = '0'
			 AND   cancel_type = '0';        */
    
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostPostActDate --익일
         and   org_cd ='081';
			
            -- 하나은행 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select sendPlan.org_cd org_cd
			      --'097' org_cd
			      ,sendPlan.BRANCH_cd
			      ,sendPlan.site_cd
			      ,sendPlan.mac_no
			      ,sendPlan.send_date
			      ,decode(sendplan.last_send_type
	  		            , '1', sendplan.plan_send_amt					
		   		          , '2', sendplan.change_send_amt)	SendAmt	
			      ,0
			      ,substr2(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SENDplan sendPlan
           ,OP.t_cm_office off 
			where sendPlan.send_date   = vPostPostActDate
			and   sendPlan.org_cd      = '081'
	    AND   sendPlan.confirm_yn  = '1'
			AND   sendPlan.cancel_type = '0' 
      and   sendPlan.dept_cd = off.dept_cd
			and   sendPlan.office_cd = off.office_cd;
			
			COMMIT;

		EXCEPTION
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_Demand.sp_hn_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_hn_createAtmsCashPlan;

	
	/* 하나은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_hncreateAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        -- pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd ='081'; 
         --and   org_cd ='097'; 
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid,
           prepre_stock_amt,
           pre_oper_amt,
           pre_differ_amt,
           pre_out_amt,
           pre_in_amt
           )
-----------------------------------------------------------------------------------------
select             main.org_cd org_cd                   
                 -- '097' org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,case when main.demand_amt <0 then 0 
                  else main.demand_amt end demand_amt
			      ,main.unset_amt
			      --,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
      			,TOTAL_BRANCH.STOCK_AMT   STOCK_AMT
			      ,substr2(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
            ,TOTAL_BRANCH_BEFORE.PRETOTALAMT /*- TOTAL_BRANCH_BEFORE.DIFFERAMT prepre_stock_amt*/
            ,TOTAL_BRANCH.OPERAMT  pre_oper_amt
            ,TOTAL_BRANCH_BEFORE.DIFFERAMT pre_differ_amt  
            ,TOTAL_BRANCH.OUTAMT pre_out_amt
            ,TOTAL_BRANCH.INAMT  pre_in_amt

			from
			       (select org_cd
					      ,'9999' BRANCH_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD') + 1--기존:vPostActDate
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,sum(pre_respect_amt)  unset_before_amt          --1
					      ,sum(demand_amt)       demand_amt                --2
					      --,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,sum(cur_respect_Amt)  unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from op.t_fn_pack_demand
					where demand_date = pDemandDate
					and org_cd = '081'
					group by demand_date
					        ,org_cd
					        ) main,    -- '청구내역을 합계지점으로 저장
		 (
          select 
             org_cd,
             '9999' BRANCH_cd,
             sum(mac_amt + safe_amt - DIFFER_AMT) STOCK_AMT,
             sum(oper_amt) operamt,
             sum(differ_amt) differamt,
             sum(out_amt) outamt,
             sum(in_amt) inamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='081'
          and close_date=op.sf_getPreActDate(pDemandDate) --demand_date
          group by   org_cd
          ) total_BRANCH,          -- '전영업일 시재내역을 합계지점으로 저장

          (
          select 
             org_cd,
             '9999' BRANCH_cd,
             sum(mac_amt + safe_amt-differ_amt) pretotalamt,
             sum(differ_amt) differamt
          from 
            op.t_fn_pack_invent
          where
            org_cd='081'
            and close_date=op.sf_getPreActDate(op.sf_getPreActDate(pDemandDate))--demand_date
          group by   org_cd
          ) total_BRANCH_before          -- '전전영업일 시재내역을 합계지점으로 저장
         
	  where main.org_cd   = total_BRANCH.org_cd
      and main.BRANCH_cd = total_BRANCH.BRANCH_cd
      and main.org_cd   = total_BRANCH_before.org_cd
      and main.BRANCH_cd = total_BRANCH_before.BRANCH_cd
      --AND MAIN.DEMAND_AMT <> 0
      and TOTAL_BRANCH.STOCK_AMT <> 0	  	;

------------------------------------------------------------------------------------------
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_hncreateAtmsOperFundsDemand;
	
END op.pkg_fn_HnAtms_Demand;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_HnAtms_DemandManager AS

    PROCEDURE sp_HnAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER							default 0,
		pToJobNo		IN		NUMBER							default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
    	-- pDemandDate     IN      op.t_fn_close.close_date%TYPE	,
		-- pFromJobNo		IN		NUMBER								,
		-- pToJobNo		IN		NUMBER								
		
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
		/* 하나은행 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_HnAtms_Demand.sp_hn_createAtmsCollect(pDemandDate,'1');
        END IF;

		/* 하나은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_HnAtms_Demand.sp_hn_createAtmsReport(pDemandDate,'1');
        END IF;

		/* 하나은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_HnAtms_Demand.sp_hn_createAtmsAddCashReport(pDemandDate,'1');
        END IF;

        /*하나은행 현송계획서 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_HnAtms_Demand.sp_hn_createAtmsCashPlan(pDemandDate,'1');
        END IF;

        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_HnAtms_Demand.sp_hncreateAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
		
    	op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_DemandManager.sp_HnAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_DemandManager.sp_HnAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_HnAtms_DemandManager.sp_HnAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_HnAtms_batchProcess;

END pkg_fn_HnAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_KbAtms_Demand AS


	/* 국민은행 회수자금결과 통보 데이터 생성 */
    PROCEDURE sp_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE default null  ,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
    	-- pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        -- pIsDeleting  IN VARCHAR                            DEFAULT '1'
        

        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE close_date >= vPreActDate
				 and close_date <= vBeforeDate
         and org_cd ='004';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO op.t_fn_atms_collect (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   close_date,
				   before_cash_amt,
				   add_cash_amt,
				   add_cash_date,
				   collect_amt,
				   unattended_amt,
				   unattended_cnt,
				   report_yn,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.org_cd orgCd,
			       main.BRANCH_cd BRANCHCd,
			       main.site_cd siteCd,
			       main.mac_no macNo,
			       main.close_date closeDate,
			       main.pre_amt preAmt,
			       nvl(main.send_amt,0) plusSendAmt,
			       main.send_date plusSendDate,
			       main.close_amt closeAmt,       
			       nvl(notEnd.notEndAmt,0) notEndAmt,
			       nvl(notEnd.notEndCnt,0) notEndCnt,
			       decode(notEnd.notEndCnt,null,'0','1') notEndYn,
			       substr(off.office_nm,0,2) officeNm,
			       '0' orgSendYn,
			       SYSDATE,
			       'SYSTEM'
			from
			       (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='004') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='004'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
			    
				    (select notend.org_cd
				           ,notend.BRANCH_cd
				           ,notend.site_cd
				           ,notend.mac_no
				           ,notend.notEndCnt
				           ,notend.notEndAmt
				     from op.t_fn_close cls,
				         (select org_cd
				               ,BRANCH_cd
				               ,mac_no
				               ,site_cd
				               ,count(deal_amt) notEndCnt
				               ,sum(deal_amt) notEndAmt
				         from op.t_fn_notend
				         where notend_date >= vPreActDate
				         and notend_date <= vBeforeDate
				         and org_cd = '004'
				         and owner_org_cd <> '096'
				         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
				     where cls.close_date = vPreActDate
				     and cls.org_cd = '004'
				     and cls.differ_amt > 0
				     and cls.org_cd = notend.org_cd
				     and cls.BRANCH_cd = notend.BRANCH_cd
				     and cls.mac_no = notend.mac_no
				     and cls.site_cd = notend.site_cd) notEnd,
				    
				    OP.t_cm_office off
				
				where main.org_cd = notEnd.org_cd(+)
				and main.BRANCH_cd = notEnd.BRANCH_cd(+)
				and main.site_cd = notEnd.site_cd(+)
				and main.mac_no = notEnd.mac_no(+)
				and main.dept_cd = off.dept_cd(+)
				and main.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsCollect', 
										   vResult, 
										   pDemandDate);

    END sp_createAtmsCollect;
	
	/* 국민은행 미처리금액 보고서 데이터 생성 */
    PROCEDURE sp_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE  default null ,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		--pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        --pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if ;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_report
				 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and   org_cd ='004';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_report (
			       notend_date,
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   trade_date,
				   serial_no,
				   unattended_amt,
				   trade_no,
				   trade_org,
				   account_no,
				   trade_type,
				   trade_amt,
				   finish_nm,
				   customer_nm,
				   tele_no,
				   office_nm,
				   memo,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.notend_date
                  ,main.org_cd org_cd
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                      ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '004'
                and owner_org_cd <> '096') main,
                op.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsReport', 
										   vResult, 
										   pDemandDate);

    END sp_createAtmsReport;
	
	/* 국민은행 추가현송 보고서 데이터 생성 */
    PROCEDURE sp_createAtmsAddCashReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		
		--pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        --pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_add_cash_report    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE add_date >= vPreActDate
				 AND add_date <= vBeforeDate
         and org_cd ='004';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_add_cash_report (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   add_date,
				   serial_no,
				   demand_date,
				   add_cash_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid)
			select send.org_cd org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) seqNo
			      ,pDemandDate demandDate --해당 추가현송 금액의 청구일자
			      ,send.send_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date >= vPreActDate
			and send.send_date <= vBeforeDate
			and send.org_cd = '004'
			and send.send_type = '2'
			and send.send_status = '2'
			and send.dept_cd = off.dept_cd(+)
			and send.office_cd = off.office_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsAddCashReport', 
										   vResult, 
										   pDemandDate);

    END sp_createAtmsAddCashReport;
	
	/* 국민은행 현송계획서 데이터 생성 */
    PROCEDURE sp_createAtmsCashPlan (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		--pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        --pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE op.t_fn_atms_cash_plan    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE cash_date = vPostActDate --익영업일
         and org_cd in ('004','027');
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;
			
            -- 국민은행 현송계획 데이터 생성
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select send.org_cd org_cd
			      ,send.BRANCH_cd
			      ,send.site_cd
			      ,send.mac_no
			      ,send.send_date
			      ,send.send_amt
			      ,send.send_amt
			      ,substr(off.office_nm,0,2) office_nm
			      ,'0' orgSendYn
			      ,sysdate
			      ,'SYSTEM'
			from op.T_FN_SEND send
			    ,OP.t_cm_office off
			where send.send_date = vPostActDate
			and send.org_cd = '004'
			and send.send_type = '1'
			and send.dept_cd = off.dept_cd
			and send.office_cd = off.office_cd;
			
			--한미은행 현송계획 데이터 생성(2004.09.14 추가 이영재)
			INSERT INTO op.t_fn_atms_cash_plan (
				   org_cd,
				   BRANCH_cd,
				   site_cd,
				   mac_no,
				   cash_date,
				   cash_amt,
				   confirm_cash_amt,
				   office_nm,
				   org_send_confirm_yn,
				   update_date,
				   update_uid)
			select mac.org_cd
                  ,mac.BRANCH_cd
                  ,mac.site_cd
                  ,mac.mac_no
                  ,decode(send.send_date,'',mac.send_date,send.send_date) send_date
                  ,decode(send.confirm_amt,'',0,send.confirm_amt) confirm_amt
                  ,decode(send.send_amt,'',0,send.send_amt) send_amt
                  ,decode(send.office_nm,'',mac.office_nm,send.office_nm) office_nm
                  ,decode(send.orgSendYn,'','0',send.orgSendYn) orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select send.org_cd org_cd
                      ,send.BRANCH_cd
                      ,send.site_cd
                      ,send.mac_no
                      ,send.send_date
                      ,send.send_amt confirm_amt
                      ,send.send_amt
                      ,substr(off.office_nm,0,2) office_nm
                      ,'0' orgSendYn          
                from op.T_FN_SEND send
                    ,OP.t_cm_office off
                where send.send_date = vPostActDate
                and send.org_cd = '027'
                and send.send_type = '1'
                and send.dept_cd = off.dept_cd
                and send.office_cd = off.office_cd) send,
                (select mc.org_cd
                       ,mc.BRANCH_cd
                       ,mc.site_cd
                       ,mc.mac_no
                       ,vPostActDate send_date
                       ,'' confirm_amt
                       ,'' send_amt
                       ,substr(off.office_nm,0,2) office_nm
                       ,'' orgSendYn
                 from op.t_cm_mac mc
                     ,op.t_cm_site site
                     ,OP.t_cm_office off
                 where mc.org_cd = '027'
                 and mc.close_date is null
                 and mc.org_cd = site.org_cd
                 and mc.BRANCH_cd = site.BRANCH_cd
                 and mc.site_cd = site.site_cd
                 and site.fdept_cd = off.dept_cd
                 and site.foffice_cd = off.office_cd) mac
            where send.org_cd(+) = mac.org_cd
            and send.BRANCH_cd(+) = mac.BRANCH_cd
            and send.mac_no(+) = mac.mac_no
            and send.site_cd(+) = mac.site_cd;
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsCashPlan', 
										   vResult, 
										   pDemandDate);

    END sp_createAtmsCashPlan;
	
	/* 국민은행 운영자금청구서 통보 데이터 생성 */
    PROCEDURE sp_createAtmsOperFundsDemand (
        pDemandDate  IN op.t_fn_close.close_date%TYPE   default null,
        pIsDeleting  IN VARCHAR                         default '1'
    ) 
    IS
		--pDemandDate  IN op.t_fn_close.close_date%TYPE   ,
        --pIsDeleting  IN VARCHAR                            DEFAULT '1'
        
        
        vBeforeDate op.t_fn_close.close_date%TYPE	:= op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate); --전영업일
		vPostActDate op.t_fn_close.close_date%TYPE	:= OP.sf_getPostActDate(pDemandDate); --익영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE	:= op.sf_getPreActDate(pDemandDate, 2);

		vResult	   OP.t_cm_batch_result.pgm_result%TYPE	:= 'OK';	-- 처리결과

        
    BEGIN
    	if pDemandDate is null then 
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		if pIsDeleting is null or pIsDeleting = '' then
			pIsDeleting := '1';
		end if;
		
		BEGIN
			-- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
			IF pIsDeleting = '1' THEN
				DELETE OP.t_fn_atms_operfunds_demand    --테이블 꼭 확인할것 잘못하면 X됨
				 WHERE req_date = pDemandDate
         and   org_cd = '004';
			ELSE 
				RAISE eAlreadyExistsException;
			END IF;

			INSERT INTO OP.t_fn_atms_operfunds_demand (
				   org_cd,
				   BRANCH_cd,
				   req_date,
				   operfunds_sum,
				   requir_start_date,
				   requir_end_date,
				   requir_term,
				   oper_funds,
				   next_cash_amt,
				   before_add_amt,
				   before_collect_amt,
				   over_amt,
				   unset_before_amt,
				   requir_amt,
				   unset_amt,
				   stock_amt,
				   office_nm,
				   org_send_yn,
				   update_date,
				   update_uid)
			select main.org_cd org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      ,nvl((send.send_amt + main.pre_collect_amt + main.differ_amt - main.pre_add_trans_amt),0) stock_amt
			      ,substr(main.office_nm,0,2) office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
			from
			       (select org_cd
					      ,BRANCH_cd
					      ,demand_date
					      ,vPostActDate PostActDate
					      ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					      ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					       to_date(vPostActDate,'YYYYMMDD')
					       requir_term
					      ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					      ,sum(post_trans_amt) post_trans_amt
					      ,sum(pre_add_trans_amt) pre_add_trans_amt
					      ,sum(pre_collect_amt) pre_collect_amt
					      ,sum(differ_amt) differ_amt
					      ,0 unset_before_amt
					      ,(sum(post_trans_amt) + sum(pre_add_trans_amt) - sum(pre_collect_amt) - sum(differ_amt)) demand_amt
					      ,0 unset_amt
					      ,'' office_nm
					      ,'0' orgSendYn
					      ,sysdate update_date
					      ,'SYSTEM' update_uid
					from op.T_FN_PACK_OFCJJM
					where demand_date = pDemandDate
					and org_cd = '004'
					group by demand_date
					        ,org_cd
					        ,BRANCH_cd) main,
					
					(select org_cd    -- 당일 현송금액 가져오기
					       ,BRANCH_cd
					       ,sum(send_amt) send_amt
					 from op.T_FN_SEND
					 where send_date = pDemandDate
					 and org_cd = '004'
					 and send_type = '1'
					 group by org_cd, BRANCH_cd) send
			where main.org_cd = send.org_cd(+)
			and main.BRANCH_cd = send.BRANCH_cd(+)
					
					union
					
			select main.org_cd org_cd
			      ,main.BRANCH_cd
			      ,main.demand_date
				  ,'ZZ' operfunds_sum
			      ,main.PostActDate
			      ,main.BeforePostActDate
			      ,main.requir_term
			      ,main.oper_found
			      ,main.post_trans_amt
			      ,main.pre_add_trans_amt
			      ,main.pre_collect_amt
			      ,main.differ_amt
			      ,main.unset_before_amt
			      ,main.demand_amt
			      ,main.unset_amt
			      ,nvl(invent.safe_amt,0) stock_amt
			      ,main.office_nm
			      ,main.orgSendYn
			      ,main.update_date
			      ,main.update_uid
			from
					    (select org_cd
					          ,'9999' BRANCH_cd
					          ,demand_date
					          ,vPostActDate PostActDate
					          ,op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)) BeforePostActDate
					          ,to_date(op.sf_getBeforeDate(OP.sf_getPostActDate(vPostActDate)),'YYYYMMDD') -
					           to_date(vPostActDate,'YYYYMMDD')
					           requir_term
					          ,sum(post_trans_amt) + sum(pre_add_trans_amt) oper_found
					          ,sum(post_trans_amt) post_trans_amt
					          ,sum(pre_add_trans_amt) pre_add_trans_amt
					          ,sum(pre_collect_amt) pre_collect_amt
					          ,sum(differ_amt) differ_amt
					          ,sum(pre_respect_amt) unset_before_amt
					          ,sum(demand_amt) demand_amt
					          ,sum(cur_respect_amt) unset_amt
					          ,'' office_nm
					          ,'0' orgSendYn
					          ,sysdate update_date
					          ,'SYSTEM' update_uid
					    from op.t_fn_pack_demand
					    where demand_date = pDemandDate
					    and org_cd = '004'
					    group by demand_date,org_cd) main,
					    
					    (select org_cd
					          ,sum(safe_amt) safe_amt
					    from op.t_fn_pack_invent
					    where close_date = vPreActDate
					    and org_cd = '004'
					    group by org_cd) invent
					
			where main.org_cd = invent.org_cd(+);
			
			COMMIT;

		EXCEPTION
		    WHEN eAlreadyExistsException THEN
				vResult := 'Aleady Data Exists!!';
		    WHEN OTHERS THEN
			    ROLLBACK;
				vResult := SQLERRM;
        END;

		op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsOperFundsDemand', 
										   vResult, 
										   pDemandDate);

    END sp_createAtmsOperFundsDemand;
	
END op.pkg_fn_KbAtms_Demand;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_KbAtms_DemandManager AS

    PROCEDURE sp_KbAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE	default null,
		pFromJobNo		IN		NUMBER								default 0,
		pToJobNo		IN		NUMBER								default 9999999
    )
    IS
	    vIsHoliday		OP.t_fn_calendar.holiday_yn%TYPE := 0;
		centerYn	    VARCHAR(1) := 0;
		
	/* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
		
    BEGIN
    	if pDemandDate is null then
    		pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
    	end if;
    	
		BEGIN 
			SELECT holiday_yn 
			  INTO vIsHoliday
			  FROM OP.t_fn_calendar
			 WHERE std_date = pDemandDate;
		EXCEPTION
		    WHEN NO_DATA_FOUND THEN
				 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
		END;
		
		BEGIN 
			select '1' result
			INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
		EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
		END;
		
		/* 국민은행 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KbAtms_Demand.sp_createAtmsCollect(pDemandDate,'1');
        END IF;

		/* 국민은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KbAtms_Demand.sp_createAtmsReport(pDemandDate,'1');
        END IF;

		/* 국민은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KbAtms_Demand.sp_createAtmsAddCashReport(pDemandDate,'1');
        END IF;

        /* 국민은행 현송계획서 데이터 생성 */
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KbAtms_Demand.sp_createAtmsCashPlan(pDemandDate,'1');
        END IF;

        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KbAtms_Demand.sp_createAtmsOperFundsDemand(pDemandDate,'1');
        END IF;
		
    op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_DemandManager.sp_KbAtms_batchProcess', 
                              		   'OK', 
			   				  		   pDemandDate);
	EXCEPTION 
    	WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_DemandManager.sp_KbAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
	    WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_DemandManager.sp_KbAtms_batchProcess', 
			                                   SQLERRM, 
											   pDemandDate);
    END sp_KbAtms_batchProcess;

END op.pkg_fn_KbAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_KuAtms_DemandManager AS

    PROCEDURE sp_KuAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(2000);
        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and upper(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 기업은행 회수자금결과 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KuAtms_Demand.sp_ku_createAtmsCollect(pDemandDate);
        END IF;

        /* 기업은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KuAtms_Demand.sp_ku_createAtmsReport(pDemandDate);
        END IF;

        /* 기업은행 추가현송 보고서 데이터 생성 */
       IF vIsHoliday = '0' AND (14 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KuAtms_Demand.sp_ku_createAtmsAddCashReport(pDemandDate);
        END IF;

        /*기업은행 현송계획서 데이터 생성 */
  --20080908 아침에 풀고 20080910 아침에 막기~
  /*
        IF vIsHoliday = '0' AND (20 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KuAtms_Demand.sp_ku_createAtmsCashPlan(pDemandDate);
        END IF;
  */
        /* 운영자금 청구서 통보 데이터 생성 */
        IF vIsHoliday = '0' AND (30 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_KuAtms_Demand.sp_kucreateAtmsOperFundsDemand(pDemandDate);
        END IF;
        
    op.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_DemandManager.sp_KuAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_DemandManager.sp_KuAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('pkg_fn_KuAtms_DemandManager.sp_KuAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_KuAtms_batchProcess;

END op.pkg_fn_KuAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_ShAtms_Demand AS



    /* 신한은행 회수자금결과 통보 데이터 생성 */

    PROCEDURE sp_sh_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE close_date >= vPreActDate
                 and close_date <= vBeforeDate
         and org_cd ='088';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
      
            INSERT INTO op.t_fn_atms_collect (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   close_date,
                   before_cash_amt,
                   add_cash_amt,
                   add_cash_date,
                   collect_amt,
                   unattended_amt,
                   unattended_cnt,
                   report_yn,
                   office_nm,
                   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
                   update_date,
                   update_uid)
            select main.org_cd orgCd,             
                   main.BRANCH_cd BRANCHCd,
                   main.site_cd siteCd,
                   main.mac_no macNo,
                   main.close_date closeDate,
                   main.pre_amt preAmt,
                   nvl(main.send_amt,0) plusSendAmt,
                   main.send_date plusSendDate,
                   main.close_amt collect_Amt,       
                   nvl(notEnd.notEndAmt,0) notEndAmt,
                   nvl(notEnd.notEndCnt,0) notEndCnt,
                   decode(notEnd.notEndCnt,null,'0','1') notEndYn,
                   substr2(off.office_nm,0,2) officeNm,
                   '0' orgSendYn,
             main.out_amt,
             main.in_amt,
             main.close_amt closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
                   SYSDATE,
                   'SYSTEM'
            from
                   (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='088') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='088'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
                          -- MAIN: 추가현송이면서 현송완료인것
                    (select notend.org_cd
                           ,notend.BRANCH_cd
                           ,notend.site_cd
                           ,notend.mac_no
                           ,notend.notEndCnt
                           ,notend.notEndAmt
                     from op.t_fn_close cls,
                         (select org_cd
                               ,BRANCH_cd
                               ,mac_no
                               ,site_cd
                               ,count(deal_amt) notEndCnt
                               ,sum(deal_amt) notEndAmt
                         from op.t_fn_notend
                         where notend_date >= vPreActDate
                         and notend_date <= vBeforeDate
                         and org_cd = '088'
                         and owner_org_cd <> '096'
                         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
                     where cls.close_date = vPreActDate
                     and cls.org_cd = '088'
                     and cls.differ_amt > 0
                     and cls.org_cd = notend.org_cd
                     and cls.BRANCH_cd = notend.BRANCH_cd
                     and cls.mac_no = notend.mac_no
                     and cls.site_cd = notend.site_cd) notEnd,
                     -- NOTEND: 과여금이 발생한 것
                    OP.t_cm_office off
                
                where main.org_cd = notEnd.org_cd(+)
                and main.BRANCH_cd = notEnd.BRANCH_cd(+)
                and main.site_cd = notEnd.site_cd(+)
                and main.mac_no = notEnd.mac_no(+)
                and main.dept_cd = off.dept_cd(+)
                and main.office_cd = off.office_cd(+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsCollect', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsCollect;

    /* 신한은행 미처리금액 보고서 데이터 생성 */ --ok
    PROCEDURE sp_sh_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL OR pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;
        
        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and   org_cd ='088';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;


        INSERT INTO OP.t_fn_atms_report (
                   notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
                  ,main.org_cd org_cd 
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr2(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                      ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '088'
                and owner_org_cd <> '096') main,
                OP.T_CM_MEMBER mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_Demand.sp_sh_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsReport;
    
    
    
END op.pkg_fn_ShAtms_Demand;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_ShAtms_DemandManager AS

    PROCEDURE sp_ShAtms_batchProcess (
        pDemandDate     IN      op.t_fn_close.close_date%TYPE DEFAULT null  ,
        pFromJobNo        IN      NUMBER DEFAULT 0,
        pToJobNo      IN      NUMBER DEFAULT 9999999
    )
    IS
        vIsHoliday      OP.t_fn_calendar.holiday_yn%TYPE := 0;
        centerYn        VARCHAR(1) := 0;
        
    /* 예외 정의 */
    BATCH_FAILED        EXCEPTION;
    
    /* 에러메세지 */
    vErrMsg             VARCHAR(1000);
        
    BEGIN
        if pDemandDate IS NULL OR pDemandDate = '' then
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        end if;
        
        if pFromJobNo IS NULL OR pFromJobNo = '' then
            pFromJobNo := 0;
        end if;
        
        if pToJobNo IS NULL OR pToJobNo = '' then
            pToJobNo := 9999999;
        end if;
        
        BEGIN 
            SELECT holiday_yn 
              INTO vIsHoliday
              FROM OP.t_fn_calendar
             WHERE std_date = pDemandDate;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 RAISE_APPLICATION_ERROR(20002, '카렌다 정보가 없습니다.');
        END;
        
        BEGIN 
            select '1' result
            INTO centerYn
            from dual
            where exists
                (select pgm_result from OP.t_cm_batch_result
                where job_date = pDemandDate
                and UPPER(pgm_id) = 'PKG_FN_DEMANDMANAGER.SP_BATCHPROCESS'
                and pgm_result = 'OK');
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE BATCH_FAILED;
        END;
        
        /* 신한은행 회수자금결과 통보 데이터 생성 */
    
        IF vIsHoliday = '0' AND (10 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_ShAtms_Demand.sp_sh_createAtmsCollect(pDemandDate);
        END IF;
      
        /* 신한은행 미처리금액 보고서 데이터 생성 */
        IF vIsHoliday = '0' AND (12 BETWEEN pFromJobNo AND pToJobNo) THEN
                op.pkg_fn_ShAtms_Demand.sp_sh_createAtmsReport(pDemandDate);
        END IF;

        
    op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess', 
                                       'OK', 
                                       pDemandDate);
    EXCEPTION 
        WHEN BATCH_FAILED
        THEN
            vErrMsg := '본사 청구 BATCH 결과가 없습니다.';
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess',
                                               vErrMsg,
                                               pDemandDate);
        WHEN OTHERS THEN
            op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_DemandManager.sp_ShAtms_batchProcess', 
                                               SQLERRM, 
                                               pDemandDate);
    END sp_ShAtms_batchProcess;

END op.pkg_fn_ShAtms_DemandManager;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_ShAtms_Demand_0330 AS



    /* 신한은행 회수자금결과 통보 데이터 생성 */

    PROCEDURE sp_sh_createAtmsCollect (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준)
            IF pIsDeleting = '1' THEN
                DELETE op.t_fn_atms_collect    --테이블 꼭 확인할것 잘못하면 X됨
                 WHERE close_date >= vPreActDate
                 and close_date <= vBeforeDate
         and org_cd ='092';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;
      
            INSERT INTO op.t_fn_atms_collect (
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   close_date,
                   before_cash_amt,
                   add_cash_amt,
                   add_cash_date,
                   collect_amt,
                   unattended_amt,
                   unattended_cnt,
                   report_yn,
                   office_nm,
                   org_send_yn,
           out_amt,
           in_amt,
           close_amt,
                   update_date,
                   update_uid)
            select --main.org_cd orgCd,             
                   '092' orgCd,             
                   main.BRANCH_cd BRANCHCd,
                   main.site_cd siteCd,
                   main.mac_no macNo,
                   main.close_date closeDate,
                   main.pre_amt preAmt,
                   nvl(main.send_amt,0) plusSendAmt,
                   main.send_date plusSendDate,
                   main.close_amt collect_Amt,       
                   nvl(notEnd.notEndAmt,0) notEndAmt,
                   nvl(notEnd.notEndCnt,0) notEndCnt,
                   decode(notEnd.notEndCnt,null,'0','1') notEndYn,
                   substr2(off.office_nm,0,2) officeNm,
                   '0' orgSendYn,
             main.out_amt,
             main.in_amt,
             main.close_amt closeAmt,  -- 현마감금액과 회수금액은 동일하게 가고 있음.
                   SYSDATE,
                   'SYSTEM'
            from
                   (select cls.org_cd
                          ,cls.BRANCH_cd
                          ,cls.site_cd
                          ,cls.mac_no 
                          ,cls.close_date
                          ,cls.pre_amt
                          ,send.send_amt
                          ,send.send_date
                          ,cls.close_amt
                          ,cls.dept_cd
                          ,cls.office_cd
                          ,cls.out_amt
                          ,cls.in_amt
                    from (select *
                          from op.t_fn_close
                          where close_date >= vPreActDate
                          and close_date <= vBeforeDate
                          and org_cd='088') cls,
                          
                         (select min(b.send_date) send_date
                                ,b.org_cd
                                ,b.BRANCH_cd
                                ,b.site_cd
                                ,b.mac_no
                                ,sum(b.send_amt) send_amt
                          from op.t_fn_close a
                              ,op.T_FN_SEND b
                          where a.close_date >= vPreActDate
                          and a.close_date <= vBeforeDate
                          and b.send_date >= vPreActDate
                          and b.send_date <= vBeforeDate
                          and a.org_cd='088'
                          and a.close_date||close_time < b.send_date||b.send_time
                          and a.org_cd = b.org_cd
                          and b.send_type = '2'
                          and b.send_status = '2'
                          and a.close_time < b.send_time
                          and a.BRANCH_cd = b.BRANCH_cd
                          and a.site_cd = b.site_cd
                          and a.mac_no = b.mac_no
                          group by b.org_cd
                                  ,b.BRANCH_cd
                                  ,b.site_cd
                                  ,b.mac_no) send
                    where cls.close_date = send.send_date(+)
                    and cls.org_cd = send.org_cd(+)
                    and cls.BRANCH_cd = send.BRANCH_cd(+)
                    and cls.site_cd = send.site_cd(+)
                    and cls.mac_no = send.mac_no(+)) main,
                          -- MAIN: 추가현송이면서 현송완료인것
                    (select notend.org_cd
                           ,notend.BRANCH_cd
                           ,notend.site_cd
                           ,notend.mac_no
                           ,notend.notEndCnt
                           ,notend.notEndAmt
                     from op.t_fn_close cls,
                         (select org_cd
                               ,BRANCH_cd
                               ,mac_no
                               ,site_cd
                               ,count(deal_amt) notEndCnt
                               ,sum(deal_amt) notEndAmt
                         from op.t_fn_notend
                         where notend_date >= vPreActDate
                         and notend_date <= vBeforeDate
                         and org_cd = '088'
                         and owner_org_cd <> '096'
                         group by org_cd,BRANCH_cd,mac_no,site_cd) notend
                     where cls.close_date = vPreActDate
                     and cls.org_cd = '088'
                     and cls.differ_amt > 0
                     and cls.org_cd = notend.org_cd
                     and cls.BRANCH_cd = notend.BRANCH_cd
                     and cls.mac_no = notend.mac_no
                     and cls.site_cd = notend.site_cd) notEnd,
                     -- NOTEND: 과여금이 발생한 것
                    OP.t_cm_office off
                
                where main.org_cd = notEnd.org_cd(+)
                and main.BRANCH_cd = notEnd.BRANCH_cd(+)
                and main.site_cd = notEnd.site_cd(+)
                and main.mac_no = notEnd.mac_no(+)
                and main.dept_cd = off.dept_cd(+)
                and main.office_cd = off.office_cd(+);
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_KbAtms_Demand.sp_createAtmsCollect', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsCollect;

    /* 신한은행 미처리금액 보고서 데이터 생성 */ --ok
    PROCEDURE sp_sh_createAtmsReport (
        pDemandDate  IN op.t_fn_close.close_date%TYPE DEFAULT null   ,
        pIsDeleting  IN VARCHAR                            DEFAULT '1'
    ) 
    IS

        vBeforeDate op.t_fn_close.close_date%TYPE   := op.sf_getBeforeDate(pDemandDate); --전일
        vPreActDate op.t_fn_close.close_date%TYPE   := op.sf_getPreActDate(pDemandDate); --전영업일
        --vPrePreActDate op.t_fn_pack_invent.close_date%TYPE    := op.sf_getPreActDate(pDemandDate, 2);

        vResult    OP.t_cm_batch_result.pgm_result%TYPE := 'OK';    -- 처리결과

        
    BEGIN
        IF pDemandDate IS NULL or pDemandDate = '' THEN
            pDemandDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
        END IF;

        BEGIN
            -- 기존데이타 존재여부 체크 (청구일의 전영업일자 기준) 여기는 배치 돌리기 전에 주의 해서 돌려야 함. 삭제 일자가 기준이 없슴.
            IF pIsDeleting = '1' THEN
                DELETE OP.t_fn_atms_report
                 WHERE to_char(update_date,'YYYYMMDD') = to_char(sysdate,'YYYYMMDD')
         and   org_cd ='092';
            ELSE 
                RAISE eAlreadyExistsException;
            END IF;


        INSERT INTO OP.t_fn_atms_report (
                   notend_date,  
                   org_cd,
                   BRANCH_cd,
                   site_cd,
                   mac_no,
                   trade_date,
                   serial_no,
                   unattended_amt,
                   trade_no,
                   trade_org,
                   account_no,
                   trade_type,
                   trade_amt,
                   finish_nm,
                   customer_nm,
                   tele_no,
                   office_nm,
                   memo,
                   org_send_yn,
                   update_date,
                   update_uid)
            select main.notend_date
                  --,main.org_cd org_cd 
                  ,'092'
                  ,main.BRANCH_cd
                  ,main.site_cd
                  ,main.mac_no
                  ,main.deal_date
                  ,decode(length(varchar(rownum)),1,'00'||rownum,2,'0'||rownum,rownum) unique_no
                  ,main.unattenedAmt
                  ,main.tran_no
                  ,main.bank_cd
                  ,main.account_no
                  ,main.deal_type
                  ,main.deal_amt
                  ,mem.member_nm
                  ,main.customer_nm
                  ,main.tele_no
                  ,substr2(off.office_nm,0,2) office_nm
                  ,main.memo
                  ,main.orgSendYn
                  ,sysdate
                  ,'SYSTEM'
            from
                (select notend_date
                      ,org_cd
                      ,BRANCH_cd
                      ,site_cd
                      ,mac_no
                      ,deal_date
                      ,unique_no
                      ,deal_amt unattenedAmt
                      ,tran_no
                      ,bank_cd
                      ,account_no
                      ,decode(deal_type,'1','2','2','2','3','1',null) deal_type
                      ,deal_amt
                      ,decode(update_uid,null,insert_uid,update_uid) user_id
                      ,'' customer_nm
                      ,'' tele_no
                      ,dept_cd
                      ,office_cd
                      ,'' memo
                      ,'0' orgSendYn
                from op.t_fn_notend
                where notend_date >= vPreActDate
                and notend_date <= vBeforeDate
                and org_cd = '088'
                and owner_org_cd <> '096') main,
                OP.t_cm_member mem,
                OP.t_cm_office off
            where main.user_id = mem.member_id(+)
            and main.dept_cd = off.dept_cd(+)
            and main.office_cd = off.office_cd(+)
            order by main.BRANCH_cd, main.mac_no;
            
            COMMIT;

        EXCEPTION
            WHEN eAlreadyExistsException THEN
                vResult := 'Aleady Data Exists!!';
            WHEN OTHERS THEN
                ROLLBACK;
                vResult := SQLERRM;
        END;

        op.pkg_fn_common.sp_createBatchResult('op.pkg_fn_ShAtms_Demand.sp_sh_createAtmsReport', 
                                           vResult, 
                                           pDemandDate);

    END sp_sh_createAtmsReport;
    
    
    
END op.pkg_fn_ShAtms_Demand_0330;

CREATE OR REPLACE PACKAGE BODY op.pkg_fn_common AS

	/* Batch JOB 처리결과 생성 */
	PROCEDURE sp_createBatchResult (
		pPgmId			IN		OP.t_cm_batch_result.pgm_id%TYPE,
		pPgmResult		IN		OP.t_cm_batch_result.pgm_result%TYPE,
		pJobDate		IN		OP.t_cm_batch_result.job_date%TYPE	default null ,
		pUserId			IN		OP.t_cm_batch_result.insert_uid%TYPE DEFAULT 'SYSTEM'	
	)
	IS

	BEGIN
		IF pJobDate = '' or pJobDate is null THEN
			pJobDate := TO_CHAR(SYSDATE, 'YYYYMMDD');
		END IF;
		
	    UPDATE OP.t_cm_batch_result 
		   SET pgm_result  = pPgmResult,
		       insert_uid  = pUserId,
			   insert_date = SYSDATE
		 WHERE job_date    = pJobDate
		   AND pgm_id      = pPgmId;
		
		IF SQL%NOTFOUND THEN
			INSERT INTO OP.t_cm_batch_result (
				job_date,
				pgm_id,
				pgm_result,
				insert_uid,
				insert_date)
			VALUES (
				pJobDate,
				pPgmId,
				pPgmResult,
				pUserId,
				SYSDATE);
		END IF;
		
		COMMIT;

	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
	END sp_createBatchResult;

 /*시퀀스 조회*/ 
 	FUNCTION sf_getSeq ( next in number) RETURN number
 	DETERMINISTIC
	IS
		vResult		number;
	BEGIN
		SELECT op.seq_nice.nextval
		  INTO vResult
		  FROM dual;
		
		RETURN vResult;
	END sf_getSeq;
  
	/* 요일 조회 */
	FUNCTION sf_getWeekday (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER DEFAULT 0			
	) RETURN VARCHAR
	DETERMINISTIC
	IS 
	
	BEGIN
		RETURN DAYOFWEEK(TO_DATE(pDate, 'YYYYMMDD') + pAmount);
	END sf_getWeekday;

	/* 요일 조회 */
	FUNCTION sf_getWeekdayString (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0						
	) RETURN VARCHAR
	DETERMINISTIC
	IS 
	   vResult VARCHAR(3);
	   vWeek varchar(2);
	
	BEGIN
		vWeek := sf_getWeekday(pDate, pAmount);
		
		/*
		if vWeek = '1' then
			vResult := '일';
		elsif vWeek = '2' then
			vResult := '월';
		elsif vWeek = '3' then
			vResult := '화';
		elsif vWeek = '4' then
			vResult := '수';
		elsif vWeek = '5' then
			vResult := '목';
		elsif vWeek = '6' then
			vResult := '금';
		elsif vWeek = '7' then
			vResult := '토';
		end if;
		*/
		
		
		CASE vWeek
	        WHEN '1' THEN vResult := '일';
	        WHEN '2' THEN vResult := '월';
	        WHEN '3' THEN vResult := '화';
	        WHEN '4' THEN vResult := '수';
	        WHEN '5' THEN vResult := '목';
	        WHEN '6' THEN vResult := '금';
	        WHEN '7' THEN vResult := '토';
	    END CASE;

		
		RETURN vResult;
	END sf_getWeekdayString;

 /* 다으주 금요일조회 */
	FUNCTION sf_getPreFriDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0						
	) RETURN VARCHAR
	DETERMINISTIC
	IS
		vResult		OP.t_fn_calendar.std_date%TYPE;
	BEGIN 
/*
    select case when  to_CHAR(to_date(pDate,'yyyymmdd'),'DAY') ='월요일' then to_char(to_date(pDate,'yyyymmdd')-3,'yyyymmdd')
                when  to_CHAR(to_date(pDate,'yyyymmdd'),'DAY') ='화요일' then to_char(to_date(pDate,'yyyymmdd')-4,'yyyymmdd')
                when  to_CHAR(to_date(pDate,'yyyymmdd'),'DAY') ='수요일' then to_char(to_date(pDate,'yyyymmdd')-5,'yyyymmdd')
                when  to_CHAR(to_date(pDate,'yyyymmdd'),'DAY') ='목요일' then to_char(to_date(pDate,'yyyymmdd')-6,'yyyymmdd')
                when  to_CHAR(to_date(pDate,'yyyymmdd'),'DAY') ='금요일' then to_char(to_date(pDate,'yyyymmdd')-7,'yyyymmdd') 
           end next_friday
    into vResult       
    from dual;
 */ 

    select case when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='2' then to_char(to_date(pDate,'yyyymmdd')-3,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='3' then to_char(to_date(pDate,'yyyymmdd')-4,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='4' then to_char(to_date(pDate,'yyyymmdd')-5,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='5' then to_char(to_date(pDate,'yyyymmdd')-6,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='6' then to_char(to_date(pDate,'yyyymmdd')-7,'yyyymmdd') 
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='7' then to_char(to_date(pDate,'yyyymmdd')-1,'yyyymmdd') 
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='1' then to_char(to_date(pDate,'yyyymmdd')-2,'yyyymmdd')                 
           end next_friday
    into vResult       
    from dual;
    
		RETURN vResult;
	END sf_getPreFriDate;
  
  
	/* 다으주 금요일조회 */
	FUNCTION sf_getPostFriDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER DEFAULT 0							
	) RETURN VARCHAR
	DETERMINISTIC
	IS
		vResult		OP.t_fn_calendar.std_date%TYPE;
	BEGIN 
		
    select case when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='2' then to_char(to_date(pDate,'yyyymmdd')+4,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='3' then to_char(to_date(pDate,'yyyymmdd')+3,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='4' then to_char(to_date(pDate,'yyyymmdd')+2,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='5' then to_char(to_date(pDate,'yyyymmdd')+1,'yyyymmdd')
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='6' then to_char(to_date(pDate,'yyyymmdd'),'yyyymmdd') 
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='7' then to_char(to_date(pDate,'yyyymmdd')+6,'yyyymmdd') 
                when  DAYOFWEEK(to_date(pDate,'yyyymmdd')) ='1' then to_char(to_date(pDate,'yyyymmdd')+5,'yyyymmdd') 
           end next_friday
    into vResult       
    from dual;
    
		RETURN vResult;
	END sf_getPostFriDate;
  
  
  /*휴일 여부조회 */
	FUNCTION sf_holiday_yn (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER	DEFAULT 0						
	) RETURN VARCHAR
	DETERMINISTIC
	IS
		vResult		OP.t_fn_calendar.std_date%TYPE;
	BEGIN 
		
          SELECT holiday_yn 
          into vResult       
			    FROM OP.t_fn_calendar
			    WHERE std_date = pDate;

   
		RETURN vResult;
	END  sf_holiday_yn;
  
  
	/* 전일 조회 */
	FUNCTION sf_getBeforeDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR 
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN TO_CHAR(TO_DATE(pDate, 'YYYYMMDD') - pAmount, 'YYYYMMDD');
	END sf_getBeforeDate;

	/* 익일 조회 */
	FUNCTION sf_getAfterDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR 
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN TO_CHAR(TO_DATE(pDate, 'YYYYMMDD') + pAmount, 'YYYYMMDD');
	END sf_getAfterDate;


	/* 전영업일 조회 */
	FUNCTION sf_getPreActDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
		vResult		OP.t_fn_calendar.std_date%TYPE;
	BEGIN
		SELECT std_date
		  INTO vResult
		  FROM (SELECT /*+ INDEX_DESC(OP.t_fn_calendar, pk_OP.t_fn_calendar) */
					   std_date,
					   ROWNUM rNum
				  FROM OP.t_fn_calendar
				 WHERE std_date < pDate
				   AND holiday_yn  = '0'
				   AND ROWNUM     <= pAmount
				   order by std_date desc
				   )
		 WHERE rNum = pAmount;

		RETURN vResult;
	END sf_getPreActDate;


	/* 익영업일 조회 */
	FUNCTION sf_getPostActDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
		vResult		OP.t_fn_calendar.std_date%TYPE;
	BEGIN
		SELECT std_date
		  INTO vResult
		  FROM (SELECT /*+ INDEX(OP.t_fn_calendar, pk_OP.t_fn_calendar) */
					   std_date,
					   ROWNUM rNum
				  FROM OP.t_fn_calendar
				 WHERE std_date > pDate
				   AND holiday_yn  = '0'
				   AND ROWNUM     <= pAmount
				   )
		 WHERE rNum = pAmount;
		
		RETURN vResult;
	END sf_getPostActDate;

	/* 전영업일 익일 조회 */
	FUNCTION sf_getAfterPreActDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN sf_getAfterDate(sf_getPreActDate(pDate, pAmount));
	END sf_getAfterPreActDate;

	/* 익영업일 익일 조회 */
	FUNCTION sf_getAfterPostActDate (
		pDate			IN		OP.t_fn_calendar.std_date%TYPE,
		pAmount			IN		NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN sf_getAfterDate(sf_getPostActDate(pDate, pAmount));
	END sf_getAfterPostActDate;


	/* 전영업일 전일 조회 */
	FUNCTION sf_getBeforePreActDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN sf_getBeforeDate(sf_getPreActDate(pDate, pAmount));
	END sf_getBeforePreActDate;

	
	/* 익영업일 전일 조회 */
	FUNCTION sf_getBeforePostActDate (
		pDate			OP.t_fn_calendar.std_date%TYPE,
		pAmount			NUMBER							DEFAULT 1
	) RETURN VARCHAR
	DETERMINISTIC
	IS
	
	BEGIN
		RETURN sf_getBeforeDate(sf_getPostActDate(pDate, pAmount));
	END sf_getBeforePostActDate;
	
  
  
END op.pkg_fn_common;

