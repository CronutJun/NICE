package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TCtRemoteHistory;
import com.nicetcm.nibsplus.broker.msg.model.TCtRemoteHistorySpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TCtRemoteHistorySpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TCtRemoteHistorySpec;
import java.util.List;
import java.util.Map;

public class TCtRemoteHistorySqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String countBySpec(TCtRemoteHistorySpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_CT_REMOTE_HISTORY");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String deleteBySpec(TCtRemoteHistorySpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_CT_REMOTE_HISTORY");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String insertSelective(TCtRemoteHistory record) {
        BEGIN();
        INSERT_INTO("OP.T_CT_REMOTE_HISTORY");
        
        if (record.getCreateDate() != null) {
            VALUES("CREATE_DATE", "#{createDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateSeq() != null) {
            VALUES("CREATE_SEQ", "#{createSeq,jdbcType=OTHER}");
        }
        
        if (record.getCreateTime() != null) {
            VALUES("CREATE_TIME", "#{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNo() != null) {
            VALUES("ERROR_NO", "#{errorNo,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorMsg() != null) {
            VALUES("ERROR_MSG", "#{errorMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            VALUES("ORG_CD", "#{orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgNm() != null) {
            VALUES("ORG_NM", "#{orgNm,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            VALUES("BRANCH_CD", "#{branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchNm() != null) {
            VALUES("BRANCH_NM", "#{branchNm,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteCd() != null) {
            VALUES("SITE_CD", "#{siteCd,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteNm() != null) {
            VALUES("SITE_NM", "#{siteNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNo() != null) {
            VALUES("MAC_NO", "#{macNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNm() != null) {
            VALUES("MAC_NM", "#{macNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            VALUES("MEMBER_ID", "#{memberId,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberNm() != null) {
            VALUES("MEMBER_NM", "#{memberNm,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCd() != null) {
            VALUES("RMT_CD", "#{rmtCd,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtMsg() != null) {
            VALUES("RMT_MSG", "#{rmtMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getAppDate() != null) {
            VALUES("APP_DATE", "#{appDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRcvDate() != null) {
            VALUES("RCV_DATE", "#{rcvDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExeDate() != null) {
            VALUES("EXE_DATE", "#{exeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRmtStatus() != null) {
            VALUES("RMT_STATUS", "#{rmtStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCnt() != null) {
            VALUES("RMT_CNT", "#{rmtCnt,jdbcType=OTHER}");
        }
        
        if (record.getCreateDateRec() != null) {
            VALUES("CREATE_DATE_REC", "#{createDateRec,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNoRec() != null) {
            VALUES("ERROR_NO_REC", "#{errorNoRec,jdbcType=VARCHAR}");
        }
        
        if (record.getRegdate() != null) {
            VALUES("REGDATE", "#{regdate,jdbcType=TIMESTAMP}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String selectBySpec(TCtRemoteHistorySpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("CREATE_DATE");
        } else {
            SELECT("CREATE_DATE");
        }
        SELECT("CREATE_SEQ");
        SELECT("CREATE_TIME");
        SELECT("ERROR_NO");
        SELECT("ERROR_MSG");
        SELECT("ORG_CD");
        SELECT("ORG_NM");
        SELECT("BRANCH_CD");
        SELECT("BRANCH_NM");
        SELECT("SITE_CD");
        SELECT("SITE_NM");
        SELECT("MAC_NO");
        SELECT("MAC_NM");
        SELECT("MEMBER_ID");
        SELECT("MEMBER_NM");
        SELECT("RMT_CD");
        SELECT("RMT_MSG");
        SELECT("APP_DATE");
        SELECT("RCV_DATE");
        SELECT("EXE_DATE");
        SELECT("RMT_STATUS");
        SELECT("RMT_CNT");
        SELECT("CREATE_DATE_REC");
        SELECT("ERROR_NO_REC");
        SELECT("REGDATE");
        FROM("OP.T_CT_REMOTE_HISTORY");
        applyWhere(spec, false);
        
        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TCtRemoteHistory record = (TCtRemoteHistory) parameter.get("record");
        TCtRemoteHistorySpec spec = (TCtRemoteHistorySpec) parameter.get("spec");
        
        BEGIN();
        UPDATE("OP.T_CT_REMOTE_HISTORY");
        
        if (record.getCreateDate() != null) {
            SET("CREATE_DATE = #{record.createDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateSeq() != null) {
            SET("CREATE_SEQ = #{record.createSeq,jdbcType=OTHER}");
        }
        
        if (record.getCreateTime() != null) {
            SET("CREATE_TIME = #{record.createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNo() != null) {
            SET("ERROR_NO = #{record.errorNo,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorMsg() != null) {
            SET("ERROR_MSG = #{record.errorMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgNm() != null) {
            SET("ORG_NM = #{record.orgNm,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchNm() != null) {
            SET("BRANCH_NM = #{record.branchNm,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteCd() != null) {
            SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteNm() != null) {
            SET("SITE_NM = #{record.siteNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNo() != null) {
            SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNm() != null) {
            SET("MAC_NM = #{record.macNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            SET("MEMBER_ID = #{record.memberId,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberNm() != null) {
            SET("MEMBER_NM = #{record.memberNm,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCd() != null) {
            SET("RMT_CD = #{record.rmtCd,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtMsg() != null) {
            SET("RMT_MSG = #{record.rmtMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getAppDate() != null) {
            SET("APP_DATE = #{record.appDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRcvDate() != null) {
            SET("RCV_DATE = #{record.rcvDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExeDate() != null) {
            SET("EXE_DATE = #{record.exeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRmtStatus() != null) {
            SET("RMT_STATUS = #{record.rmtStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCnt() != null) {
            SET("RMT_CNT = #{record.rmtCnt,jdbcType=OTHER}");
        }
        
        if (record.getCreateDateRec() != null) {
            SET("CREATE_DATE_REC = #{record.createDateRec,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNoRec() != null) {
            SET("ERROR_NO_REC = #{record.errorNoRec,jdbcType=VARCHAR}");
        }
        
        if (record.getRegdate() != null) {
            SET("REGDATE = #{record.regdate,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_CT_REMOTE_HISTORY");
        
        SET("CREATE_DATE = #{record.createDate,jdbcType=VARCHAR}");
        SET("CREATE_SEQ = #{record.createSeq,jdbcType=OTHER}");
        SET("CREATE_TIME = #{record.createTime,jdbcType=VARCHAR}");
        SET("ERROR_NO = #{record.errorNo,jdbcType=VARCHAR}");
        SET("ERROR_MSG = #{record.errorMsg,jdbcType=VARCHAR}");
        SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        SET("ORG_NM = #{record.orgNm,jdbcType=VARCHAR}");
        SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        SET("BRANCH_NM = #{record.branchNm,jdbcType=VARCHAR}");
        SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        SET("SITE_NM = #{record.siteNm,jdbcType=VARCHAR}");
        SET("MAC_NO = #{record.macNo,jdbcType=VARCHAR}");
        SET("MAC_NM = #{record.macNm,jdbcType=VARCHAR}");
        SET("MEMBER_ID = #{record.memberId,jdbcType=VARCHAR}");
        SET("MEMBER_NM = #{record.memberNm,jdbcType=VARCHAR}");
        SET("RMT_CD = #{record.rmtCd,jdbcType=VARCHAR}");
        SET("RMT_MSG = #{record.rmtMsg,jdbcType=VARCHAR}");
        SET("APP_DATE = #{record.appDate,jdbcType=TIMESTAMP}");
        SET("RCV_DATE = #{record.rcvDate,jdbcType=TIMESTAMP}");
        SET("EXE_DATE = #{record.exeDate,jdbcType=TIMESTAMP}");
        SET("RMT_STATUS = #{record.rmtStatus,jdbcType=VARCHAR}");
        SET("RMT_CNT = #{record.rmtCnt,jdbcType=OTHER}");
        SET("CREATE_DATE_REC = #{record.createDateRec,jdbcType=VARCHAR}");
        SET("ERROR_NO_REC = #{record.errorNoRec,jdbcType=VARCHAR}");
        SET("REGDATE = #{record.regdate,jdbcType=TIMESTAMP}");
        
        TCtRemoteHistorySpec spec = (TCtRemoteHistorySpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    public String updateByPrimaryKeySelective(TCtRemoteHistory record) {
        BEGIN();
        UPDATE("OP.T_CT_REMOTE_HISTORY");
        
        if (record.getCreateTime() != null) {
            SET("CREATE_TIME = #{createTime,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNo() != null) {
            SET("ERROR_NO = #{errorNo,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorMsg() != null) {
            SET("ERROR_MSG = #{errorMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgNm() != null) {
            SET("ORG_NM = #{orgNm,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            SET("BRANCH_CD = #{branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchNm() != null) {
            SET("BRANCH_NM = #{branchNm,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteCd() != null) {
            SET("SITE_CD = #{siteCd,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteNm() != null) {
            SET("SITE_NM = #{siteNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNo() != null) {
            SET("MAC_NO = #{macNo,jdbcType=VARCHAR}");
        }
        
        if (record.getMacNm() != null) {
            SET("MAC_NM = #{macNm,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            SET("MEMBER_ID = #{memberId,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberNm() != null) {
            SET("MEMBER_NM = #{memberNm,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCd() != null) {
            SET("RMT_CD = #{rmtCd,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtMsg() != null) {
            SET("RMT_MSG = #{rmtMsg,jdbcType=VARCHAR}");
        }
        
        if (record.getAppDate() != null) {
            SET("APP_DATE = #{appDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRcvDate() != null) {
            SET("RCV_DATE = #{rcvDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getExeDate() != null) {
            SET("EXE_DATE = #{exeDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRmtStatus() != null) {
            SET("RMT_STATUS = #{rmtStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getRmtCnt() != null) {
            SET("RMT_CNT = #{rmtCnt,jdbcType=OTHER}");
        }
        
        if (record.getCreateDateRec() != null) {
            SET("CREATE_DATE_REC = #{createDateRec,jdbcType=VARCHAR}");
        }
        
        if (record.getErrorNoRec() != null) {
            SET("ERROR_NO_REC = #{errorNoRec,jdbcType=VARCHAR}");
        }
        
        if (record.getRegdate() != null) {
            SET("REGDATE = #{regdate,jdbcType=TIMESTAMP}");
        }
        
        WHERE("CREATE_DATE = #{createDate,jdbcType=VARCHAR}");
        WHERE("CREATE_SEQ = #{createSeq,jdbcType=OTHER}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_CT_REMOTE_HISTORY
     *
     * @mbggenerated Mon Jul 28 09:33:17 KST 2014
     */
    protected void applyWhere(TCtRemoteHistorySpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}