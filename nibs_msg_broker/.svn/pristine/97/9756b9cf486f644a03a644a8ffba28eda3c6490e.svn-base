package com.nicetcm.nibsplus.broker.msg.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.nicetcm.nibsplus.broker.msg.model.TFnSendReport;
import com.nicetcm.nibsplus.broker.msg.model.TFnSendReportSpec.Criteria;
import com.nicetcm.nibsplus.broker.msg.model.TFnSendReportSpec.Criterion;
import com.nicetcm.nibsplus.broker.msg.model.TFnSendReportSpec;
import java.util.List;
import java.util.Map;

public class TFnSendReportSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String countBySpec(TFnSendReportSpec spec) {
        BEGIN();
        SELECT("count(*)");
        FROM("OP.T_FN_SEND_REPORT");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String deleteBySpec(TFnSendReportSpec spec) {
        BEGIN();
        DELETE_FROM("OP.T_FN_SEND_REPORT");
        applyWhere(spec, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String insertSelective(TFnSendReport record) {
        BEGIN();
        INSERT_INTO("OP.T_FN_SEND_REPORT");
        
        if (record.getSendDate() != null) {
            VALUES("SEND_DATE", "#{sendDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCashTeamCd() != null) {
            VALUES("CASH_TEAM_CD", "#{cashTeamCd,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            VALUES("ORG_CD", "#{orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            VALUES("BRANCH_CD", "#{branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteCd() != null) {
            VALUES("SITE_CD", "#{siteCd,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkGubun() != null) {
            VALUES("WORK_GUBUN", "#{workGubun,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkStatus() != null) {
            VALUES("WORK_STATUS", "#{workStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getSendTime() != null) {
            VALUES("SEND_TIME", "#{sendTime,jdbcType=VARCHAR}");
        }
        
        if (record.getXpos() != null) {
            VALUES("XPOS", "#{xpos,jdbcType=DECIMAL}");
        }
        
        if (record.getYpos() != null) {
            VALUES("YPOS", "#{ypos,jdbcType=DECIMAL}");
        }
        
        if (record.getSido() != null) {
            VALUES("SIDO", "#{sido,jdbcType=VARCHAR}");
        }
        
        if (record.getGugun() != null) {
            VALUES("GUGUN", "#{gugun,jdbcType=VARCHAR}");
        }
        
        if (record.getDong() != null) {
            VALUES("DONG", "#{dong,jdbcType=VARCHAR}");
        }
        
        if (record.getRegDt() != null) {
            VALUES("REG_DT", "#{regDt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRegId() != null) {
            VALUES("REG_ID", "#{regId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditId() != null) {
            VALUES("EDIT_ID", "#{editId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditDt() != null) {
            VALUES("EDIT_DT", "#{editDt,jdbcType=TIMESTAMP}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String selectBySpec(TFnSendReportSpec spec) {
        BEGIN();
        if (spec != null && spec.isDistinct()) {
            SELECT_DISTINCT("SEND_DATE");
        } else {
            SELECT("SEND_DATE");
        }
        SELECT("CASH_TEAM_CD");
        SELECT("ORG_CD");
        SELECT("BRANCH_CD");
        SELECT("SITE_CD");
        SELECT("WORK_GUBUN");
        SELECT("WORK_STATUS");
        SELECT("SEND_TIME");
        SELECT("XPOS");
        SELECT("YPOS");
        SELECT("SIDO");
        SELECT("GUGUN");
        SELECT("DONG");
        SELECT("REG_DT");
        SELECT("REG_ID");
        SELECT("EDIT_ID");
        SELECT("EDIT_DT");
        FROM("OP.T_FN_SEND_REPORT");
        applyWhere(spec, false);
        
        if (spec != null && spec.getOrderByClause() != null) {
            ORDER_BY(spec.getOrderByClause());
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String updateBySpecSelective(Map<String, Object> parameter) {
        TFnSendReport record = (TFnSendReport) parameter.get("record");
        TFnSendReportSpec spec = (TFnSendReportSpec) parameter.get("spec");
        
        BEGIN();
        UPDATE("OP.T_FN_SEND_REPORT");
        
        if (record.getSendDate() != null) {
            SET("SEND_DATE = #{record.sendDate,jdbcType=VARCHAR}");
        }
        
        if (record.getCashTeamCd() != null) {
            SET("CASH_TEAM_CD = #{record.cashTeamCd,jdbcType=VARCHAR}");
        }
        
        if (record.getOrgCd() != null) {
            SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        }
        
        if (record.getBranchCd() != null) {
            SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        }
        
        if (record.getSiteCd() != null) {
            SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkGubun() != null) {
            SET("WORK_GUBUN = #{record.workGubun,jdbcType=VARCHAR}");
        }
        
        if (record.getWorkStatus() != null) {
            SET("WORK_STATUS = #{record.workStatus,jdbcType=VARCHAR}");
        }
        
        if (record.getSendTime() != null) {
            SET("SEND_TIME = #{record.sendTime,jdbcType=VARCHAR}");
        }
        
        if (record.getXpos() != null) {
            SET("XPOS = #{record.xpos,jdbcType=DECIMAL}");
        }
        
        if (record.getYpos() != null) {
            SET("YPOS = #{record.ypos,jdbcType=DECIMAL}");
        }
        
        if (record.getSido() != null) {
            SET("SIDO = #{record.sido,jdbcType=VARCHAR}");
        }
        
        if (record.getGugun() != null) {
            SET("GUGUN = #{record.gugun,jdbcType=VARCHAR}");
        }
        
        if (record.getDong() != null) {
            SET("DONG = #{record.dong,jdbcType=VARCHAR}");
        }
        
        if (record.getRegDt() != null) {
            SET("REG_DT = #{record.regDt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRegId() != null) {
            SET("REG_ID = #{record.regId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditId() != null) {
            SET("EDIT_ID = #{record.editId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditDt() != null) {
            SET("EDIT_DT = #{record.editDt,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String updateBySpec(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("OP.T_FN_SEND_REPORT");
        
        SET("SEND_DATE = #{record.sendDate,jdbcType=VARCHAR}");
        SET("CASH_TEAM_CD = #{record.cashTeamCd,jdbcType=VARCHAR}");
        SET("ORG_CD = #{record.orgCd,jdbcType=VARCHAR}");
        SET("BRANCH_CD = #{record.branchCd,jdbcType=VARCHAR}");
        SET("SITE_CD = #{record.siteCd,jdbcType=VARCHAR}");
        SET("WORK_GUBUN = #{record.workGubun,jdbcType=VARCHAR}");
        SET("WORK_STATUS = #{record.workStatus,jdbcType=VARCHAR}");
        SET("SEND_TIME = #{record.sendTime,jdbcType=VARCHAR}");
        SET("XPOS = #{record.xpos,jdbcType=DECIMAL}");
        SET("YPOS = #{record.ypos,jdbcType=DECIMAL}");
        SET("SIDO = #{record.sido,jdbcType=VARCHAR}");
        SET("GUGUN = #{record.gugun,jdbcType=VARCHAR}");
        SET("DONG = #{record.dong,jdbcType=VARCHAR}");
        SET("REG_DT = #{record.regDt,jdbcType=TIMESTAMP}");
        SET("REG_ID = #{record.regId,jdbcType=VARCHAR}");
        SET("EDIT_ID = #{record.editId,jdbcType=VARCHAR}");
        SET("EDIT_DT = #{record.editDt,jdbcType=TIMESTAMP}");
        
        TFnSendReportSpec spec = (TFnSendReportSpec) parameter.get("spec");
        applyWhere(spec, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    public String updateByPrimaryKeySelective(TFnSendReport record) {
        BEGIN();
        UPDATE("OP.T_FN_SEND_REPORT");
        
        if (record.getSendTime() != null) {
            SET("SEND_TIME = #{sendTime,jdbcType=VARCHAR}");
        }
        
        if (record.getXpos() != null) {
            SET("XPOS = #{xpos,jdbcType=DECIMAL}");
        }
        
        if (record.getYpos() != null) {
            SET("YPOS = #{ypos,jdbcType=DECIMAL}");
        }
        
        if (record.getSido() != null) {
            SET("SIDO = #{sido,jdbcType=VARCHAR}");
        }
        
        if (record.getGugun() != null) {
            SET("GUGUN = #{gugun,jdbcType=VARCHAR}");
        }
        
        if (record.getDong() != null) {
            SET("DONG = #{dong,jdbcType=VARCHAR}");
        }
        
        if (record.getRegDt() != null) {
            SET("REG_DT = #{regDt,jdbcType=TIMESTAMP}");
        }
        
        if (record.getRegId() != null) {
            SET("REG_ID = #{regId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditId() != null) {
            SET("EDIT_ID = #{editId,jdbcType=VARCHAR}");
        }
        
        if (record.getEditDt() != null) {
            SET("EDIT_DT = #{editDt,jdbcType=TIMESTAMP}");
        }
        
        WHERE("SEND_DATE = #{sendDate,jdbcType=VARCHAR}");
        WHERE("CASH_TEAM_CD = #{cashTeamCd,jdbcType=VARCHAR}");
        WHERE("ORG_CD = #{orgCd,jdbcType=VARCHAR}");
        WHERE("BRANCH_CD = #{branchCd,jdbcType=VARCHAR}");
        WHERE("SITE_CD = #{siteCd,jdbcType=VARCHAR}");
        WHERE("WORK_GUBUN = #{workGubun,jdbcType=VARCHAR}");
        WHERE("WORK_STATUS = #{workStatus,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table OP.T_FN_SEND_REPORT
     *
     * @mbggenerated Thu Jul 03 17:02:59 KST 2014
     */
    protected void applyWhere(TFnSendReportSpec spec, boolean includeSpecPhrase) {
        if (spec == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeSpecPhrase) {
            parmPhrase1 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{spec.oredCriteria[%d].allCriteria[%d].value} and #{spec.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{spec.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{spec.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{spec.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = spec.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}