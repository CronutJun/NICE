/****************************************************************************/
/* 01. 프로그램명 		: {NHFilemng.pc}		                           	*/
/* 02. 작  성  자       	: {방혜진}                                          	*/
/* 03. 작 성 일 자      	: {2006/08/14}                                      */
/* 04. 프로그램기능     	: {}												*/
/* 05. 입력FILE         	: 													*/
/* 06. 출력FILE         	:													*/ 
/* 07. 입력DATA HEADER  	: {}                                                */
/* 08. 출력DATA HEADER  	: {}                                                */
/* 09. 프로그램TYPE     	: {LIBRARY}                                         */
/* 10. LINK LIBRARY     : {}                                                */
/* 11. 작업주기         	: {0건/0일}                                         	*/
/* 12. TR-CODE          : {}                                                */
/* 13. 사용부서         	: {전산부}                                          	*/
/* 14. POWER SERVICE    : {0}                                               */
/* 15. REMARKS 사항     	: {}                                                */
/****************************************************************************/

/****************************************************************************/
/* SYSTEM HEADER 정의                                                       	*/
/****************************************************************************/
#include	<stdio.h>
#include	<string.h>
#include	<stdlib.h>
#include	<errno.h>
#include	<signal.h>
#include	<fcntl.h>
#include	<netdb.h>
#include	<math.h>
#include	<ftw.h>
#include	<sys/ioctl.h>
#include	<sys/types.h>
#include	<netinet/in.h>
#include	<arpa/inet.h>

/****************************************************************************/
/* 사용자 HEADER 정의                                                       */
/****************************************************************************/
#include    "../include/dberrno.h"
#include    "../include/commdef.h"
#include    "../include/struct.h"

#define APP_NAME	"NHFilemng"
#define	LOG_NAME	"nhfilemng"

EXEC SQL INCLUDE SQLCA;

/****************************************************************************/
/* FUNCTION PROTO TYPE 정의                                                 */
/****************************************************************************/
int 	list( char * pName, struct stat * psuStatus, int nType );
int	 	ReadFileProc( char * pFile );
void    CleanUp(int Sig);

/****************************************************************************/
/* 사용자 외부변수 및 공용변수 정의                                         */
/****************************************************************************/
varchar huid[20];
varchar hpid[20];

short   logflg;							/* log function(logger) on/off flag */
int     logdev;							/* log function(logger) file desc.  */

pid_t	process_id = 0;

void main(int argc, char *argv[])
{
	long	lPrevDate;
	char	szPath[1024];
	
	if ( fnCheckApplState( APP_NAME ) < 0 )
	{
		printf( "[%s]Appl is already started ... Exit\n\n", APP_NAME );
		exit(0);
	}
	
	lPrevDate = GetCurDate();
	/* log 파일 형식 지정 LOG - text type HEX - hexa type */
	logflg = LOG;
	if ( fnCheckLogFile( LOG_NAME ) < 0 )
	{
		printf( ">>> [main] log file create fail\n");
		/* LogFile Error 이라도 작업 진행 */
	}
	/*- LOG FILE 처리 ------------------------------------------------------*/
	
	char	szDBUser[50];
	char	szDBPwd[50];
	char	szDBSID[50];
	char 	hDBConn[100];

	memset((char *)szDBUser	, 	(int)0x00, sizeof(szDBUser	));
	memset((char *)szDBPwd	, 	(int)0x00, sizeof(szDBPwd	));
	memset((char *)szDBSID	, 	(int)0x00, sizeof(szDBSID	));

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_USER=", szDBUser ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB USER Get Error \n" );
   		exit(0);
	}

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_PWD=", szDBPwd ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB PWD Get Error \n" );
   		exit(0);
	}

	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)"DB_SID=", szDBSID ) < 0 )
	{
		printf( "main : rd_cnfg_pram DB SID Get Error \n" );
   		exit(0);
	}
	
	memset( hDBConn, 0x00, sizeof( hDBConn ) );

	sprintf( hDBConn, "%s/%s@%s", szDBUser, szDBPwd, szDBSID );

	EXEC SQL CONNECT :hDBConn;
	
	if ( sqlca.sqlcode != DB_SUCCESS )
	{
		logger( "Connect Err: %.100s\n", SqlErrMsg );
		CleanUp(0);
	}	
   	
	
	memset((char *)szPath, 	(int)0x00, sizeof(szPath));
	if ( rd_cnfg_parm((char *)SAM_FILE, (char *)NH_TRAN_FILE_PATH, szPath ) < 0 )
	{
		logger( "main : rd_cnfg_pram NH_TRAN_FILE_PATH Get Error = [%s]\n", szPath );
   		CleanUp(0);
	}
	
	
	ftw(szPath, list, 1);
	
	
	exit(0);
}

int list( char * pName, struct stat * psuStatus, int nType )
{
	char szBackName[512];
	/* if the stat call failed, just return */
	if( nType == FTW_NS )
	{
		return (0);		
	}
	
	/*
	 *	otherwise print object name,
	 *	permissions and "*" postfix
	 *	if object is a directory
	 */
	if( nType == FTW_F )
	{		
		/* printf( "%-30s\t0%3o\n", pName, psuStatus->st_mode&0777);*/
		
		if( !memcmp(&pName[strlen(pName) - 4], ".txt", 4 ) )		
		{
			printf( "%-30s\n", pName);
			
			if( ReadFileProc( pName ) == 0 )
			{
				memset( szBackName, 0x00, sizeof(szBackName) );
				
				memcpy( szBackName, pName, strlen(pName) - 4 );
				strcat( szBackName, ".bak" );
				
				rename(pName, szBackName);
			}
		}
		
	}
	/*
	else
	{
		printf( "%-30s*\t0%3o\n", pName, psuStatus->st_mode&0777);		
	}
	*/
	
	return (0);
}

int ReadFileProc( char * pFile )
{
	FILE 	*fp;
	
	char 	szRead[1024];
	int		nTotCnt = 0;
	int		nIndex;
	char 	szDealNo[12+1];	
	
	struct FTP_NH_TRAN_HEADER	suHead;
	struct FTP_NH_TRAN_DATA		suData;
	struct FTP_NH_TRAN_TRAILER	suTrailer;
	
	memset( &suHead, 0x00, FTP_NH_TRAN_HEADER_LEN );
	memset( &suData, 0x00, FTP_NH_TRAN_DATA_LEN );
	memset( &suTrailer, 0x00, FTP_NH_TRAN_TRAILER_LEN );
		
	memset( szRead, 0x00, sizeof(szRead) );

	if( (fp = fopen(pFile, "r")) == NULL ) return;
	
	char szTemp[512];
	
	if( fgets(szRead, sizeof(szRead), fp ) == NULL )
	{
		logger( "HEADER Read Error !!!\n\n" );
		return 0;
	}
	
	fnParseRcvData( FTP_NH_TRAN_HEADER_CNT, g_naryFTP_NH_TRAN_HEADER,
						(char *)&suHead, szRead );
	
	nTotCnt = atoi( suHead.tot_record_cnt );

	nIndex = 1;

	logger("file Header read[%s] \n", pFile);
	EXEC SQL delete FROM T_FN_NICE_TRAN_NH WHERE DEAL_DATE = :suHead.deal_date;
	
	EXEC SQL COMMIT WORK;
	
	logger("delete  T_FN_NICE_TRAN_NH [%s]\n", suHead.deal_date);

	while( nIndex <= nTotCnt )
	{
		memset( szRead, 0x00, sizeof(szRead) );
		memset( &suData, 0x00, FTP_NH_TRAN_DATA_LEN );
		
		if( fgets(szRead, sizeof(szRead), fp ) == NULL )
		{
			logger( "Data Read Error - nIndex[%d] - nTotCnt[%d] !!!\n\n", nIndex, nTotCnt );
			
			EXEC SQL ROLLBACK WORK;
			
			return 0;
		}
		
		fnParseRcvData( FTP_NH_TRAN_DATA_CNT, g_naryFTP_NH_TRAN_DATA,
						(char *)&suData, szRead );
						
		if( nIndex != atoi( suData.data_seq ) )
		{
			logger( "Data Read Error 데이터 순서가 맞지 않습니다.- nIndex[%d] - suData.data_seq[%s] !!!\n\n", 
							nIndex, suData.data_seq );
			
			EXEC SQL ROLLBACK WORK;
			
			return 0;
		}
		
		
		memset( szDealNo, 0x00, sizeof( szDealNo ) );
		
		sprintf( szDealNo, "96%s", &suData.deal_no[3] );
		
		
		EXEC SQL INSERT INTO T_FN_NICE_TRAN_NH
							(
								  DEAL_DATE  ,
								  DEAL_NO    ,
								  WORK_TYPE  ,
								  DEAL_AMT   ,
								  CUST_FEE   ,
								  RESPONSE_CD,
								  INSERT_DATE,
								  UPDATE_DATE
							)
					VALUES  (
								:suData.deal_date,
								:szDealNo,
								'1',
								:suData.deal_amt,
								:suData.cust_fee,
								:suData.resp_cd,
								SYSDATE,
								SYSDATE
							);

	
		if ( sqlca.sqlcode )
		{
			logger( "[T_FN_NICE_TRAN_NH] INSERT Err [%s-%s][%.200s]\n",suData.deal_date, suData.deal_no,SqlErrMsg );
			EXEC SQL ROLLBACK WORK;
			return 0;
		}
	

		nIndex ++;
	}
	EXEC SQL COMMIT WORK;
		
	fclose(fp);
	logger(" insert T_FN_NICE_TRAN_NH[%s][%d건] 완료 \n", suHead.deal_date, nIndex-1 );
	return 0;
}

/****************************************************************************/
/* 01. FUNCTION	ID      : {CleanUp}                                       */
/* 02. 작  성  자       	: {방혜진}                                          	*/
/* 03. 작 성 일 자      	: {2006/07/13}                                      */
/* 04. 프로그램기능     	: {해당 Sock Close, Log File Close, Program End}		*/
/* 05. 입력FILE         	: 													*/
/* 06. 출력FILE         	:													*/
/* 07. Return	값      	: {}												*/
/* 08. REMARKS 사항     	: {}                                               	*/
/****************************************************************************/
void    CleanUp(int Sig)
{
    logger("Clena Up Sig = %d\n\n", Sig);
    LogClose();
	sleep(1);
    exit(0);
}